
Firmware_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005460  08005460  00006460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f0  080054f0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f8  080054f8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005500  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000068  08005568  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08005568  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d5e  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c14  00000000  00000000  00019df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce6  00000000  00000000  0001dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039d7  00000000  00000000  0001e7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015159  00000000  00000000  0002217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd00  00000000  00000000  000372d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102fd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  0010301c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00107c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005448 	.word	0x08005448

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005448 	.word	0x08005448

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <Motors_Init>:

/////// Functions definitions //////


void Motors_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; ++i)
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e026      	b.n	80005ba <Motors_Init+0x5a>
	{
		motor_states[i].direction = DIR_FORWARD;
 800056c:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <Motors_Init+0x6c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	4413      	add	r3, r2
 8000574:	2200      	movs	r2, #0
 8000576:	711a      	strb	r2, [r3, #4]
		motor_states[i].enabled = false;
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <Motors_Init+0x6c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	4413      	add	r3, r2
 8000580:	2200      	movs	r2, #0
 8000582:	715a      	strb	r2, [r3, #5]
		motor_states[i].step_period_us = 0;
 8000584:	4a11      	ldr	r2, [pc, #68]	@ (80005cc <Motors_Init+0x6c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2100      	movs	r1, #0
 800058a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

		// IT Not handled by update()
		HAL_TIM_Base_Stop_IT(MOT_TIM_HANDLE_PTR(i));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d00b      	beq.n	80005ac <Motors_Init+0x4c>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d006      	beq.n	80005a8 <Motors_Init+0x48>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <Motors_Init+0x44>
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <Motors_Init+0x70>)
 80005a2:	e004      	b.n	80005ae <Motors_Init+0x4e>
 80005a4:	2300      	movs	r3, #0
 80005a6:	e002      	b.n	80005ae <Motors_Init+0x4e>
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <Motors_Init+0x74>)
 80005aa:	e000      	b.n	80005ae <Motors_Init+0x4e>
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <Motors_Init+0x78>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fbd4 	bl	8002d5c <HAL_TIM_Base_Stop_IT>
	for (int i = 0; i < 3; ++i)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	ddd5      	ble.n	800056c <Motors_Init+0xc>
	}

	Motors_Update();
 80005c0:	f000 f878 	bl	80006b4 <Motors_Update>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000084 	.word	0x20000084
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	200000f0 	.word	0x200000f0
 80005d8:	2000013c 	.word	0x2000013c

080005dc <Motors_SetSpeedSingle>:

void Motors_SetSpeedSingle(uint8_t motor_index, MotorDirection_t direction, uint32_t step_period_us)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	603a      	str	r2, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	460b      	mov	r3, r1
 80005ea:	71bb      	strb	r3, [r7, #6]
	motor_states[motor_index].direction = direction;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <Motors_SetSpeedSingle+0x80>)
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	4413      	add	r3, r2
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	711a      	strb	r2, [r3, #4]
	motor_states[motor_index].step_period_us = step_period_us;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4918      	ldr	r1, [pc, #96]	@ (800065c <Motors_SetSpeedSingle+0x80>)
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	motor_states[motor_index].enabled = true;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4a15      	ldr	r2, [pc, #84]	@ (800065c <Motors_SetSpeedSingle+0x80>)
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	2201      	movs	r2, #1
 800060c:	715a      	strb	r2, [r3, #5]

	// Activate IT if needed
	if (!motor_it_enabled[motor_index] && step_period_us != 0)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <Motors_SetSpeedSingle+0x84>)
 8000612:	5cd3      	ldrb	r3, [r2, r3]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d019      	beq.n	8000652 <Motors_SetSpeedSingle+0x76>
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d016      	beq.n	8000652 <Motors_SetSpeedSingle+0x76>
	{
		motor_it_enabled[motor_index] = true;
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4a0e      	ldr	r2, [pc, #56]	@ (8000660 <Motors_SetSpeedSingle+0x84>)
 8000628:	2101      	movs	r1, #1
 800062a:	54d1      	strb	r1, [r2, r3]
		HAL_TIM_Base_Start_IT(MOT_TIM_HANDLE_PTR(motor_index));
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d00b      	beq.n	800064a <Motors_SetSpeedSingle+0x6e>
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d006      	beq.n	8000646 <Motors_SetSpeedSingle+0x6a>
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d101      	bne.n	8000642 <Motors_SetSpeedSingle+0x66>
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <Motors_SetSpeedSingle+0x88>)
 8000640:	e004      	b.n	800064c <Motors_SetSpeedSingle+0x70>
 8000642:	2300      	movs	r3, #0
 8000644:	e002      	b.n	800064c <Motors_SetSpeedSingle+0x70>
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <Motors_SetSpeedSingle+0x8c>)
 8000648:	e000      	b.n	800064c <Motors_SetSpeedSingle+0x70>
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <Motors_SetSpeedSingle+0x90>)
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fb31 	bl	8002cb4 <HAL_TIM_Base_Start_IT>
	}
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000084 	.word	0x20000084
 8000660:	2000009c 	.word	0x2000009c
 8000664:	200000a4 	.word	0x200000a4
 8000668:	200000f0 	.word	0x200000f0
 800066c:	2000013c 	.word	0x2000013c

08000670 <Motors_SetSpeedAll>:
		HAL_TIM_Base_Stop_IT(MOT_TIM_HANDLE_PTR(motor_index));
	}
}

void Motors_SetSpeedAll(MotorDirection_t *directions, uint32_t *step_periods_us)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; ++i)
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e010      	b.n	80006a2 <Motors_SetSpeedAll+0x32>
	{
		Motors_SetSpeedSingle(i, directions[i], step_periods_us[i]);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	b2d8      	uxtb	r0, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	4413      	add	r3, r2
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	f7ff ffa0 	bl	80005dc <Motors_SetSpeedSingle>
	for (int i = 0; i < 3; ++i)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	ddeb      	ble.n	8000680 <Motors_SetSpeedAll+0x10>
	}
	Motors_Update();
 80006a8:	f000 f804 	bl	80006b4 <Motors_Update>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <Motors_Update>:

/**
 * @brief Update the motors timer overflow and dir pins to match the contents of the motor_states array
 */
void Motors_Update()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; ++i)
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e0c2      	b.n	8000846 <Motors_Update+0x192>
	{
		// Timer overflow //
		if (motor_states[i].step_period_us >= MOTORS_MIN_PERIOD_US && motor_states[i].step_period_us <= MOTORS_MAX_PERIOD_US)
 80006c0:	4a65      	ldr	r2, [pc, #404]	@ (8000858 <Motors_Update+0x1a4>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006c8:	2b63      	cmp	r3, #99	@ 0x63
 80006ca:	d932      	bls.n	8000732 <Motors_Update+0x7e>
 80006cc:	4a62      	ldr	r2, [pc, #392]	@ (8000858 <Motors_Update+0x1a4>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80006d8:	d22b      	bcs.n	8000732 <Motors_Update+0x7e>
		{
			__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), (uint32_t)(motor_states[i].step_period_us));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d00b      	beq.n	80006f8 <Motors_Update+0x44>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d006      	beq.n	80006f4 <Motors_Update+0x40>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <Motors_Update+0x3c>
 80006ec:	4b5b      	ldr	r3, [pc, #364]	@ (800085c <Motors_Update+0x1a8>)
 80006ee:	e004      	b.n	80006fa <Motors_Update+0x46>
 80006f0:	2300      	movs	r3, #0
 80006f2:	e002      	b.n	80006fa <Motors_Update+0x46>
 80006f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000860 <Motors_Update+0x1ac>)
 80006f6:	e000      	b.n	80006fa <Motors_Update+0x46>
 80006f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000864 <Motors_Update+0x1b0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4956      	ldr	r1, [pc, #344]	@ (8000858 <Motors_Update+0x1a4>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8000704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d00b      	beq.n	8000724 <Motors_Update+0x70>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d006      	beq.n	8000720 <Motors_Update+0x6c>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <Motors_Update+0x68>
 8000718:	4b50      	ldr	r3, [pc, #320]	@ (800085c <Motors_Update+0x1a8>)
 800071a:	e004      	b.n	8000726 <Motors_Update+0x72>
 800071c:	2300      	movs	r3, #0
 800071e:	e002      	b.n	8000726 <Motors_Update+0x72>
 8000720:	4b4f      	ldr	r3, [pc, #316]	@ (8000860 <Motors_Update+0x1ac>)
 8000722:	e000      	b.n	8000726 <Motors_Update+0x72>
 8000724:	4b4f      	ldr	r3, [pc, #316]	@ (8000864 <Motors_Update+0x1b0>)
 8000726:	494c      	ldr	r1, [pc, #304]	@ (8000858 <Motors_Update+0x1a4>)
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	e059      	b.n	80007e6 <Motors_Update+0x132>
		}
		else if (motor_states[i].step_period_us > MOTORS_MAX_PERIOD_US)
 8000732:	4a49      	ldr	r2, [pc, #292]	@ (8000858 <Motors_Update+0x1a4>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800073a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800073e:	d327      	bcc.n	8000790 <Motors_Update+0xdc>
		{
			__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), (uint32_t)(MOTORS_MAX_PERIOD_US));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d00b      	beq.n	800075e <Motors_Update+0xaa>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d006      	beq.n	800075a <Motors_Update+0xa6>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <Motors_Update+0xa2>
 8000752:	4b42      	ldr	r3, [pc, #264]	@ (800085c <Motors_Update+0x1a8>)
 8000754:	e004      	b.n	8000760 <Motors_Update+0xac>
 8000756:	2300      	movs	r3, #0
 8000758:	e002      	b.n	8000760 <Motors_Update+0xac>
 800075a:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <Motors_Update+0x1ac>)
 800075c:	e000      	b.n	8000760 <Motors_Update+0xac>
 800075e:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <Motors_Update+0x1b0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000766:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d00b      	beq.n	8000786 <Motors_Update+0xd2>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d006      	beq.n	8000782 <Motors_Update+0xce>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <Motors_Update+0xca>
 800077a:	4b38      	ldr	r3, [pc, #224]	@ (800085c <Motors_Update+0x1a8>)
 800077c:	e004      	b.n	8000788 <Motors_Update+0xd4>
 800077e:	2300      	movs	r3, #0
 8000780:	e002      	b.n	8000788 <Motors_Update+0xd4>
 8000782:	4b37      	ldr	r3, [pc, #220]	@ (8000860 <Motors_Update+0x1ac>)
 8000784:	e000      	b.n	8000788 <Motors_Update+0xd4>
 8000786:	4b37      	ldr	r3, [pc, #220]	@ (8000864 <Motors_Update+0x1b0>)
 8000788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	e02a      	b.n	80007e6 <Motors_Update+0x132>
		}
		else if (motor_states[i].step_period_us < MOTORS_MIN_PERIOD_US)
 8000790:	4a31      	ldr	r2, [pc, #196]	@ (8000858 <Motors_Update+0x1a4>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000798:	2b63      	cmp	r3, #99	@ 0x63
 800079a:	d824      	bhi.n	80007e6 <Motors_Update+0x132>
		{
			__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), (uint32_t)(MOTORS_MIN_PERIOD_US));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d00b      	beq.n	80007ba <Motors_Update+0x106>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d006      	beq.n	80007b6 <Motors_Update+0x102>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <Motors_Update+0xfe>
 80007ae:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <Motors_Update+0x1a8>)
 80007b0:	e004      	b.n	80007bc <Motors_Update+0x108>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e002      	b.n	80007bc <Motors_Update+0x108>
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <Motors_Update+0x1ac>)
 80007b8:	e000      	b.n	80007bc <Motors_Update+0x108>
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <Motors_Update+0x1b0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2264      	movs	r2, #100	@ 0x64
 80007c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d00b      	beq.n	80007e0 <Motors_Update+0x12c>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d006      	beq.n	80007dc <Motors_Update+0x128>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <Motors_Update+0x124>
 80007d4:	4b21      	ldr	r3, [pc, #132]	@ (800085c <Motors_Update+0x1a8>)
 80007d6:	e004      	b.n	80007e2 <Motors_Update+0x12e>
 80007d8:	2300      	movs	r3, #0
 80007da:	e002      	b.n	80007e2 <Motors_Update+0x12e>
 80007dc:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <Motors_Update+0x1ac>)
 80007de:	e000      	b.n	80007e2 <Motors_Update+0x12e>
 80007e0:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <Motors_Update+0x1b0>)
 80007e2:	2264      	movs	r2, #100	@ 0x64
 80007e4:	60da      	str	r2, [r3, #12]
		}

		// Direction pin state
		HAL_GPIO_WritePin(MOT_DIR_GPIO_PORT(i), MOT_DIR_GPIO_PIN(i), motor_states[i].direction);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d00d      	beq.n	8000808 <Motors_Update+0x154>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d007      	beq.n	8000802 <Motors_Update+0x14e>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <Motors_Update+0x14a>
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fc:	e006      	b.n	800080c <Motors_Update+0x158>
 80007fe:	2000      	movs	r0, #0
 8000800:	e004      	b.n	800080c <Motors_Update+0x158>
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	e001      	b.n	800080c <Motors_Update+0x158>
 8000808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d00c      	beq.n	800082c <Motors_Update+0x178>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d007      	beq.n	8000828 <Motors_Update+0x174>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4619      	mov	r1, r3
 8000826:	e003      	b.n	8000830 <Motors_Update+0x17c>
 8000828:	2110      	movs	r1, #16
 800082a:	e001      	b.n	8000830 <Motors_Update+0x17c>
 800082c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000830:	4a09      	ldr	r2, [pc, #36]	@ (8000858 <Motors_Update+0x1a4>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	4413      	add	r3, r2
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	461a      	mov	r2, r3
 800083c:	f001 f82c 	bl	8001898 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; ++i)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b02      	cmp	r3, #2
 800084a:	f77f af39 	ble.w	80006c0 <Motors_Update+0xc>
	}
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000084 	.word	0x20000084
 800085c:	200000a4 	.word	0x200000a4
 8000860:	200000f0 	.word	0x200000f0
 8000864:	2000013c 	.word	0x2000013c

08000868 <Motors_TimerITCallback>:

void Motors_TimerITCallback(TIM_HandleTypeDef* htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == MOT0_TIM_HANDLE_PTR->Instance)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <Motors_TimerITCallback+0x54>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d105      	bne.n	8000888 <Motors_TimerITCallback+0x20>
	{
		HAL_GPIO_TogglePin(MOT0_STP_GPIO_Port, MOT0_STP_Pin);
 800087c:	2102      	movs	r1, #2
 800087e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000882:	f001 f821 	bl	80018c8 <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == MOT2_TIM_HANDLE_PTR->Instance)
	{
		HAL_GPIO_TogglePin(MOT2_STP_GPIO_Port, MOT2_STP_Pin);
	}
}
 8000886:	e015      	b.n	80008b4 <Motors_TimerITCallback+0x4c>
	else if (htim->Instance == MOT1_TIM_HANDLE_PTR->Instance)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <Motors_TimerITCallback+0x58>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d105      	bne.n	80008a0 <Motors_TimerITCallback+0x38>
		HAL_GPIO_TogglePin(MOT1_STP_GPIO_Port, MOT1_STP_Pin);
 8000894:	2120      	movs	r1, #32
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f001 f815 	bl	80018c8 <HAL_GPIO_TogglePin>
}
 800089e:	e009      	b.n	80008b4 <Motors_TimerITCallback+0x4c>
	else if (htim->Instance == MOT2_TIM_HANDLE_PTR->Instance)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <Motors_TimerITCallback+0x5c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d103      	bne.n	80008b4 <Motors_TimerITCallback+0x4c>
		HAL_GPIO_TogglePin(MOT2_STP_GPIO_Port, MOT2_STP_Pin);
 80008ac:	2120      	movs	r1, #32
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <Motors_TimerITCallback+0x60>)
 80008b0:	f001 f80a 	bl	80018c8 <HAL_GPIO_TogglePin>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000a4 	.word	0x200000a4
 80008c0:	200000f0 	.word	0x200000f0
 80008c4:	2000013c 	.word	0x2000013c
 80008c8:	48000400 	.word	0x48000400

080008cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <MX_GPIO_Init+0x120>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a41      	ldr	r2, [pc, #260]	@ (80009ec <MX_GPIO_Init+0x120>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b3f      	ldr	r3, [pc, #252]	@ (80009ec <MX_GPIO_Init+0x120>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <MX_GPIO_Init+0x120>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a3b      	ldr	r2, [pc, #236]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a35      	ldr	r2, [pc, #212]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b33      	ldr	r3, [pc, #204]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b30      	ldr	r3, [pc, #192]	@ (80009ec <MX_GPIO_Init+0x120>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a2f      	ldr	r2, [pc, #188]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <MX_GPIO_Init+0x120>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT0_DIR_Pin|MOT0_STP_Pin|MOT0_EN_Pin|MOT1_DIR_Pin
 8000942:	2200      	movs	r2, #0
 8000944:	f640 017b 	movw	r1, #2171	@ 0x87b
 8000948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094c:	f000 ffa4 	bl	8001898 <HAL_GPIO_WritePin>
                          |MOT1_STP_Pin|MOT1_EN_Pin|MOT2_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|MOT2_EN_Pin|MOT2_STP_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2138      	movs	r1, #56	@ 0x38
 8000954:	4826      	ldr	r0, [pc, #152]	@ (80009f0 <MX_GPIO_Init+0x124>)
 8000956:	f000 ff9f 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT0_DIR_Pin|MOT0_STP_Pin|MOT0_EN_Pin|MOT1_DIR_Pin
 800095a:	f640 037b 	movw	r3, #2171	@ 0x87b
 800095e:	617b      	str	r3, [r7, #20]
                          |MOT1_STP_Pin|MOT1_EN_Pin|MOT2_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000976:	f000 fe25 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800097a:	f44f 53bc 	mov.w	r3, #6016	@ 0x1780
 800097e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000992:	f000 fe17 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000996:	23c3      	movs	r3, #195	@ 0xc3
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_GPIO_Init+0x124>)
 80009aa:	f000 fe0b 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|MOT2_EN_Pin|MOT2_STP_Pin;
 80009ae:	2338      	movs	r3, #56	@ 0x38
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480a      	ldr	r0, [pc, #40]	@ (80009f0 <MX_GPIO_Init+0x124>)
 80009c6:	f000 fdfd 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ca:	2308      	movs	r3, #8
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_GPIO_Init+0x128>)
 80009de:	f000 fdf1 	bl	80015c4 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400
 80009f4:	48001c00 	.word	0x48001c00

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int test = 5;
 80009fe:	2305      	movs	r3, #5
 8000a00:	617b      	str	r3, [r7, #20]
	MotorDirection_t dirs[3] = {DIR_FORWARD, DIR_FORWARD, DIR_BACKWARD};
 8000a02:	2300      	movs	r3, #0
 8000a04:	743b      	strb	r3, [r7, #16]
 8000a06:	2300      	movs	r3, #0
 8000a08:	747b      	strb	r3, [r7, #17]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	74bb      	strb	r3, [r7, #18]
	uint32_t periods[3] = {10000, 10000, 10000};
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <main+0x64>)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fbab 	bl	8001172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f822 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f7ff ff54 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a24:	f000 fada 	bl	8000fdc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a28:	f000 f9c2 	bl	8000db0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000a2c:	f000 fa0e 	bl	8000e4c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000a30:	f000 fa42 	bl	8000eb8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Motors_Init();
 8000a34:	f7ff fd94 	bl	8000560 <Motors_Init>
  Motors_SetSpeedAll(dirs, periods);
 8000a38:	1d3a      	adds	r2, r7, #4
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe15 	bl	8000670 <Motors_SetSpeedAll>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hey %d\n", test);
 8000a46:	6979      	ldr	r1, [r7, #20]
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <main+0x68>)
 8000a4a:	f003 fe8f 	bl	800476c <iprintf>
	  HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a52:	f000 fc03 	bl	800125c <HAL_Delay>
	  printf("Hey %d\n", test);
 8000a56:	bf00      	nop
 8000a58:	e7f5      	b.n	8000a46 <main+0x4e>
 8000a5a:	bf00      	nop
 8000a5c:	08005468 	.word	0x08005468
 8000a60:	08005460 	.word	0x08005460

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b096      	sub	sp, #88	@ 0x58
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2244      	movs	r2, #68	@ 0x44
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fecf 	bl	8004816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a8a:	f000 ff45 	bl	8001918 <HAL_PWREx_ControlVoltageScaling>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a94:	f000 f842 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 ff7c 	bl	80019c4 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ad2:	f000 f823 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2303      	movs	r3, #3
 8000adc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2103      	movs	r1, #3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fb7c 	bl	80021ec <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afa:	f000 f80f 	bl	8000b1c <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3758      	adds	r7, #88	@ 0x58
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//////// TIMER INTERRUPTS ///////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	// Callback for motor control (Impulses for the stepper)
	Motors_TimerITCallback(htim);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff feaa 	bl	8000868 <Motors_TimerITCallback>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <__io_putchar>:

#include "main.h"
#include "usart.h"

int __io_putchar(int ch)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <__io_putchar+0x20>)
 8000b3a:	f002 fd13 	bl	8003564 <HAL_UART_Transmit>

	return ch;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000188 	.word	0x20000188

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <NMI_Handler+0x4>

08000b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <MemManage_Handler+0x4>

08000bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 fb17 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <TIM2_IRQHandler+0x10>)
 8000bfa:	f002 f8de 	bl	8002dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000a4 	.word	0x200000a4

08000c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <USART2_IRQHandler+0x10>)
 8000c0e:	f002 fd33 	bl	8003678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000188 	.word	0x20000188

08000c1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <TIM6_DAC_IRQHandler+0x10>)
 8000c22:	f002 f8ca 	bl	8002dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000f0 	.word	0x200000f0

08000c30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <TIM7_IRQHandler+0x10>)
 8000c36:	f002 f8c0 	bl	8002dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000013c 	.word	0x2000013c

08000c44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e00a      	b.n	8000c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf0      	blt.n	8000c56 <_read+0x12>
  }

  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e009      	b.n	8000ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff45 	bl	8000b28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf1      	blt.n	8000c90 <_write+0x12>
  }
  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cde:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_isatty>:

int _isatty(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f003 fdb0 	bl	80048b4 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20010000 	.word	0x20010000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200000a0 	.word	0x200000a0
 8000d88:	20000360 	.word	0x20000360

08000d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dd8:	223f      	movs	r2, #63	@ 0x3f
 8000dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df6:	4814      	ldr	r0, [pc, #80]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000df8:	f001 ff04 	bl	8002c04 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e02:	f7ff fe8b 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000e14:	f002 f8d8 	bl	8002fc8 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e1e:	f7ff fe7d 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000e30:	f002 fac6 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3a:	f7ff fe6f 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000a4 	.word	0x200000a4

08000e4c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <MX_TIM6_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e64:	223f      	movs	r2, #63	@ 0x3f
 8000e66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e7e:	f001 fec1 	bl	8002c04 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e88:	f7ff fe48 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e9a:	f002 fa91 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f7ff fe3a 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000f0 	.word	0x200000f0
 8000eb4:	40001000 	.word	0x40001000

08000eb8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	@ (8000f20 <MX_TIM7_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000ed0:	223f      	movs	r2, #63	@ 0x3f
 8000ed2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000eea:	f001 fe8b 	bl	8002c04 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ef4:	f7ff fe12 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_TIM7_Init+0x64>)
 8000f06:	f002 fa5b 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f7ff fe04 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000013c 	.word	0x2000013c
 8000f20:	40001400 	.word	0x40001400

08000f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f34:	d114      	bne.n	8000f60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 fa81 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 fa9a 	bl	8001492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000f5e:	e032      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d114      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2036      	movs	r0, #54	@ 0x36
 8000f88:	f000 fa67 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f8c:	2036      	movs	r0, #54	@ 0x36
 8000f8e:	f000 fa80 	bl	8001492 <HAL_NVIC_EnableIRQ>
}
 8000f92:	e018      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xb4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d113      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xac>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2037      	movs	r0, #55	@ 0x37
 8000fbc:	f000 fa4d 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fc0:	2037      	movs	r0, #55	@ 0x37
 8000fc2:	f000 fa66 	bl	8001492 <HAL_NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40001000 	.word	0x40001000
 8000fd8:	40001400 	.word	0x40001400

08000fdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <MX_USART2_UART_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001020:	f002 fa52 	bl	80034c8 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fd77 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000188 	.word	0x20000188
 8001038:	40004400 	.word	0x40004400

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09e      	sub	sp, #120	@ 0x78
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2254      	movs	r2, #84	@ 0x54
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fbda 	bl	8004816 <memset>
  if(uartHandle->Instance==USART2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a2c      	ldr	r2, [pc, #176]	@ (8001118 <HAL_UART_MspInit+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d150      	bne.n	800110e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fadb 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001084:	f7ff fd4a 	bl	8000b1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001088:	4b24      	ldr	r3, [pc, #144]	@ (800111c <HAL_UART_MspInit+0xe0>)
 800108a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108c:	4a23      	ldr	r2, [pc, #140]	@ (800111c <HAL_UART_MspInit+0xe0>)
 800108e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001092:	6593      	str	r3, [r2, #88]	@ 0x58
 8001094:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_UART_MspInit+0xe0>)
 8001096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_UART_MspInit+0xe0>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_UART_MspInit+0xe0>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_UART_MspInit+0xe0>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010b8:	2304      	movs	r3, #4
 80010ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c8:	2307      	movs	r3, #7
 80010ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d6:	f000 fa75 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010ec:	2303      	movs	r3, #3
 80010ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fa:	f000 fa63 	bl	80015c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2026      	movs	r0, #38	@ 0x26
 8001104:	f000 f9a9 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001108:	2026      	movs	r0, #38	@ 0x26
 800110a:	f000 f9c2 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3778      	adds	r7, #120	@ 0x78
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001124:	f7ff fe32 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	@ (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f003 fbb7 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fc51 	bl	80009f8 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001158:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001164:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 8001168:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800116c:	20000360 	.word	0x20000360

08001170 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_IRQHandler>

08001172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f961 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f80e 	bl	80011a4 <HAL_InitTick>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e001      	b.n	8001198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001194:	f7ff fcda 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001198:	79fb      	ldrb	r3, [r7, #7]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d023      	beq.n	8001200 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <HAL_InitTick+0x70>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f96d 	bl	80014ae <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10f      	bne.n	80011fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d809      	bhi.n	80011f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f937 	bl	800145a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <HAL_InitTick+0x74>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e007      	b.n	8001204 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e004      	b.n	8001204 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e001      	b.n	8001204 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000210 	.word	0x20000210

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000210 	.word	0x20000210

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	@ (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	@ (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	@ 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d008      	beq.n	80014f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2204      	movs	r2, #4
 80014e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e022      	b.n	8001536 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001514:	f003 021c 	and.w	r2, r3, #28
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d005      	beq.n	8001566 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2204      	movs	r2, #4
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e029      	b.n	80015ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 020e 	bic.w	r2, r2, #14
 8001574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f003 021c 	and.w	r2, r3, #28
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	4798      	blx	r3
    }
  }
  return status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e148      	b.n	8001866 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 813a 	beq.w	8001860 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x40>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f003 0201 	and.w	r2, r3, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b03      	cmp	r3, #3
 8001670:	d017      	beq.n	80016a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d123      	bne.n	80016f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	6939      	ldr	r1, [r7, #16]
 80016f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0203 	and.w	r2, r3, #3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8094 	beq.w	8001860 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	4b52      	ldr	r3, [pc, #328]	@ (8001884 <HAL_GPIO_Init+0x2c0>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173c:	4a51      	ldr	r2, [pc, #324]	@ (8001884 <HAL_GPIO_Init+0x2c0>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6613      	str	r3, [r2, #96]	@ 0x60
 8001744:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <HAL_GPIO_Init+0x2c0>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001750:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <HAL_GPIO_Init+0x2c4>)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800177a:	d00d      	beq.n	8001798 <HAL_GPIO_Init+0x1d4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a43      	ldr	r2, [pc, #268]	@ (800188c <HAL_GPIO_Init+0x2c8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d007      	beq.n	8001794 <HAL_GPIO_Init+0x1d0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a42      	ldr	r2, [pc, #264]	@ (8001890 <HAL_GPIO_Init+0x2cc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_GPIO_Init+0x1cc>
 800178c:	2302      	movs	r3, #2
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1d6>
 8001790:	2307      	movs	r3, #7
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1d6>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1d6>
 8001798:	2300      	movs	r3, #0
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017aa:	4937      	ldr	r1, [pc, #220]	@ (8001888 <HAL_GPIO_Init+0x2c4>)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b8:	4b36      	ldr	r3, [pc, #216]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001806:	4a23      	ldr	r2, [pc, #140]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001830:	4a18      	ldr	r2, [pc, #96]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <HAL_GPIO_Init+0x2d0>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	f47f aeaf 	bne.w	80015d4 <HAL_GPIO_Init+0x10>
  }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	48000400 	.word	0x48000400
 8001890:	48000800 	.word	0x48000800
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	041a      	lsls	r2, r3, #16
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43d9      	mvns	r1, r3
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	400b      	ands	r3, r1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <HAL_PWREx_GetVoltageRange+0x18>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000

08001918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001926:	d130      	bne.n	800198a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001928:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001934:	d038      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800193e:	4a1e      	ldr	r2, [pc, #120]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001940:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2232      	movs	r2, #50	@ 0x32
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195c:	e002      	b.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3b01      	subs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001970:	d102      	bne.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f2      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001984:	d110      	bne.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e00f      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001996:	d007      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019a0:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40007000 	.word	0x40007000
 80019bc:	20000000 	.word	0x20000000
 80019c0:	431bde83 	.word	0x431bde83

080019c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 bc02 	b.w	80021dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d8:	4b96      	ldr	r3, [pc, #600]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e2:	4b94      	ldr	r3, [pc, #592]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80e4 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4c>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	f040 808b 	bne.w	8001b1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	f040 8087 	bne.w	8001b1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a10:	4b88      	ldr	r3, [pc, #544]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x64>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e3d9      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	4b81      	ldr	r3, [pc, #516]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_RCC_OscConfig+0x7e>
 8001a38:	4b7e      	ldr	r3, [pc, #504]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a40:	e005      	b.n	8001a4e <HAL_RCC_OscConfig+0x8a>
 8001a42:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d223      	bcs.n	8001a9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fd8c 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e3ba      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a66:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a72      	ldr	r2, [pc, #456]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b70      	ldr	r3, [pc, #448]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	496d      	ldr	r1, [pc, #436]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a84:	4b6b      	ldr	r3, [pc, #428]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	4968      	ldr	r1, [pc, #416]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e025      	b.n	8001ae6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9a:	4b66      	ldr	r3, [pc, #408]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a65      	ldr	r2, [pc, #404]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4960      	ldr	r1, [pc, #384]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	495b      	ldr	r1, [pc, #364]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd4c 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e37a      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae6:	f000 fc81 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b51      	ldr	r3, [pc, #324]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4950      	ldr	r1, [pc, #320]	@ (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a4e      	ldr	r2, [pc, #312]	@ (8001c3c <HAL_RCC_OscConfig+0x278>)
 8001b04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b06:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <HAL_RCC_OscConfig+0x27c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb4a 	bl	80011a4 <HAL_InitTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d052      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	e35e      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d032      	beq.n	8001b8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b26:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fb87 	bl	8001244 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fb83 	bl	8001244 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e347      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b58:	4b36      	ldr	r3, [pc, #216]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a35      	ldr	r2, [pc, #212]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4930      	ldr	r1, [pc, #192]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b76:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	492b      	ldr	r1, [pc, #172]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e01a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b8c:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fb54 	bl	8001244 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fb50 	bl	8001244 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e314      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1dc>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d073      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x21c>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d063      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d15f      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e2f1      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x24c>
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e025      	b.n	8001c5c <HAL_RCC_OscConfig+0x298>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c18:	d114      	bne.n	8001c44 <HAL_RCC_OscConfig+0x280>
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a02      	ldr	r2, [pc, #8]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x298>
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08005474 	.word	0x08005474
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004
 8001c44:	4ba0      	ldr	r3, [pc, #640]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a9f      	ldr	r2, [pc, #636]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b9d      	ldr	r3, [pc, #628]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff faee 	bl	8001244 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff faea 	bl	8001244 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e2ae      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	4b92      	ldr	r3, [pc, #584]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x2a8>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fada 	bl	8001244 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fad6 	bl	8001244 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e29a      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	4b88      	ldr	r3, [pc, #544]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2d0>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d060      	beq.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x310>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x328>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e277      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	4973      	ldr	r1, [pc, #460]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	e040      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d023      	beq.n	8001d52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fa95 	bl	8001244 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fa91 	bl	8001244 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e255      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	495f      	ldr	r1, [pc, #380]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fa71 	bl	8001244 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff fa6d 	bl	8001244 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e231      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d98:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa4c 	bl	8001244 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa48 	bl	8001244 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e20c      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCC_OscConfig+0x3ec>
 8001dd0:	e01b      	b.n	8001e0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa2f 	bl	8001244 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff fa2b 	bl	8001244 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1ef      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfc:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a6 	beq.w	8001f64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d118      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f9f2 	bl	8001244 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e64:	f7ff f9ee 	bl	8001244 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1b2      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4d8>
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9a:	e029      	b.n	8001ef0 <HAL_RCC_OscConfig+0x52c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d115      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x50c>
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x52c>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	4b9a      	ldr	r3, [pc, #616]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed6:	4a99      	ldr	r2, [pc, #612]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee0:	4b96      	ldr	r3, [pc, #600]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	4a95      	ldr	r2, [pc, #596]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d016      	beq.n	8001f26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f9a4 	bl	8001244 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff f9a0 	bl	8001244 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e162      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f16:	4b89      	ldr	r3, [pc, #548]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ed      	beq.n	8001f00 <HAL_RCC_OscConfig+0x53c>
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff f98d 	bl	8001244 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff f989 	bl	8001244 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e14b      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f44:	4b7d      	ldr	r3, [pc, #500]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ed      	bne.n	8001f2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b78      	ldr	r3, [pc, #480]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a77      	ldr	r2, [pc, #476]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03c      	beq.n	8001fea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f78:	4b70      	ldr	r3, [pc, #448]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f95c 	bl	8001244 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f90:	f7ff f958 	bl	8001244 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e11c      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fa2:	4b66      	ldr	r3, [pc, #408]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ef      	beq.n	8001f90 <HAL_RCC_OscConfig+0x5cc>
 8001fb0:	e01b      	b.n	8001fea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fb2:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fb8:	4a60      	ldr	r2, [pc, #384]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f93f 	bl	8001244 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fca:	f7ff f93b 	bl	8001244 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0ff      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fdc:	4b57      	ldr	r3, [pc, #348]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80f3 	beq.w	80021da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f040 80c9 	bne.w	8002190 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0203 	and.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	429a      	cmp	r2, r3
 8002010:	d12c      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	3b01      	subs	r3, #1
 800201e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d123      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d11b      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d113      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d109      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d06b      	beq.n	8002144 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d062      	beq.n	8002138 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002072:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0ac      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002082:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2d      	ldr	r2, [pc, #180]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208e:	f7ff f8d9 	bl	8001244 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff f8d5 	bl	8001244 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e099      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020c4:	3a01      	subs	r2, #1
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	4311      	orrs	r1, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ce:	0212      	lsls	r2, r2, #8
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020d6:	0852      	lsrs	r2, r2, #1
 80020d8:	3a01      	subs	r2, #1
 80020da:	0552      	lsls	r2, r2, #21
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020e2:	0852      	lsrs	r2, r2, #1
 80020e4:	3a01      	subs	r2, #1
 80020e6:	0652      	lsls	r2, r2, #25
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ee:	06d2      	lsls	r2, r2, #27
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4912      	ldr	r1, [pc, #72]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f898 	bl	8001244 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f894 	bl	8001244 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e058      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002136:	e050      	b.n	80021da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04f      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
 800213c:	40021000 	.word	0x40021000
 8002140:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d144      	bne.n	80021da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002150:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002168:	f7ff f86c 	bl	8001244 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f868 	bl	8001244 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e02c      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x7ac>
 800218e:	e024      	b.n	80021da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d01f      	beq.n	80021d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 800219c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f84f 	bl	8001244 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff f84b 	bl	8001244 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4905      	ldr	r1, [pc, #20]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x824>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e001      	b.n	80021da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	feeefffc 	.word	0xfeeefffc

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0e7      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b72      	ldr	r3, [pc, #456]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4970      	ldr	r1, [pc, #448]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b6e      	ldr	r3, [pc, #440]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cf      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002248:	429a      	cmp	r2, r3
 800224a:	d908      	bls.n	800225e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4960      	ldr	r1, [pc, #384]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04c      	beq.n	8002304 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0a6      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a2:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e086      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b46      	ldr	r3, [pc, #280]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4943      	ldr	r1, [pc, #268]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe ffb6 	bl	8001244 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe ffb2 	bl	8001244 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b2e      	ldr	r3, [pc, #184]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	492b      	ldr	r1, [pc, #172]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002332:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d210      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 0207 	bic.w	r2, r3, #7
 8002348:	4923      	ldr	r1, [pc, #140]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e036      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4918      	ldr	r1, [pc, #96]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4910      	ldr	r1, [pc, #64]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a0:	f000 f824 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	490b      	ldr	r1, [pc, #44]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_ClockConfig+0x1fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe feed 	bl	80011a4 <HAL_InitTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08005474 	.word	0x08005474
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b3e      	ldr	r3, [pc, #248]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x34>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d121      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d11e      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800243c:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002448:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e004      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d101      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 8002472:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d134      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0xa6>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d003      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xac>
 8002490:	e005      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002492:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	3301      	adds	r3, #1
 80024b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	fb03 f202 	mul.w	r2, r3, r2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	0e5b      	lsrs	r3, r3, #25
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e4:	69bb      	ldr	r3, [r7, #24]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	0800548c 	.word	0x0800548c
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4904      	ldr	r1, [pc, #16]	@ (8002544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08005484 	.word	0x08005484

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800254c:	f7ff ffda 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08005484 	.word	0x08005484

08002574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002580:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800258c:	f7ff f9b6 	bl	80018fc <HAL_PWREx_GetVoltageRange>
 8002590:	6178      	str	r0, [r7, #20]
 8002592:	e014      	b.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	4a24      	ldr	r2, [pc, #144]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a0:	4b22      	ldr	r3, [pc, #136]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ac:	f7ff f9a6 	bl	80018fc <HAL_PWREx_GetVoltageRange>
 80025b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b6:	4a1d      	ldr	r2, [pc, #116]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c4:	d10b      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	@ 0x80
 80025ca:	d919      	bls.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80025d0:	d902      	bls.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e013      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e010      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	@ 0x80
 80025e2:	d902      	bls.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e4:	2303      	movs	r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e00a      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	@ 0x80
 80025ee:	d102      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f0:	2302      	movs	r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e004      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b70      	cmp	r3, #112	@ 0x70
 80025fa:	d101      	bne.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 0207 	bic.w	r2, r3, #7
 8002608:	4909      	ldr	r1, [pc, #36]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002610:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	40022000 	.word	0x40022000

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800263c:	2300      	movs	r3, #0
 800263e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002640:	2300      	movs	r3, #0
 8002642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800264c:	2b00      	cmp	r3, #0
 800264e:	d031      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002658:	d01a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800265a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800265e:	d814      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002664:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002668:	d10f      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800266a:	4b5d      	ldr	r3, [pc, #372]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a5c      	ldr	r2, [pc, #368]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002674:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002676:	e00c      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f9ce 	bl	8002a20 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002688:	e003      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	74fb      	strb	r3, [r7, #19]
      break;
 800268e:	e000      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002698:	4b51      	ldr	r3, [pc, #324]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a6:	494e      	ldr	r1, [pc, #312]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026ae:	e001      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 809e 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c6:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b40      	ldr	r3, [pc, #256]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	4a3f      	ldr	r2, [pc, #252]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e8:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f8:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002704:	f7fe fd9e 	bl	8001244 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270a:	e009      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fd9a 	bl	8001244 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	74fb      	strb	r3, [r7, #19]
        break;
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002720:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15a      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002732:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01e      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	429a      	cmp	r2, r3
 800274c:	d019      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800274e:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002758:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	4a1f      	ldr	r2, [pc, #124]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800277a:	4a19      	ldr	r2, [pc, #100]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fd5a 	bl	8001244 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002792:	e00b      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fd56 	bl	8001244 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d902      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	74fb      	strb	r3, [r7, #19]
            break;
 80027aa:	e006      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ec      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c0:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	4904      	ldr	r1, [pc, #16]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027d6:	e009      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ec:	7c7b      	ldrb	r3, [r7, #17]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b8a      	ldr	r3, [pc, #552]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a89      	ldr	r2, [pc, #548]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280a:	4b84      	ldr	r3, [pc, #528]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4980      	ldr	r1, [pc, #512]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f023 020c 	bic.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	4978      	ldr	r1, [pc, #480]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800284e:	4b73      	ldr	r3, [pc, #460]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	496f      	ldr	r1, [pc, #444]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002870:	4b6a      	ldr	r3, [pc, #424]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	4967      	ldr	r1, [pc, #412]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002892:	4b62      	ldr	r3, [pc, #392]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	495e      	ldr	r1, [pc, #376]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b4:	4b59      	ldr	r3, [pc, #356]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	4956      	ldr	r1, [pc, #344]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d6:	4b51      	ldr	r3, [pc, #324]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	494d      	ldr	r1, [pc, #308]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d028      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f8:	4b48      	ldr	r3, [pc, #288]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4945      	ldr	r1, [pc, #276]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002916:	d106      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a3f      	ldr	r2, [pc, #252]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
 8002924:	e011      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f872 	bl	8002a20 <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002964:	492d      	ldr	r1, [pc, #180]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002974:	d106      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a28      	ldr	r2, [pc, #160]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002980:	60d3      	str	r3, [r2, #12]
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f843 	bl	8002a20 <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01c      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c2:	4916      	ldr	r1, [pc, #88]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029d2:	d10c      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f820 	bl	8002a20 <RCCEx_PLLSAI1_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029fa:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a00:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	4904      	ldr	r1, [pc, #16]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2e:	4b74      	ldr	r3, [pc, #464]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d018      	beq.n	8002a6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a3a:	4b71      	ldr	r3, [pc, #452]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0203 	and.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10d      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a52:	4b6b      	ldr	r3, [pc, #428]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
       ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d047      	beq.n	8002af6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e044      	b.n	8002af6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d018      	beq.n	8002aa6 <RCCEx_PLLSAI1_Config+0x86>
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d825      	bhi.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa4>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <RCCEx_PLLSAI1_Config+0x62>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d009      	beq.n	8002a94 <RCCEx_PLLSAI1_Config+0x74>
 8002a80:	e020      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a82:	4b5f      	ldr	r3, [pc, #380]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a92:	e01a      	b.n	8002aca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a94:	4b5a      	ldr	r3, [pc, #360]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa4:	e013      	b.n	8002ace <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aa6:	4b56      	ldr	r3, [pc, #344]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab2:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ac2:	e006      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e004      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aca:	bf00      	nop
 8002acc:	e002      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e000      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ada:	4b49      	ldr	r3, [pc, #292]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	430b      	orrs	r3, r1
 8002af0:	4943      	ldr	r1, [pc, #268]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d17c      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002afc:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a3f      	ldr	r2, [pc, #252]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe fb9c 	bl	8001244 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b0e:	e009      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b10:	f7fe fb98 	bl	8001244 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	73fb      	strb	r3, [r7, #15]
        break;
 8002b22:	e005      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b24:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ef      	bne.n	8002b10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d15f      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d110      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b3c:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002b44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	0211      	lsls	r1, r2, #8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	06d2      	lsls	r2, r2, #27
 8002b54:	430a      	orrs	r2, r1
 8002b56:	492a      	ldr	r1, [pc, #168]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	610b      	str	r3, [r1, #16]
 8002b5c:	e027      	b.n	8002bae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d112      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b64:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	0211      	lsls	r1, r2, #8
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6912      	ldr	r2, [r2, #16]
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0552      	lsls	r2, r2, #21
 8002b80:	430a      	orrs	r2, r1
 8002b82:	491f      	ldr	r1, [pc, #124]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	610b      	str	r3, [r1, #16]
 8002b88:	e011      	b.n	8002bae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	0211      	lsls	r1, r2, #8
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6952      	ldr	r2, [r2, #20]
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	4915      	ldr	r1, [pc, #84]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bae:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fb43 	bl	8001244 <HAL_GetTick>
 8002bbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bc0:	e009      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc2:	f7fe fb3f 	bl	8001244 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bd4:	e005      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ef      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4903      	ldr	r1, [pc, #12]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e049      	b.n	8002caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe f97a 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fab2 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d001      	beq.n	8002ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e03b      	b.n	8002d44 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	@ (8002d50 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_TIM_Base_Start_IT+0x4e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf6:	d004      	beq.n	8002d02 <HAL_TIM_Base_Start_IT+0x4e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a15      	ldr	r2, [pc, #84]	@ (8002d54 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d115      	bne.n	8002d2e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_TIM_Base_Start_IT+0xa4>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d015      	beq.n	8002d40 <HAL_TIM_Base_Start_IT+0x8c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1a:	d011      	beq.n	8002d40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e008      	b.n	8002d40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40014000 	.word	0x40014000
 8002d58:	00010007 	.word	0x00010007

08002d5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10f      	bne.n	8002da4 <HAL_TIM_Base_Stop_IT+0x48>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_Base_Stop_IT+0x48>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01b      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f06f 0202 	mvn.w	r2, #2
 8002dee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f9b2 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002e0a:	e005      	b.n	8002e18 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f9a4 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9b5 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01b      	beq.n	8002e6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f06f 0204 	mvn.w	r2, #4
 8002e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f98c 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002e56:	e005      	b.n	8002e64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f97e 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f98f 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01b      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0208 	mvn.w	r2, #8
 8002e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f966 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002ea2:	e005      	b.n	8002eb0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f958 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f969 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01b      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0210 	mvn.w	r2, #16
 8002ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f940 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002eee:	e005      	b.n	8002efc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f932 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f943 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00c      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0201 	mvn.w	r2, #1
 8002f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fd fdf0 	bl	8000b06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 faa6 	bl	80034a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00c      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa9e 	bl	80034b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8fd 	bl	8003196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0220 	mvn.w	r2, #32
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa66 	bl	800348c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e0b6      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x18a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003002:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800300e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003020:	d03e      	beq.n	80030a0 <HAL_TIM_ConfigClockSource+0xd8>
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003026:	f200 8087 	bhi.w	8003138 <HAL_TIM_ConfigClockSource+0x170>
 800302a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302e:	f000 8086 	beq.w	800313e <HAL_TIM_ConfigClockSource+0x176>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003036:	d87f      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003038:	2b70      	cmp	r3, #112	@ 0x70
 800303a:	d01a      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0xaa>
 800303c:	2b70      	cmp	r3, #112	@ 0x70
 800303e:	d87b      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003040:	2b60      	cmp	r3, #96	@ 0x60
 8003042:	d050      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x11e>
 8003044:	2b60      	cmp	r3, #96	@ 0x60
 8003046:	d877      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003048:	2b50      	cmp	r3, #80	@ 0x50
 800304a:	d03c      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0xfe>
 800304c:	2b50      	cmp	r3, #80	@ 0x50
 800304e:	d873      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003050:	2b40      	cmp	r3, #64	@ 0x40
 8003052:	d058      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x13e>
 8003054:	2b40      	cmp	r3, #64	@ 0x40
 8003056:	d86f      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003058:	2b30      	cmp	r3, #48	@ 0x30
 800305a:	d064      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x15e>
 800305c:	2b30      	cmp	r3, #48	@ 0x30
 800305e:	d86b      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003060:	2b20      	cmp	r3, #32
 8003062:	d060      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x15e>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d867      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d05c      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x15e>
 800306c:	2b10      	cmp	r3, #16
 800306e:	d05a      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x15e>
 8003070:	e062      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	f000 f97d 	bl	8003380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	609a      	str	r2, [r3, #8]
      break;
 800309e:	e04f      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	f000 f966 	bl	8003380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c2:	609a      	str	r2, [r3, #8]
      break;
 80030c4:	e03c      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 f8da 	bl	800328c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2150      	movs	r1, #80	@ 0x50
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f933 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 80030e4:	e02c      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 f8f9 	bl	80032ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2160      	movs	r1, #96	@ 0x60
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f923 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 8003104:	e01c      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	461a      	mov	r2, r3
 8003114:	f000 f8ba 	bl	800328c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2140      	movs	r1, #64	@ 0x40
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f913 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 8003124:	e00c      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f000 f90a 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 8003136:	e003      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	e000      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800313e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a30      	ldr	r2, [pc, #192]	@ (8003280 <TIM_Base_SetConfig+0xd4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0x20>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ca:	d108      	bne.n	80031de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <TIM_Base_SetConfig+0xd4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a24      	ldr	r2, [pc, #144]	@ (8003284 <TIM_Base_SetConfig+0xd8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a23      	ldr	r2, [pc, #140]	@ (8003288 <TIM_Base_SetConfig+0xdc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a12      	ldr	r2, [pc, #72]	@ (8003280 <TIM_Base_SetConfig+0xd4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0xa0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <TIM_Base_SetConfig+0xd8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0xa0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a10      	ldr	r2, [pc, #64]	@ (8003288 <TIM_Base_SetConfig+0xdc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f023 0201 	bic.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]
  }
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400

0800328c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0201 	bic.w	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f023 030a 	bic.w	r3, r3, #10
 80032c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b087      	sub	sp, #28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 0210 	bic.w	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	031b      	lsls	r3, r3, #12
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003326:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	f043 0307 	orr.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800339a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	021a      	lsls	r2, r3, #8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e04f      	b.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a21      	ldr	r2, [pc, #132]	@ (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003408:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003440:	d004      	beq.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a10      	ldr	r2, [pc, #64]	@ (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10c      	bne.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003452:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e040      	b.n	800355c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fda6 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	@ 0x24
 80034f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fe04 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fbd5 	bl	8003cc4 <UART_SetConfig>
 800351a:	4603      	mov	r3, r0
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e01b      	b.n	800355c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fe83 	bl	8004260 <UART_CheckIdleState>
 800355a:	4603      	mov	r3, r0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003578:	2b20      	cmp	r3, #32
 800357a:	d177      	bne.n	800366c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Transmit+0x24>
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e070      	b.n	800366e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2221      	movs	r2, #33	@ 0x21
 8003598:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359a:	f7fd fe53 	bl	8001244 <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b8:	d108      	bne.n	80035cc <HAL_UART_Transmit+0x68>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d4:	e02f      	b.n	8003636 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	2180      	movs	r1, #128	@ 0x80
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fee5 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e03b      	b.n	800366e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	881a      	ldrh	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003608:	b292      	uxth	r2, r2
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	3302      	adds	r3, #2
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e007      	b.n	8003624 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3301      	adds	r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1c9      	bne.n	80035d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	2140      	movs	r1, #64	@ 0x40
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 feaf 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e005      	b.n	800366e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0ba      	sub	sp, #232	@ 0xe8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800369e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036a6:	4013      	ands	r3, r2
 80036a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d115      	bne.n	80036e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00f      	beq.n	80036e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 82ca 	beq.w	8003c6a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
      }
      return;
 80036de:	e2c4      	b.n	8003c6a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8117 	beq.w	8003918 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036fa:	4b85      	ldr	r3, [pc, #532]	@ (8003910 <HAL_UART_IRQHandler+0x298>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 810a 	beq.w	8003918 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_UART_IRQHandler+0xbc>
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d011      	beq.n	8003764 <HAL_UART_IRQHandler+0xec>
 8003740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2202      	movs	r2, #2
 8003752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <HAL_UART_IRQHandler+0x11c>
 8003770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2204      	movs	r2, #4
 8003782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d017      	beq.n	80037d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2208      	movs	r2, #8
 80037be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c6:	f043 0208 	orr.w	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <HAL_UART_IRQHandler+0x18a>
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8230 	beq.w	8003c6e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800381a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	d005      	beq.n	800385a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800384e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003852:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04f      	beq.n	80038fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fe15 	bl	800448a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b40      	cmp	r3, #64	@ 0x40
 800386c:	d141      	bne.n	80038f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800389a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d9      	bne.n	800386e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c6:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <HAL_UART_IRQHandler+0x29c>)
 80038c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fe37 	bl	8001542 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d017      	beq.n	800390a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00f      	b.n	800390a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9d4 	bl	8003c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e00b      	b.n	800390a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9d0 	bl	8003c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e007      	b.n	800390a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9cc 	bl	8003c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003908:	e1b1      	b.n	8003c6e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	bf00      	nop
    return;
 800390c:	e1af      	b.n	8003c6e <HAL_UART_IRQHandler+0x5f6>
 800390e:	bf00      	nop
 8003910:	04000120 	.word	0x04000120
 8003914:	08004553 	.word	0x08004553

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 816a 	bne.w	8003bf6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8163 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 815c 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2210      	movs	r2, #16
 8003944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	f040 80d4 	bne.w	8003afe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003962:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80ad 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003976:	429a      	cmp	r2, r3
 8003978:	f080 80a5 	bcs.w	8003ac6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003982:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 8086 	bne.w	8003aa4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1da      	bne.n	8003998 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3308      	adds	r3, #8
 80039e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e1      	bne.n	80039e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e3      	bne.n	8003a1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a74:	f023 0310 	bic.w	r3, r3, #16
 8003a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e4      	bne.n	8003a64 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fd11 	bl	80014c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8f4 	bl	8003cac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ac4:	e0d5      	b.n	8003c72 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003acc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f040 80ce 	bne.w	8003c72 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	f040 80c5 	bne.w	8003c72 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8d8 	bl	8003cac <HAL_UARTEx_RxEventCallback>
      return;
 8003afc:	e0b9      	b.n	8003c72 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80ab 	beq.w	8003c76 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a6 	beq.w	8003c76 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e4      	bne.n	8003b2a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b84:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e3      	bne.n	8003b60 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f023 0310 	bic.w	r3, r3, #16
 8003bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	617b      	str	r3, [r7, #20]
   return(result);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e4      	bne.n	8003bac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f85c 	bl	8003cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf4:	e03f      	b.n	8003c76 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <HAL_UART_IRQHandler+0x5a8>
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fcda 	bl	80045d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c1e:	e02d      	b.n	8003c7c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00e      	beq.n	8003c4a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01c      	beq.n	8003c7a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
    }
    return;
 8003c48:	e017      	b.n	8003c7a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_UART_IRQHandler+0x604>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fc8b 	bl	800457e <UART_EndTransmit_IT>
    return;
 8003c68:	e008      	b.n	8003c7c <HAL_UART_IRQHandler+0x604>
      return;
 8003c6a:	bf00      	nop
 8003c6c:	e006      	b.n	8003c7c <HAL_UART_IRQHandler+0x604>
    return;
 8003c6e:	bf00      	nop
 8003c70:	e004      	b.n	8003c7c <HAL_UART_IRQHandler+0x604>
      return;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <HAL_UART_IRQHandler+0x604>
      return;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_UART_IRQHandler+0x604>
    return;
 8003c7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c7c:	37e8      	adds	r7, #232	@ 0xe8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop

08003c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b08a      	sub	sp, #40	@ 0x28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4bb4      	ldr	r3, [pc, #720]	@ (8003fc4 <UART_SetConfig+0x300>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4aa9      	ldr	r2, [pc, #676]	@ (8003fc8 <UART_SetConfig+0x304>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4aa0      	ldr	r2, [pc, #640]	@ (8003fcc <UART_SetConfig+0x308>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d126      	bne.n	8003d9c <UART_SetConfig+0xd8>
 8003d4e:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd0 <UART_SetConfig+0x30c>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0xd0>
 8003d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <UART_SetConfig+0xa0>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d85 	.word	0x08003d85
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8d 	.word	0x08003d8d
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e080      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e07c      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e078      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e074      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e070      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a8c      	ldr	r2, [pc, #560]	@ (8003fd4 <UART_SetConfig+0x310>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d138      	bne.n	8003e18 <UART_SetConfig+0x154>
 8003da6:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd0 <UART_SetConfig+0x30c>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d82d      	bhi.n	8003e10 <UART_SetConfig+0x14c>
 8003db4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <UART_SetConfig+0xf8>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	08003e11 	.word	0x08003e11
 8003dc8:	08003e11 	.word	0x08003e11
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e11 	.word	0x08003e11
 8003dd4:	08003e11 	.word	0x08003e11
 8003dd8:	08003e11 	.word	0x08003e11
 8003ddc:	08003df9 	.word	0x08003df9
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	08003e11 	.word	0x08003e11
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e042      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e03e      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e06:	e03a      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e036      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e032      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8003fc8 <UART_SetConfig+0x304>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d12a      	bne.n	8003e78 <UART_SetConfig+0x1b4>
 8003e22:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd0 <UART_SetConfig+0x30c>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e30:	d01a      	beq.n	8003e68 <UART_SetConfig+0x1a4>
 8003e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e36:	d81b      	bhi.n	8003e70 <UART_SetConfig+0x1ac>
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3c:	d00c      	beq.n	8003e58 <UART_SetConfig+0x194>
 8003e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e42:	d815      	bhi.n	8003e70 <UART_SetConfig+0x1ac>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <UART_SetConfig+0x18c>
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4c:	d008      	beq.n	8003e60 <UART_SetConfig+0x19c>
 8003e4e:	e00f      	b.n	8003e70 <UART_SetConfig+0x1ac>
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e012      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e00e      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e00a      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e006      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e002      	b.n	8003e7e <UART_SetConfig+0x1ba>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a51      	ldr	r2, [pc, #324]	@ (8003fc8 <UART_SetConfig+0x304>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d17a      	bne.n	8003f7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d824      	bhi.n	8003eda <UART_SetConfig+0x216>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0x1d4>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003edb 	.word	0x08003edb
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003edb 	.word	0x08003edb
 8003ea8:	08003ecb 	.word	0x08003ecb
 8003eac:	08003edb 	.word	0x08003edb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003edb 	.word	0x08003edb
 8003eb8:	08003ed3 	.word	0x08003ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe fb2e 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61f8      	str	r0, [r7, #28]
        break;
 8003ec2:	e010      	b.n	8003ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec4:	4b44      	ldr	r3, [pc, #272]	@ (8003fd8 <UART_SetConfig+0x314>)
 8003ec6:	61fb      	str	r3, [r7, #28]
        break;
 8003ec8:	e00d      	b.n	8003ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eca:	f7fe fa8f 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8003ece:	61f8      	str	r0, [r7, #28]
        break;
 8003ed0:	e009      	b.n	8003ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ed6:	61fb      	str	r3, [r7, #28]
        break;
 8003ed8:	e005      	b.n	8003ee6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8107 	beq.w	80040fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d305      	bcc.n	8003f0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d903      	bls.n	8003f12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f10:	e0f4      	b.n	80040fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2200      	movs	r2, #0
 8003f16:	461c      	mov	r4, r3
 8003f18:	4615      	mov	r5, r2
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	022b      	lsls	r3, r5, #8
 8003f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f28:	0222      	lsls	r2, r4, #8
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	6849      	ldr	r1, [r1, #4]
 8003f2e:	0849      	lsrs	r1, r1, #1
 8003f30:	2000      	movs	r0, #0
 8003f32:	4688      	mov	r8, r1
 8003f34:	4681      	mov	r9, r0
 8003f36:	eb12 0a08 	adds.w	sl, r2, r8
 8003f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f4c:	4650      	mov	r0, sl
 8003f4e:	4659      	mov	r1, fp
 8003f50:	f7fc f98e 	bl	8000270 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f62:	d308      	bcc.n	8003f76 <UART_SetConfig+0x2b2>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f6a:	d204      	bcs.n	8003f76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	e0c2      	b.n	80040fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f7c:	e0be      	b.n	80040fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f86:	d16a      	bne.n	800405e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d834      	bhi.n	8003ffa <UART_SetConfig+0x336>
 8003f90:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <UART_SetConfig+0x2d4>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fdd 	.word	0x08003fdd
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003ffb 	.word	0x08003ffb
 8003fa8:	08003feb 	.word	0x08003feb
 8003fac:	08003ffb 	.word	0x08003ffb
 8003fb0:	08003ffb 	.word	0x08003ffb
 8003fb4:	08003ffb 	.word	0x08003ffb
 8003fb8:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe faae 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003fc0:	61f8      	str	r0, [r7, #28]
        break;
 8003fc2:	e020      	b.n	8004006 <UART_SetConfig+0x342>
 8003fc4:	efff69f3 	.word	0xefff69f3
 8003fc8:	40008000 	.word	0x40008000
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe fab4 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
        break;
 8003fe2:	e010      	b.n	8004006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8004118 <UART_SetConfig+0x454>)
 8003fe6:	61fb      	str	r3, [r7, #28]
        break;
 8003fe8:	e00d      	b.n	8004006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe f9ff 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8003fee:	61f8      	str	r0, [r7, #28]
        break;
 8003ff0:	e009      	b.n	8004006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff6:	61fb      	str	r3, [r7, #28]
        break;
 8003ff8:	e005      	b.n	8004006 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d077      	beq.n	80040fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005a      	lsls	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	441a      	add	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b0f      	cmp	r3, #15
 8004026:	d916      	bls.n	8004056 <UART_SetConfig+0x392>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402e:	d212      	bcs.n	8004056 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	b29b      	uxth	r3, r3
 8004034:	f023 030f 	bic.w	r3, r3, #15
 8004038:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	b29b      	uxth	r3, r3
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	b29a      	uxth	r2, r3
 8004046:	8afb      	ldrh	r3, [r7, #22]
 8004048:	4313      	orrs	r3, r2
 800404a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	8afa      	ldrh	r2, [r7, #22]
 8004052:	60da      	str	r2, [r3, #12]
 8004054:	e052      	b.n	80040fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800405c:	e04e      	b.n	80040fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004062:	2b08      	cmp	r3, #8
 8004064:	d827      	bhi.n	80040b6 <UART_SetConfig+0x3f2>
 8004066:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <UART_SetConfig+0x3a8>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fa44 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8004094:	61f8      	str	r0, [r7, #28]
        break;
 8004096:	e014      	b.n	80040c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe fa56 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 800409c:	61f8      	str	r0, [r7, #28]
        break;
 800409e:	e010      	b.n	80040c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <UART_SetConfig+0x454>)
 80040a2:	61fb      	str	r3, [r7, #28]
        break;
 80040a4:	e00d      	b.n	80040c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7fe f9a1 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80040aa:	61f8      	str	r0, [r7, #28]
        break;
 80040ac:	e009      	b.n	80040c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
        break;
 80040b4:	e005      	b.n	80040c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040c0:	bf00      	nop
    }

    if (pclk != 0U)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d019      	beq.n	80040fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	085a      	lsrs	r2, r3, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b0f      	cmp	r3, #15
 80040e0:	d909      	bls.n	80040f6 <UART_SetConfig+0x432>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e8:	d205      	bcs.n	80040f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e002      	b.n	80040fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004108:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	@ 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	00f42400 	.word	0x00f42400

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800421a:	d10a      	bne.n	8004232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b098      	sub	sp, #96	@ 0x60
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004270:	f7fc ffe8 	bl	8001244 <HAL_GetTick>
 8004274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d12e      	bne.n	80042e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f88c 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d021      	beq.n	80042e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e062      	b.n	80043a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d149      	bne.n	8004384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f856 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03c      	beq.n	8004384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	623b      	str	r3, [r7, #32]
   return(result);
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
 800432a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800432e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60fb      	str	r3, [r7, #12]
   return(result);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	617b      	str	r3, [r7, #20]
   return(result);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e011      	b.n	80043a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3758      	adds	r7, #88	@ 0x58
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c0:	e04f      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d04b      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fc ff3b 	bl	8001244 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e04e      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d037      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b80      	cmp	r3, #128	@ 0x80
 80043f6:	d034      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b40      	cmp	r3, #64	@ 0x40
 80043fc:	d031      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b08      	cmp	r3, #8
 800440a:	d110      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f838 	bl	800448a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2208      	movs	r2, #8
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e029      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443c:	d111      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f81e 	bl	800448a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e00f      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	429a      	cmp	r2, r3
 800447e:	d0a0      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800448a:	b480      	push	{r7}
 800448c:	b095      	sub	sp, #84	@ 0x54
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d118      	bne.n	8004532 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	60bb      	str	r3, [r7, #8]
   return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004546:	bf00      	nop
 8004548:	3754      	adds	r7, #84	@ 0x54
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fb91 	bl	8003c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b088      	sub	sp, #32
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60bb      	str	r3, [r7, #8]
   return(result);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	613b      	str	r3, [r7, #16]
   return(result);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fb5d 	bl	8003c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ca:	bf00      	nop
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <std>:
 80045e8:	2300      	movs	r3, #0
 80045ea:	b510      	push	{r4, lr}
 80045ec:	4604      	mov	r4, r0
 80045ee:	e9c0 3300 	strd	r3, r3, [r0]
 80045f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045f6:	6083      	str	r3, [r0, #8]
 80045f8:	8181      	strh	r1, [r0, #12]
 80045fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80045fc:	81c2      	strh	r2, [r0, #14]
 80045fe:	6183      	str	r3, [r0, #24]
 8004600:	4619      	mov	r1, r3
 8004602:	2208      	movs	r2, #8
 8004604:	305c      	adds	r0, #92	@ 0x5c
 8004606:	f000 f906 	bl	8004816 <memset>
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <std+0x58>)
 800460c:	6263      	str	r3, [r4, #36]	@ 0x24
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <std+0x5c>)
 8004610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <std+0x60>)
 8004614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <std+0x64>)
 8004618:	6323      	str	r3, [r4, #48]	@ 0x30
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <std+0x68>)
 800461c:	6224      	str	r4, [r4, #32]
 800461e:	429c      	cmp	r4, r3
 8004620:	d006      	beq.n	8004630 <std+0x48>
 8004622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004626:	4294      	cmp	r4, r2
 8004628:	d002      	beq.n	8004630 <std+0x48>
 800462a:	33d0      	adds	r3, #208	@ 0xd0
 800462c:	429c      	cmp	r4, r3
 800462e:	d105      	bne.n	800463c <std+0x54>
 8004630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f000 b966 	b.w	8004908 <__retarget_lock_init_recursive>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	08004791 	.word	0x08004791
 8004644:	080047b3 	.word	0x080047b3
 8004648:	080047eb 	.word	0x080047eb
 800464c:	0800480f 	.word	0x0800480f
 8004650:	20000214 	.word	0x20000214

08004654 <stdio_exit_handler>:
 8004654:	4a02      	ldr	r2, [pc, #8]	@ (8004660 <stdio_exit_handler+0xc>)
 8004656:	4903      	ldr	r1, [pc, #12]	@ (8004664 <stdio_exit_handler+0x10>)
 8004658:	4803      	ldr	r0, [pc, #12]	@ (8004668 <stdio_exit_handler+0x14>)
 800465a:	f000 b869 	b.w	8004730 <_fwalk_sglue>
 800465e:	bf00      	nop
 8004660:	2000000c 	.word	0x2000000c
 8004664:	080051a9 	.word	0x080051a9
 8004668:	2000001c 	.word	0x2000001c

0800466c <cleanup_stdio>:
 800466c:	6841      	ldr	r1, [r0, #4]
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <cleanup_stdio+0x34>)
 8004670:	4299      	cmp	r1, r3
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	d001      	beq.n	800467c <cleanup_stdio+0x10>
 8004678:	f000 fd96 	bl	80051a8 <_fflush_r>
 800467c:	68a1      	ldr	r1, [r4, #8]
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <cleanup_stdio+0x38>)
 8004680:	4299      	cmp	r1, r3
 8004682:	d002      	beq.n	800468a <cleanup_stdio+0x1e>
 8004684:	4620      	mov	r0, r4
 8004686:	f000 fd8f 	bl	80051a8 <_fflush_r>
 800468a:	68e1      	ldr	r1, [r4, #12]
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <cleanup_stdio+0x3c>)
 800468e:	4299      	cmp	r1, r3
 8004690:	d004      	beq.n	800469c <cleanup_stdio+0x30>
 8004692:	4620      	mov	r0, r4
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f000 bd86 	b.w	80051a8 <_fflush_r>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	20000214 	.word	0x20000214
 80046a4:	2000027c 	.word	0x2000027c
 80046a8:	200002e4 	.word	0x200002e4

080046ac <global_stdio_init.part.0>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <global_stdio_init.part.0+0x30>)
 80046b0:	4c0b      	ldr	r4, [pc, #44]	@ (80046e0 <global_stdio_init.part.0+0x34>)
 80046b2:	4a0c      	ldr	r2, [pc, #48]	@ (80046e4 <global_stdio_init.part.0+0x38>)
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	4620      	mov	r0, r4
 80046b8:	2200      	movs	r2, #0
 80046ba:	2104      	movs	r1, #4
 80046bc:	f7ff ff94 	bl	80045e8 <std>
 80046c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046c4:	2201      	movs	r2, #1
 80046c6:	2109      	movs	r1, #9
 80046c8:	f7ff ff8e 	bl	80045e8 <std>
 80046cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046d0:	2202      	movs	r2, #2
 80046d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d6:	2112      	movs	r1, #18
 80046d8:	f7ff bf86 	b.w	80045e8 <std>
 80046dc:	2000034c 	.word	0x2000034c
 80046e0:	20000214 	.word	0x20000214
 80046e4:	08004655 	.word	0x08004655

080046e8 <__sfp_lock_acquire>:
 80046e8:	4801      	ldr	r0, [pc, #4]	@ (80046f0 <__sfp_lock_acquire+0x8>)
 80046ea:	f000 b90e 	b.w	800490a <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	20000355 	.word	0x20000355

080046f4 <__sfp_lock_release>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__sfp_lock_release+0x8>)
 80046f6:	f000 b909 	b.w	800490c <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	20000355 	.word	0x20000355

08004700 <__sinit>:
 8004700:	b510      	push	{r4, lr}
 8004702:	4604      	mov	r4, r0
 8004704:	f7ff fff0 	bl	80046e8 <__sfp_lock_acquire>
 8004708:	6a23      	ldr	r3, [r4, #32]
 800470a:	b11b      	cbz	r3, 8004714 <__sinit+0x14>
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f7ff bff0 	b.w	80046f4 <__sfp_lock_release>
 8004714:	4b04      	ldr	r3, [pc, #16]	@ (8004728 <__sinit+0x28>)
 8004716:	6223      	str	r3, [r4, #32]
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <__sinit+0x2c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f5      	bne.n	800470c <__sinit+0xc>
 8004720:	f7ff ffc4 	bl	80046ac <global_stdio_init.part.0>
 8004724:	e7f2      	b.n	800470c <__sinit+0xc>
 8004726:	bf00      	nop
 8004728:	0800466d 	.word	0x0800466d
 800472c:	2000034c 	.word	0x2000034c

08004730 <_fwalk_sglue>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	4607      	mov	r7, r0
 8004736:	4688      	mov	r8, r1
 8004738:	4614      	mov	r4, r2
 800473a:	2600      	movs	r6, #0
 800473c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004740:	f1b9 0901 	subs.w	r9, r9, #1
 8004744:	d505      	bpl.n	8004752 <_fwalk_sglue+0x22>
 8004746:	6824      	ldr	r4, [r4, #0]
 8004748:	2c00      	cmp	r4, #0
 800474a:	d1f7      	bne.n	800473c <_fwalk_sglue+0xc>
 800474c:	4630      	mov	r0, r6
 800474e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d907      	bls.n	8004768 <_fwalk_sglue+0x38>
 8004758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800475c:	3301      	adds	r3, #1
 800475e:	d003      	beq.n	8004768 <_fwalk_sglue+0x38>
 8004760:	4629      	mov	r1, r5
 8004762:	4638      	mov	r0, r7
 8004764:	47c0      	blx	r8
 8004766:	4306      	orrs	r6, r0
 8004768:	3568      	adds	r5, #104	@ 0x68
 800476a:	e7e9      	b.n	8004740 <_fwalk_sglue+0x10>

0800476c <iprintf>:
 800476c:	b40f      	push	{r0, r1, r2, r3}
 800476e:	b507      	push	{r0, r1, r2, lr}
 8004770:	4906      	ldr	r1, [pc, #24]	@ (800478c <iprintf+0x20>)
 8004772:	ab04      	add	r3, sp, #16
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	f853 2b04 	ldr.w	r2, [r3], #4
 800477a:	6881      	ldr	r1, [r0, #8]
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f000 f9e9 	bl	8004b54 <_vfiprintf_r>
 8004782:	b003      	add	sp, #12
 8004784:	f85d eb04 	ldr.w	lr, [sp], #4
 8004788:	b004      	add	sp, #16
 800478a:	4770      	bx	lr
 800478c:	20000018 	.word	0x20000018

08004790 <__sread>:
 8004790:	b510      	push	{r4, lr}
 8004792:	460c      	mov	r4, r1
 8004794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004798:	f000 f868 	bl	800486c <_read_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	bfab      	itete	ge
 80047a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047a2:	89a3      	ldrhlt	r3, [r4, #12]
 80047a4:	181b      	addge	r3, r3, r0
 80047a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047aa:	bfac      	ite	ge
 80047ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047ae:	81a3      	strhlt	r3, [r4, #12]
 80047b0:	bd10      	pop	{r4, pc}

080047b2 <__swrite>:
 80047b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	461f      	mov	r7, r3
 80047b8:	898b      	ldrh	r3, [r1, #12]
 80047ba:	05db      	lsls	r3, r3, #23
 80047bc:	4605      	mov	r5, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	4616      	mov	r6, r2
 80047c2:	d505      	bpl.n	80047d0 <__swrite+0x1e>
 80047c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c8:	2302      	movs	r3, #2
 80047ca:	2200      	movs	r2, #0
 80047cc:	f000 f83c 	bl	8004848 <_lseek_r>
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	4632      	mov	r2, r6
 80047de:	463b      	mov	r3, r7
 80047e0:	4628      	mov	r0, r5
 80047e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047e6:	f000 b853 	b.w	8004890 <_write_r>

080047ea <__sseek>:
 80047ea:	b510      	push	{r4, lr}
 80047ec:	460c      	mov	r4, r1
 80047ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f2:	f000 f829 	bl	8004848 <_lseek_r>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	bf15      	itete	ne
 80047fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004806:	81a3      	strheq	r3, [r4, #12]
 8004808:	bf18      	it	ne
 800480a:	81a3      	strhne	r3, [r4, #12]
 800480c:	bd10      	pop	{r4, pc}

0800480e <__sclose>:
 800480e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004812:	f000 b809 	b.w	8004828 <_close_r>

08004816 <memset>:
 8004816:	4402      	add	r2, r0
 8004818:	4603      	mov	r3, r0
 800481a:	4293      	cmp	r3, r2
 800481c:	d100      	bne.n	8004820 <memset+0xa>
 800481e:	4770      	bx	lr
 8004820:	f803 1b01 	strb.w	r1, [r3], #1
 8004824:	e7f9      	b.n	800481a <memset+0x4>
	...

08004828 <_close_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4d06      	ldr	r5, [pc, #24]	@ (8004844 <_close_r+0x1c>)
 800482c:	2300      	movs	r3, #0
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	602b      	str	r3, [r5, #0]
 8004834:	f7fc fa3f 	bl	8000cb6 <_close>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_close_r+0x1a>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_close_r+0x1a>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000350 	.word	0x20000350

08004848 <_lseek_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d07      	ldr	r5, [pc, #28]	@ (8004868 <_lseek_r+0x20>)
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	2200      	movs	r2, #0
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fa54 	bl	8000d04 <_lseek>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_lseek_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_lseek_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000350 	.word	0x20000350

0800486c <_read_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d07      	ldr	r5, [pc, #28]	@ (800488c <_read_r+0x20>)
 8004870:	4604      	mov	r4, r0
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	2200      	movs	r2, #0
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	f7fc f9e2 	bl	8000c44 <_read>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d102      	bne.n	800488a <_read_r+0x1e>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	b103      	cbz	r3, 800488a <_read_r+0x1e>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	20000350 	.word	0x20000350

08004890 <_write_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d07      	ldr	r5, [pc, #28]	@ (80048b0 <_write_r+0x20>)
 8004894:	4604      	mov	r4, r0
 8004896:	4608      	mov	r0, r1
 8004898:	4611      	mov	r1, r2
 800489a:	2200      	movs	r2, #0
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7fc f9ed 	bl	8000c7e <_write>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_write_r+0x1e>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_write_r+0x1e>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000350 	.word	0x20000350

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	@ (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000018 	.word	0x20000018

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4d0d      	ldr	r5, [pc, #52]	@ (80048f8 <__libc_init_array+0x38>)
 80048c4:	4c0d      	ldr	r4, [pc, #52]	@ (80048fc <__libc_init_array+0x3c>)
 80048c6:	1b64      	subs	r4, r4, r5
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	2600      	movs	r6, #0
 80048cc:	42a6      	cmp	r6, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004900 <__libc_init_array+0x40>)
 80048d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004904 <__libc_init_array+0x44>)
 80048d4:	f000 fdb8 	bl	8005448 <_init>
 80048d8:	1b64      	subs	r4, r4, r5
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	2600      	movs	r6, #0
 80048de:	42a6      	cmp	r6, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e8:	4798      	blx	r3
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f2:	4798      	blx	r3
 80048f4:	3601      	adds	r6, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	080054f8 	.word	0x080054f8
 80048fc:	080054f8 	.word	0x080054f8
 8004900:	080054f8 	.word	0x080054f8
 8004904:	080054fc 	.word	0x080054fc

08004908 <__retarget_lock_init_recursive>:
 8004908:	4770      	bx	lr

0800490a <__retarget_lock_acquire_recursive>:
 800490a:	4770      	bx	lr

0800490c <__retarget_lock_release_recursive>:
 800490c:	4770      	bx	lr
	...

08004910 <_free_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4605      	mov	r5, r0
 8004914:	2900      	cmp	r1, #0
 8004916:	d041      	beq.n	800499c <_free_r+0x8c>
 8004918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491c:	1f0c      	subs	r4, r1, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb8      	it	lt
 8004922:	18e4      	addlt	r4, r4, r3
 8004924:	f000 f8e0 	bl	8004ae8 <__malloc_lock>
 8004928:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <_free_r+0x90>)
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	b933      	cbnz	r3, 800493c <_free_r+0x2c>
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	6014      	str	r4, [r2, #0]
 8004932:	4628      	mov	r0, r5
 8004934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004938:	f000 b8dc 	b.w	8004af4 <__malloc_unlock>
 800493c:	42a3      	cmp	r3, r4
 800493e:	d908      	bls.n	8004952 <_free_r+0x42>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	1821      	adds	r1, r4, r0
 8004944:	428b      	cmp	r3, r1
 8004946:	bf01      	itttt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	e7ed      	b.n	800492e <_free_r+0x1e>
 8004952:	461a      	mov	r2, r3
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b10b      	cbz	r3, 800495c <_free_r+0x4c>
 8004958:	42a3      	cmp	r3, r4
 800495a:	d9fa      	bls.n	8004952 <_free_r+0x42>
 800495c:	6811      	ldr	r1, [r2, #0]
 800495e:	1850      	adds	r0, r2, r1
 8004960:	42a0      	cmp	r0, r4
 8004962:	d10b      	bne.n	800497c <_free_r+0x6c>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	4401      	add	r1, r0
 8004968:	1850      	adds	r0, r2, r1
 800496a:	4283      	cmp	r3, r0
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	d1e0      	bne.n	8004932 <_free_r+0x22>
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	6053      	str	r3, [r2, #4]
 8004976:	4408      	add	r0, r1
 8004978:	6010      	str	r0, [r2, #0]
 800497a:	e7da      	b.n	8004932 <_free_r+0x22>
 800497c:	d902      	bls.n	8004984 <_free_r+0x74>
 800497e:	230c      	movs	r3, #12
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	e7d6      	b.n	8004932 <_free_r+0x22>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	1821      	adds	r1, r4, r0
 8004988:	428b      	cmp	r3, r1
 800498a:	bf04      	itt	eq
 800498c:	6819      	ldreq	r1, [r3, #0]
 800498e:	685b      	ldreq	r3, [r3, #4]
 8004990:	6063      	str	r3, [r4, #4]
 8004992:	bf04      	itt	eq
 8004994:	1809      	addeq	r1, r1, r0
 8004996:	6021      	streq	r1, [r4, #0]
 8004998:	6054      	str	r4, [r2, #4]
 800499a:	e7ca      	b.n	8004932 <_free_r+0x22>
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	bf00      	nop
 80049a0:	2000035c 	.word	0x2000035c

080049a4 <sbrk_aligned>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4e0f      	ldr	r6, [pc, #60]	@ (80049e4 <sbrk_aligned+0x40>)
 80049a8:	460c      	mov	r4, r1
 80049aa:	6831      	ldr	r1, [r6, #0]
 80049ac:	4605      	mov	r5, r0
 80049ae:	b911      	cbnz	r1, 80049b6 <sbrk_aligned+0x12>
 80049b0:	f000 fcb6 	bl	8005320 <_sbrk_r>
 80049b4:	6030      	str	r0, [r6, #0]
 80049b6:	4621      	mov	r1, r4
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 fcb1 	bl	8005320 <_sbrk_r>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d103      	bne.n	80049ca <sbrk_aligned+0x26>
 80049c2:	f04f 34ff 	mov.w	r4, #4294967295
 80049c6:	4620      	mov	r0, r4
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	f024 0403 	bic.w	r4, r4, #3
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d0f8      	beq.n	80049c6 <sbrk_aligned+0x22>
 80049d4:	1a21      	subs	r1, r4, r0
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fca2 	bl	8005320 <_sbrk_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d1f2      	bne.n	80049c6 <sbrk_aligned+0x22>
 80049e0:	e7ef      	b.n	80049c2 <sbrk_aligned+0x1e>
 80049e2:	bf00      	nop
 80049e4:	20000358 	.word	0x20000358

080049e8 <_malloc_r>:
 80049e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ec:	1ccd      	adds	r5, r1, #3
 80049ee:	f025 0503 	bic.w	r5, r5, #3
 80049f2:	3508      	adds	r5, #8
 80049f4:	2d0c      	cmp	r5, #12
 80049f6:	bf38      	it	cc
 80049f8:	250c      	movcc	r5, #12
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	4606      	mov	r6, r0
 80049fe:	db01      	blt.n	8004a04 <_malloc_r+0x1c>
 8004a00:	42a9      	cmp	r1, r5
 8004a02:	d904      	bls.n	8004a0e <_malloc_r+0x26>
 8004a04:	230c      	movs	r3, #12
 8004a06:	6033      	str	r3, [r6, #0]
 8004a08:	2000      	movs	r0, #0
 8004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ae4 <_malloc_r+0xfc>
 8004a12:	f000 f869 	bl	8004ae8 <__malloc_lock>
 8004a16:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1a:	461c      	mov	r4, r3
 8004a1c:	bb44      	cbnz	r4, 8004a70 <_malloc_r+0x88>
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4630      	mov	r0, r6
 8004a22:	f7ff ffbf 	bl	80049a4 <sbrk_aligned>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	4604      	mov	r4, r0
 8004a2a:	d158      	bne.n	8004ade <_malloc_r+0xf6>
 8004a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a30:	4627      	mov	r7, r4
 8004a32:	2f00      	cmp	r7, #0
 8004a34:	d143      	bne.n	8004abe <_malloc_r+0xd6>
 8004a36:	2c00      	cmp	r4, #0
 8004a38:	d04b      	beq.n	8004ad2 <_malloc_r+0xea>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	4630      	mov	r0, r6
 8004a40:	eb04 0903 	add.w	r9, r4, r3
 8004a44:	f000 fc6c 	bl	8005320 <_sbrk_r>
 8004a48:	4581      	cmp	r9, r0
 8004a4a:	d142      	bne.n	8004ad2 <_malloc_r+0xea>
 8004a4c:	6821      	ldr	r1, [r4, #0]
 8004a4e:	1a6d      	subs	r5, r5, r1
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff ffa6 	bl	80049a4 <sbrk_aligned>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d03a      	beq.n	8004ad2 <_malloc_r+0xea>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	442b      	add	r3, r5
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	f8d8 3000 	ldr.w	r3, [r8]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	bb62      	cbnz	r2, 8004ac4 <_malloc_r+0xdc>
 8004a6a:	f8c8 7000 	str.w	r7, [r8]
 8004a6e:	e00f      	b.n	8004a90 <_malloc_r+0xa8>
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	1b52      	subs	r2, r2, r5
 8004a74:	d420      	bmi.n	8004ab8 <_malloc_r+0xd0>
 8004a76:	2a0b      	cmp	r2, #11
 8004a78:	d917      	bls.n	8004aaa <_malloc_r+0xc2>
 8004a7a:	1961      	adds	r1, r4, r5
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	6025      	str	r5, [r4, #0]
 8004a80:	bf18      	it	ne
 8004a82:	6059      	strne	r1, [r3, #4]
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	bf08      	it	eq
 8004a88:	f8c8 1000 	streq.w	r1, [r8]
 8004a8c:	5162      	str	r2, [r4, r5]
 8004a8e:	604b      	str	r3, [r1, #4]
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 f82f 	bl	8004af4 <__malloc_unlock>
 8004a96:	f104 000b 	add.w	r0, r4, #11
 8004a9a:	1d23      	adds	r3, r4, #4
 8004a9c:	f020 0007 	bic.w	r0, r0, #7
 8004aa0:	1ac2      	subs	r2, r0, r3
 8004aa2:	bf1c      	itt	ne
 8004aa4:	1a1b      	subne	r3, r3, r0
 8004aa6:	50a3      	strne	r3, [r4, r2]
 8004aa8:	e7af      	b.n	8004a0a <_malloc_r+0x22>
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	bf0c      	ite	eq
 8004ab0:	f8c8 2000 	streq.w	r2, [r8]
 8004ab4:	605a      	strne	r2, [r3, #4]
 8004ab6:	e7eb      	b.n	8004a90 <_malloc_r+0xa8>
 8004ab8:	4623      	mov	r3, r4
 8004aba:	6864      	ldr	r4, [r4, #4]
 8004abc:	e7ae      	b.n	8004a1c <_malloc_r+0x34>
 8004abe:	463c      	mov	r4, r7
 8004ac0:	687f      	ldr	r7, [r7, #4]
 8004ac2:	e7b6      	b.n	8004a32 <_malloc_r+0x4a>
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	d1fb      	bne.n	8004ac4 <_malloc_r+0xdc>
 8004acc:	2300      	movs	r3, #0
 8004ace:	6053      	str	r3, [r2, #4]
 8004ad0:	e7de      	b.n	8004a90 <_malloc_r+0xa8>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f000 f80c 	bl	8004af4 <__malloc_unlock>
 8004adc:	e794      	b.n	8004a08 <_malloc_r+0x20>
 8004ade:	6005      	str	r5, [r0, #0]
 8004ae0:	e7d6      	b.n	8004a90 <_malloc_r+0xa8>
 8004ae2:	bf00      	nop
 8004ae4:	2000035c 	.word	0x2000035c

08004ae8 <__malloc_lock>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	@ (8004af0 <__malloc_lock+0x8>)
 8004aea:	f7ff bf0e 	b.w	800490a <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20000354 	.word	0x20000354

08004af4 <__malloc_unlock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	@ (8004afc <__malloc_unlock+0x8>)
 8004af6:	f7ff bf09 	b.w	800490c <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000354 	.word	0x20000354

08004b00 <__sfputc_r>:
 8004b00:	6893      	ldr	r3, [r2, #8]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	b410      	push	{r4}
 8004b08:	6093      	str	r3, [r2, #8]
 8004b0a:	da08      	bge.n	8004b1e <__sfputc_r+0x1e>
 8004b0c:	6994      	ldr	r4, [r2, #24]
 8004b0e:	42a3      	cmp	r3, r4
 8004b10:	db01      	blt.n	8004b16 <__sfputc_r+0x16>
 8004b12:	290a      	cmp	r1, #10
 8004b14:	d103      	bne.n	8004b1e <__sfputc_r+0x1e>
 8004b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b1a:	f000 bb6d 	b.w	80051f8 <__swbuf_r>
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	1c58      	adds	r0, r3, #1
 8004b22:	6010      	str	r0, [r2, #0]
 8004b24:	7019      	strb	r1, [r3, #0]
 8004b26:	4608      	mov	r0, r1
 8004b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <__sfputs_r>:
 8004b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b30:	4606      	mov	r6, r0
 8004b32:	460f      	mov	r7, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	18d5      	adds	r5, r2, r3
 8004b38:	42ac      	cmp	r4, r5
 8004b3a:	d101      	bne.n	8004b40 <__sfputs_r+0x12>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e007      	b.n	8004b50 <__sfputs_r+0x22>
 8004b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b44:	463a      	mov	r2, r7
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7ff ffda 	bl	8004b00 <__sfputc_r>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d1f3      	bne.n	8004b38 <__sfputs_r+0xa>
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b54 <_vfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	460d      	mov	r5, r1
 8004b5a:	b09d      	sub	sp, #116	@ 0x74
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	4698      	mov	r8, r3
 8004b60:	4606      	mov	r6, r0
 8004b62:	b118      	cbz	r0, 8004b6c <_vfiprintf_r+0x18>
 8004b64:	6a03      	ldr	r3, [r0, #32]
 8004b66:	b90b      	cbnz	r3, 8004b6c <_vfiprintf_r+0x18>
 8004b68:	f7ff fdca 	bl	8004700 <__sinit>
 8004b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b6e:	07d9      	lsls	r1, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <_vfiprintf_r+0x2a>
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	059a      	lsls	r2, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_vfiprintf_r+0x2a>
 8004b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b7a:	f7ff fec6 	bl	800490a <__retarget_lock_acquire_recursive>
 8004b7e:	89ab      	ldrh	r3, [r5, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	d501      	bpl.n	8004b88 <_vfiprintf_r+0x34>
 8004b84:	692b      	ldr	r3, [r5, #16]
 8004b86:	b99b      	cbnz	r3, 8004bb0 <_vfiprintf_r+0x5c>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f000 fb72 	bl	8005274 <__swsetup_r>
 8004b90:	b170      	cbz	r0, 8004bb0 <_vfiprintf_r+0x5c>
 8004b92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b94:	07dc      	lsls	r4, r3, #31
 8004b96:	d504      	bpl.n	8004ba2 <_vfiprintf_r+0x4e>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	b01d      	add	sp, #116	@ 0x74
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	89ab      	ldrh	r3, [r5, #12]
 8004ba4:	0598      	lsls	r0, r3, #22
 8004ba6:	d4f7      	bmi.n	8004b98 <_vfiprintf_r+0x44>
 8004ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004baa:	f7ff feaf 	bl	800490c <__retarget_lock_release_recursive>
 8004bae:	e7f3      	b.n	8004b98 <_vfiprintf_r+0x44>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bbe:	2330      	movs	r3, #48	@ 0x30
 8004bc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d70 <_vfiprintf_r+0x21c>
 8004bc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bc8:	f04f 0901 	mov.w	r9, #1
 8004bcc:	4623      	mov	r3, r4
 8004bce:	469a      	mov	sl, r3
 8004bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd4:	b10a      	cbz	r2, 8004bda <_vfiprintf_r+0x86>
 8004bd6:	2a25      	cmp	r2, #37	@ 0x25
 8004bd8:	d1f9      	bne.n	8004bce <_vfiprintf_r+0x7a>
 8004bda:	ebba 0b04 	subs.w	fp, sl, r4
 8004bde:	d00b      	beq.n	8004bf8 <_vfiprintf_r+0xa4>
 8004be0:	465b      	mov	r3, fp
 8004be2:	4622      	mov	r2, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff ffa1 	bl	8004b2e <__sfputs_r>
 8004bec:	3001      	adds	r0, #1
 8004bee:	f000 80a7 	beq.w	8004d40 <_vfiprintf_r+0x1ec>
 8004bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bf4:	445a      	add	r2, fp
 8004bf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 809f 	beq.w	8004d40 <_vfiprintf_r+0x1ec>
 8004c02:	2300      	movs	r3, #0
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c0c:	f10a 0a01 	add.w	sl, sl, #1
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	9307      	str	r3, [sp, #28]
 8004c14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c18:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c1a:	4654      	mov	r4, sl
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c22:	4853      	ldr	r0, [pc, #332]	@ (8004d70 <_vfiprintf_r+0x21c>)
 8004c24:	f7fb fad4 	bl	80001d0 <memchr>
 8004c28:	9a04      	ldr	r2, [sp, #16]
 8004c2a:	b9d8      	cbnz	r0, 8004c64 <_vfiprintf_r+0x110>
 8004c2c:	06d1      	lsls	r1, r2, #27
 8004c2e:	bf44      	itt	mi
 8004c30:	2320      	movmi	r3, #32
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c36:	0713      	lsls	r3, r2, #28
 8004c38:	bf44      	itt	mi
 8004c3a:	232b      	movmi	r3, #43	@ 0x2b
 8004c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c40:	f89a 3000 	ldrb.w	r3, [sl]
 8004c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c46:	d015      	beq.n	8004c74 <_vfiprintf_r+0x120>
 8004c48:	9a07      	ldr	r2, [sp, #28]
 8004c4a:	4654      	mov	r4, sl
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f04f 0c0a 	mov.w	ip, #10
 8004c52:	4621      	mov	r1, r4
 8004c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c58:	3b30      	subs	r3, #48	@ 0x30
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	d94b      	bls.n	8004cf6 <_vfiprintf_r+0x1a2>
 8004c5e:	b1b0      	cbz	r0, 8004c8e <_vfiprintf_r+0x13a>
 8004c60:	9207      	str	r2, [sp, #28]
 8004c62:	e014      	b.n	8004c8e <_vfiprintf_r+0x13a>
 8004c64:	eba0 0308 	sub.w	r3, r0, r8
 8004c68:	fa09 f303 	lsl.w	r3, r9, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	46a2      	mov	sl, r4
 8004c72:	e7d2      	b.n	8004c1a <_vfiprintf_r+0xc6>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	1d19      	adds	r1, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9103      	str	r1, [sp, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bfbb      	ittet	lt
 8004c80:	425b      	neglt	r3, r3
 8004c82:	f042 0202 	orrlt.w	r2, r2, #2
 8004c86:	9307      	strge	r3, [sp, #28]
 8004c88:	9307      	strlt	r3, [sp, #28]
 8004c8a:	bfb8      	it	lt
 8004c8c:	9204      	strlt	r2, [sp, #16]
 8004c8e:	7823      	ldrb	r3, [r4, #0]
 8004c90:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c92:	d10a      	bne.n	8004caa <_vfiprintf_r+0x156>
 8004c94:	7863      	ldrb	r3, [r4, #1]
 8004c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c98:	d132      	bne.n	8004d00 <_vfiprintf_r+0x1ac>
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	9203      	str	r2, [sp, #12]
 8004ca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ca6:	3402      	adds	r4, #2
 8004ca8:	9305      	str	r3, [sp, #20]
 8004caa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d80 <_vfiprintf_r+0x22c>
 8004cae:	7821      	ldrb	r1, [r4, #0]
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	f7fb fa8c 	bl	80001d0 <memchr>
 8004cb8:	b138      	cbz	r0, 8004cca <_vfiprintf_r+0x176>
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	eba0 000a 	sub.w	r0, r0, sl
 8004cc0:	2240      	movs	r2, #64	@ 0x40
 8004cc2:	4082      	lsls	r2, r0
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	3401      	adds	r4, #1
 8004cc8:	9304      	str	r3, [sp, #16]
 8004cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cce:	4829      	ldr	r0, [pc, #164]	@ (8004d74 <_vfiprintf_r+0x220>)
 8004cd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cd4:	2206      	movs	r2, #6
 8004cd6:	f7fb fa7b 	bl	80001d0 <memchr>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d03f      	beq.n	8004d5e <_vfiprintf_r+0x20a>
 8004cde:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <_vfiprintf_r+0x224>)
 8004ce0:	bb1b      	cbnz	r3, 8004d2a <_vfiprintf_r+0x1d6>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	f023 0307 	bic.w	r3, r3, #7
 8004cea:	3308      	adds	r3, #8
 8004cec:	9303      	str	r3, [sp, #12]
 8004cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf0:	443b      	add	r3, r7
 8004cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf4:	e76a      	b.n	8004bcc <_vfiprintf_r+0x78>
 8004cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	e7a8      	b.n	8004c52 <_vfiprintf_r+0xfe>
 8004d00:	2300      	movs	r3, #0
 8004d02:	3401      	adds	r4, #1
 8004d04:	9305      	str	r3, [sp, #20]
 8004d06:	4619      	mov	r1, r3
 8004d08:	f04f 0c0a 	mov.w	ip, #10
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d12:	3a30      	subs	r2, #48	@ 0x30
 8004d14:	2a09      	cmp	r2, #9
 8004d16:	d903      	bls.n	8004d20 <_vfiprintf_r+0x1cc>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0c6      	beq.n	8004caa <_vfiprintf_r+0x156>
 8004d1c:	9105      	str	r1, [sp, #20]
 8004d1e:	e7c4      	b.n	8004caa <_vfiprintf_r+0x156>
 8004d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d24:	4604      	mov	r4, r0
 8004d26:	2301      	movs	r3, #1
 8004d28:	e7f0      	b.n	8004d0c <_vfiprintf_r+0x1b8>
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b12      	ldr	r3, [pc, #72]	@ (8004d7c <_vfiprintf_r+0x228>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4630      	mov	r0, r6
 8004d36:	f3af 8000 	nop.w
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	1c78      	adds	r0, r7, #1
 8004d3e:	d1d6      	bne.n	8004cee <_vfiprintf_r+0x19a>
 8004d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d42:	07d9      	lsls	r1, r3, #31
 8004d44:	d405      	bmi.n	8004d52 <_vfiprintf_r+0x1fe>
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	059a      	lsls	r2, r3, #22
 8004d4a:	d402      	bmi.n	8004d52 <_vfiprintf_r+0x1fe>
 8004d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d4e:	f7ff fddd 	bl	800490c <__retarget_lock_release_recursive>
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	065b      	lsls	r3, r3, #25
 8004d56:	f53f af1f 	bmi.w	8004b98 <_vfiprintf_r+0x44>
 8004d5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d5c:	e71e      	b.n	8004b9c <_vfiprintf_r+0x48>
 8004d5e:	ab03      	add	r3, sp, #12
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	462a      	mov	r2, r5
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <_vfiprintf_r+0x228>)
 8004d66:	a904      	add	r1, sp, #16
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f879 	bl	8004e60 <_printf_i>
 8004d6e:	e7e4      	b.n	8004d3a <_vfiprintf_r+0x1e6>
 8004d70:	080054bc 	.word	0x080054bc
 8004d74:	080054c6 	.word	0x080054c6
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	08004b2f 	.word	0x08004b2f
 8004d80:	080054c2 	.word	0x080054c2

08004d84 <_printf_common>:
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	4616      	mov	r6, r2
 8004d8a:	4698      	mov	r8, r3
 8004d8c:	688a      	ldr	r2, [r1, #8]
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d94:	4293      	cmp	r3, r2
 8004d96:	bfb8      	it	lt
 8004d98:	4613      	movlt	r3, r2
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004da0:	4607      	mov	r7, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	b10a      	cbz	r2, 8004daa <_printf_common+0x26>
 8004da6:	3301      	adds	r3, #1
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0699      	lsls	r1, r3, #26
 8004dae:	bf42      	ittt	mi
 8004db0:	6833      	ldrmi	r3, [r6, #0]
 8004db2:	3302      	addmi	r3, #2
 8004db4:	6033      	strmi	r3, [r6, #0]
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	f015 0506 	ands.w	r5, r5, #6
 8004dbc:	d106      	bne.n	8004dcc <_printf_common+0x48>
 8004dbe:	f104 0a19 	add.w	sl, r4, #25
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	dc26      	bgt.n	8004e1a <_printf_common+0x96>
 8004dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	3b00      	subs	r3, #0
 8004dd4:	bf18      	it	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	0692      	lsls	r2, r2, #26
 8004dda:	d42b      	bmi.n	8004e34 <_printf_common+0xb0>
 8004ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004de0:	4641      	mov	r1, r8
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c8      	blx	r9
 8004de6:	3001      	adds	r0, #1
 8004de8:	d01e      	beq.n	8004e28 <_printf_common+0xa4>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	f003 0306 	and.w	r3, r3, #6
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf02      	ittt	eq
 8004df6:	68e5      	ldreq	r5, [r4, #12]
 8004df8:	6833      	ldreq	r3, [r6, #0]
 8004dfa:	1aed      	subeq	r5, r5, r3
 8004dfc:	68a3      	ldr	r3, [r4, #8]
 8004dfe:	bf0c      	ite	eq
 8004e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e04:	2500      	movne	r5, #0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bfc4      	itt	gt
 8004e0a:	1a9b      	subgt	r3, r3, r2
 8004e0c:	18ed      	addgt	r5, r5, r3
 8004e0e:	2600      	movs	r6, #0
 8004e10:	341a      	adds	r4, #26
 8004e12:	42b5      	cmp	r5, r6
 8004e14:	d11a      	bne.n	8004e4c <_printf_common+0xc8>
 8004e16:	2000      	movs	r0, #0
 8004e18:	e008      	b.n	8004e2c <_printf_common+0xa8>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4641      	mov	r1, r8
 8004e20:	4638      	mov	r0, r7
 8004e22:	47c8      	blx	r9
 8004e24:	3001      	adds	r0, #1
 8004e26:	d103      	bne.n	8004e30 <_printf_common+0xac>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	3501      	adds	r5, #1
 8004e32:	e7c6      	b.n	8004dc2 <_printf_common+0x3e>
 8004e34:	18e1      	adds	r1, r4, r3
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	2030      	movs	r0, #48	@ 0x30
 8004e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e3e:	4422      	add	r2, r4
 8004e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e48:	3302      	adds	r3, #2
 8004e4a:	e7c7      	b.n	8004ddc <_printf_common+0x58>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4622      	mov	r2, r4
 8004e50:	4641      	mov	r1, r8
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c8      	blx	r9
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0e6      	beq.n	8004e28 <_printf_common+0xa4>
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7d9      	b.n	8004e12 <_printf_common+0x8e>
	...

08004e60 <_printf_i>:
 8004e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	7e0f      	ldrb	r7, [r1, #24]
 8004e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e68:	2f78      	cmp	r7, #120	@ 0x78
 8004e6a:	4691      	mov	r9, r2
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	469a      	mov	sl, r3
 8004e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e76:	d807      	bhi.n	8004e88 <_printf_i+0x28>
 8004e78:	2f62      	cmp	r7, #98	@ 0x62
 8004e7a:	d80a      	bhi.n	8004e92 <_printf_i+0x32>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	f000 80d2 	beq.w	8005026 <_printf_i+0x1c6>
 8004e82:	2f58      	cmp	r7, #88	@ 0x58
 8004e84:	f000 80b9 	beq.w	8004ffa <_printf_i+0x19a>
 8004e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e90:	e03a      	b.n	8004f08 <_printf_i+0xa8>
 8004e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e96:	2b15      	cmp	r3, #21
 8004e98:	d8f6      	bhi.n	8004e88 <_printf_i+0x28>
 8004e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea0 <_printf_i+0x40>)
 8004e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004f0d 	.word	0x08004f0d
 8004ea8:	08004e89 	.word	0x08004e89
 8004eac:	08004e89 	.word	0x08004e89
 8004eb0:	08004e89 	.word	0x08004e89
 8004eb4:	08004e89 	.word	0x08004e89
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e89 	.word	0x08004e89
 8004ec0:	08004e89 	.word	0x08004e89
 8004ec4:	08004e89 	.word	0x08004e89
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	0800500d 	.word	0x0800500d
 8004ed0:	08004f37 	.word	0x08004f37
 8004ed4:	08004fc7 	.word	0x08004fc7
 8004ed8:	08004e89 	.word	0x08004e89
 8004edc:	08004e89 	.word	0x08004e89
 8004ee0:	0800502f 	.word	0x0800502f
 8004ee4:	08004e89 	.word	0x08004e89
 8004ee8:	08004f37 	.word	0x08004f37
 8004eec:	08004e89 	.word	0x08004e89
 8004ef0:	08004e89 	.word	0x08004e89
 8004ef4:	08004fcf 	.word	0x08004fcf
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6032      	str	r2, [r6, #0]
 8004f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e09d      	b.n	8005048 <_printf_i+0x1e8>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	6031      	str	r1, [r6, #0]
 8004f14:	0606      	lsls	r6, r0, #24
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0xbc>
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	e003      	b.n	8004f24 <_printf_i+0xc4>
 8004f1c:	0645      	lsls	r5, r0, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0xb8>
 8004f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	da03      	bge.n	8004f30 <_printf_i+0xd0>
 8004f28:	232d      	movs	r3, #45	@ 0x2d
 8004f2a:	426d      	negs	r5, r5
 8004f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f30:	4859      	ldr	r0, [pc, #356]	@ (8005098 <_printf_i+0x238>)
 8004f32:	230a      	movs	r3, #10
 8004f34:	e011      	b.n	8004f5a <_printf_i+0xfa>
 8004f36:	6821      	ldr	r1, [r4, #0]
 8004f38:	6833      	ldr	r3, [r6, #0]
 8004f3a:	0608      	lsls	r0, r1, #24
 8004f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f40:	d402      	bmi.n	8004f48 <_printf_i+0xe8>
 8004f42:	0649      	lsls	r1, r1, #25
 8004f44:	bf48      	it	mi
 8004f46:	b2ad      	uxthmi	r5, r5
 8004f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f4a:	4853      	ldr	r0, [pc, #332]	@ (8005098 <_printf_i+0x238>)
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	bf14      	ite	ne
 8004f50:	230a      	movne	r3, #10
 8004f52:	2308      	moveq	r3, #8
 8004f54:	2100      	movs	r1, #0
 8004f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f5a:	6866      	ldr	r6, [r4, #4]
 8004f5c:	60a6      	str	r6, [r4, #8]
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	bfa2      	ittt	ge
 8004f62:	6821      	ldrge	r1, [r4, #0]
 8004f64:	f021 0104 	bicge.w	r1, r1, #4
 8004f68:	6021      	strge	r1, [r4, #0]
 8004f6a:	b90d      	cbnz	r5, 8004f70 <_printf_i+0x110>
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	d04b      	beq.n	8005008 <_printf_i+0x1a8>
 8004f70:	4616      	mov	r6, r2
 8004f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f76:	fb03 5711 	mls	r7, r3, r1, r5
 8004f7a:	5dc7      	ldrb	r7, [r0, r7]
 8004f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f80:	462f      	mov	r7, r5
 8004f82:	42bb      	cmp	r3, r7
 8004f84:	460d      	mov	r5, r1
 8004f86:	d9f4      	bls.n	8004f72 <_printf_i+0x112>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d10b      	bne.n	8004fa4 <_printf_i+0x144>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	07df      	lsls	r7, r3, #31
 8004f90:	d508      	bpl.n	8004fa4 <_printf_i+0x144>
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6861      	ldr	r1, [r4, #4]
 8004f96:	4299      	cmp	r1, r3
 8004f98:	bfde      	ittt	le
 8004f9a:	2330      	movle	r3, #48	@ 0x30
 8004f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fa4:	1b92      	subs	r2, r2, r6
 8004fa6:	6122      	str	r2, [r4, #16]
 8004fa8:	f8cd a000 	str.w	sl, [sp]
 8004fac:	464b      	mov	r3, r9
 8004fae:	aa03      	add	r2, sp, #12
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f7ff fee6 	bl	8004d84 <_printf_common>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d14a      	bne.n	8005052 <_printf_i+0x1f2>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	b004      	add	sp, #16
 8004fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f043 0320 	orr.w	r3, r3, #32
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	4833      	ldr	r0, [pc, #204]	@ (800509c <_printf_i+0x23c>)
 8004fd0:	2778      	movs	r7, #120	@ 0x78
 8004fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	6831      	ldr	r1, [r6, #0]
 8004fda:	061f      	lsls	r7, r3, #24
 8004fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fe0:	d402      	bmi.n	8004fe8 <_printf_i+0x188>
 8004fe2:	065f      	lsls	r7, r3, #25
 8004fe4:	bf48      	it	mi
 8004fe6:	b2ad      	uxthmi	r5, r5
 8004fe8:	6031      	str	r1, [r6, #0]
 8004fea:	07d9      	lsls	r1, r3, #31
 8004fec:	bf44      	itt	mi
 8004fee:	f043 0320 	orrmi.w	r3, r3, #32
 8004ff2:	6023      	strmi	r3, [r4, #0]
 8004ff4:	b11d      	cbz	r5, 8004ffe <_printf_i+0x19e>
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	e7ac      	b.n	8004f54 <_printf_i+0xf4>
 8004ffa:	4827      	ldr	r0, [pc, #156]	@ (8005098 <_printf_i+0x238>)
 8004ffc:	e7e9      	b.n	8004fd2 <_printf_i+0x172>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	f023 0320 	bic.w	r3, r3, #32
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	e7f6      	b.n	8004ff6 <_printf_i+0x196>
 8005008:	4616      	mov	r6, r2
 800500a:	e7bd      	b.n	8004f88 <_printf_i+0x128>
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	6825      	ldr	r5, [r4, #0]
 8005010:	6961      	ldr	r1, [r4, #20]
 8005012:	1d18      	adds	r0, r3, #4
 8005014:	6030      	str	r0, [r6, #0]
 8005016:	062e      	lsls	r6, r5, #24
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	d501      	bpl.n	8005020 <_printf_i+0x1c0>
 800501c:	6019      	str	r1, [r3, #0]
 800501e:	e002      	b.n	8005026 <_printf_i+0x1c6>
 8005020:	0668      	lsls	r0, r5, #25
 8005022:	d5fb      	bpl.n	800501c <_printf_i+0x1bc>
 8005024:	8019      	strh	r1, [r3, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	4616      	mov	r6, r2
 800502c:	e7bc      	b.n	8004fa8 <_printf_i+0x148>
 800502e:	6833      	ldr	r3, [r6, #0]
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	6032      	str	r2, [r6, #0]
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	2100      	movs	r1, #0
 800503a:	4630      	mov	r0, r6
 800503c:	f7fb f8c8 	bl	80001d0 <memchr>
 8005040:	b108      	cbz	r0, 8005046 <_printf_i+0x1e6>
 8005042:	1b80      	subs	r0, r0, r6
 8005044:	6060      	str	r0, [r4, #4]
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	2300      	movs	r3, #0
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005050:	e7aa      	b.n	8004fa8 <_printf_i+0x148>
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	4632      	mov	r2, r6
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	47d0      	blx	sl
 800505c:	3001      	adds	r0, #1
 800505e:	d0ad      	beq.n	8004fbc <_printf_i+0x15c>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	079b      	lsls	r3, r3, #30
 8005064:	d413      	bmi.n	800508e <_printf_i+0x22e>
 8005066:	68e0      	ldr	r0, [r4, #12]
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	4298      	cmp	r0, r3
 800506c:	bfb8      	it	lt
 800506e:	4618      	movlt	r0, r3
 8005070:	e7a6      	b.n	8004fc0 <_printf_i+0x160>
 8005072:	2301      	movs	r3, #1
 8005074:	4632      	mov	r2, r6
 8005076:	4649      	mov	r1, r9
 8005078:	4640      	mov	r0, r8
 800507a:	47d0      	blx	sl
 800507c:	3001      	adds	r0, #1
 800507e:	d09d      	beq.n	8004fbc <_printf_i+0x15c>
 8005080:	3501      	adds	r5, #1
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	9903      	ldr	r1, [sp, #12]
 8005086:	1a5b      	subs	r3, r3, r1
 8005088:	42ab      	cmp	r3, r5
 800508a:	dcf2      	bgt.n	8005072 <_printf_i+0x212>
 800508c:	e7eb      	b.n	8005066 <_printf_i+0x206>
 800508e:	2500      	movs	r5, #0
 8005090:	f104 0619 	add.w	r6, r4, #25
 8005094:	e7f5      	b.n	8005082 <_printf_i+0x222>
 8005096:	bf00      	nop
 8005098:	080054cd 	.word	0x080054cd
 800509c:	080054de 	.word	0x080054de

080050a0 <__sflush_r>:
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	0716      	lsls	r6, r2, #28
 80050aa:	4605      	mov	r5, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d454      	bmi.n	800515a <__sflush_r+0xba>
 80050b0:	684b      	ldr	r3, [r1, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dc02      	bgt.n	80050bc <__sflush_r+0x1c>
 80050b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd48      	ble.n	800514e <__sflush_r+0xae>
 80050bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d045      	beq.n	800514e <__sflush_r+0xae>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050c8:	682f      	ldr	r7, [r5, #0]
 80050ca:	6a21      	ldr	r1, [r4, #32]
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	d030      	beq.n	8005132 <__sflush_r+0x92>
 80050d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	0759      	lsls	r1, r3, #29
 80050d6:	d505      	bpl.n	80050e4 <__sflush_r+0x44>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050de:	b10b      	cbz	r3, 80050e4 <__sflush_r+0x44>
 80050e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050e8:	6a21      	ldr	r1, [r4, #32]
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	d106      	bne.n	8005102 <__sflush_r+0x62>
 80050f4:	6829      	ldr	r1, [r5, #0]
 80050f6:	291d      	cmp	r1, #29
 80050f8:	d82b      	bhi.n	8005152 <__sflush_r+0xb2>
 80050fa:	4a2a      	ldr	r2, [pc, #168]	@ (80051a4 <__sflush_r+0x104>)
 80050fc:	410a      	asrs	r2, r1
 80050fe:	07d6      	lsls	r6, r2, #31
 8005100:	d427      	bmi.n	8005152 <__sflush_r+0xb2>
 8005102:	2200      	movs	r2, #0
 8005104:	6062      	str	r2, [r4, #4]
 8005106:	04d9      	lsls	r1, r3, #19
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	d504      	bpl.n	8005118 <__sflush_r+0x78>
 800510e:	1c42      	adds	r2, r0, #1
 8005110:	d101      	bne.n	8005116 <__sflush_r+0x76>
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	b903      	cbnz	r3, 8005118 <__sflush_r+0x78>
 8005116:	6560      	str	r0, [r4, #84]	@ 0x54
 8005118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800511a:	602f      	str	r7, [r5, #0]
 800511c:	b1b9      	cbz	r1, 800514e <__sflush_r+0xae>
 800511e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005122:	4299      	cmp	r1, r3
 8005124:	d002      	beq.n	800512c <__sflush_r+0x8c>
 8005126:	4628      	mov	r0, r5
 8005128:	f7ff fbf2 	bl	8004910 <_free_r>
 800512c:	2300      	movs	r3, #0
 800512e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005130:	e00d      	b.n	800514e <__sflush_r+0xae>
 8005132:	2301      	movs	r3, #1
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	4602      	mov	r2, r0
 800513a:	1c50      	adds	r0, r2, #1
 800513c:	d1c9      	bne.n	80050d2 <__sflush_r+0x32>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0c6      	beq.n	80050d2 <__sflush_r+0x32>
 8005144:	2b1d      	cmp	r3, #29
 8005146:	d001      	beq.n	800514c <__sflush_r+0xac>
 8005148:	2b16      	cmp	r3, #22
 800514a:	d11e      	bne.n	800518a <__sflush_r+0xea>
 800514c:	602f      	str	r7, [r5, #0]
 800514e:	2000      	movs	r0, #0
 8005150:	e022      	b.n	8005198 <__sflush_r+0xf8>
 8005152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005156:	b21b      	sxth	r3, r3
 8005158:	e01b      	b.n	8005192 <__sflush_r+0xf2>
 800515a:	690f      	ldr	r7, [r1, #16]
 800515c:	2f00      	cmp	r7, #0
 800515e:	d0f6      	beq.n	800514e <__sflush_r+0xae>
 8005160:	0793      	lsls	r3, r2, #30
 8005162:	680e      	ldr	r6, [r1, #0]
 8005164:	bf08      	it	eq
 8005166:	694b      	ldreq	r3, [r1, #20]
 8005168:	600f      	str	r7, [r1, #0]
 800516a:	bf18      	it	ne
 800516c:	2300      	movne	r3, #0
 800516e:	eba6 0807 	sub.w	r8, r6, r7
 8005172:	608b      	str	r3, [r1, #8]
 8005174:	f1b8 0f00 	cmp.w	r8, #0
 8005178:	dde9      	ble.n	800514e <__sflush_r+0xae>
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800517e:	4643      	mov	r3, r8
 8005180:	463a      	mov	r2, r7
 8005182:	4628      	mov	r0, r5
 8005184:	47b0      	blx	r6
 8005186:	2800      	cmp	r0, #0
 8005188:	dc08      	bgt.n	800519c <__sflush_r+0xfc>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4407      	add	r7, r0
 800519e:	eba8 0800 	sub.w	r8, r8, r0
 80051a2:	e7e7      	b.n	8005174 <__sflush_r+0xd4>
 80051a4:	dfbffffe 	.word	0xdfbffffe

080051a8 <_fflush_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	690b      	ldr	r3, [r1, #16]
 80051ac:	4605      	mov	r5, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	b913      	cbnz	r3, 80051b8 <_fflush_r+0x10>
 80051b2:	2500      	movs	r5, #0
 80051b4:	4628      	mov	r0, r5
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	b118      	cbz	r0, 80051c2 <_fflush_r+0x1a>
 80051ba:	6a03      	ldr	r3, [r0, #32]
 80051bc:	b90b      	cbnz	r3, 80051c2 <_fflush_r+0x1a>
 80051be:	f7ff fa9f 	bl	8004700 <__sinit>
 80051c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f3      	beq.n	80051b2 <_fflush_r+0xa>
 80051ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051cc:	07d0      	lsls	r0, r2, #31
 80051ce:	d404      	bmi.n	80051da <_fflush_r+0x32>
 80051d0:	0599      	lsls	r1, r3, #22
 80051d2:	d402      	bmi.n	80051da <_fflush_r+0x32>
 80051d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d6:	f7ff fb98 	bl	800490a <__retarget_lock_acquire_recursive>
 80051da:	4628      	mov	r0, r5
 80051dc:	4621      	mov	r1, r4
 80051de:	f7ff ff5f 	bl	80050a0 <__sflush_r>
 80051e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051e4:	07da      	lsls	r2, r3, #31
 80051e6:	4605      	mov	r5, r0
 80051e8:	d4e4      	bmi.n	80051b4 <_fflush_r+0xc>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	059b      	lsls	r3, r3, #22
 80051ee:	d4e1      	bmi.n	80051b4 <_fflush_r+0xc>
 80051f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051f2:	f7ff fb8b 	bl	800490c <__retarget_lock_release_recursive>
 80051f6:	e7dd      	b.n	80051b4 <_fflush_r+0xc>

080051f8 <__swbuf_r>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	460e      	mov	r6, r1
 80051fc:	4614      	mov	r4, r2
 80051fe:	4605      	mov	r5, r0
 8005200:	b118      	cbz	r0, 800520a <__swbuf_r+0x12>
 8005202:	6a03      	ldr	r3, [r0, #32]
 8005204:	b90b      	cbnz	r3, 800520a <__swbuf_r+0x12>
 8005206:	f7ff fa7b 	bl	8004700 <__sinit>
 800520a:	69a3      	ldr	r3, [r4, #24]
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	071a      	lsls	r2, r3, #28
 8005212:	d501      	bpl.n	8005218 <__swbuf_r+0x20>
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	b943      	cbnz	r3, 800522a <__swbuf_r+0x32>
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f82a 	bl	8005274 <__swsetup_r>
 8005220:	b118      	cbz	r0, 800522a <__swbuf_r+0x32>
 8005222:	f04f 37ff 	mov.w	r7, #4294967295
 8005226:	4638      	mov	r0, r7
 8005228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	6922      	ldr	r2, [r4, #16]
 800522e:	1a98      	subs	r0, r3, r2
 8005230:	6963      	ldr	r3, [r4, #20]
 8005232:	b2f6      	uxtb	r6, r6
 8005234:	4283      	cmp	r3, r0
 8005236:	4637      	mov	r7, r6
 8005238:	dc05      	bgt.n	8005246 <__swbuf_r+0x4e>
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	f7ff ffb3 	bl	80051a8 <_fflush_r>
 8005242:	2800      	cmp	r0, #0
 8005244:	d1ed      	bne.n	8005222 <__swbuf_r+0x2a>
 8005246:	68a3      	ldr	r3, [r4, #8]
 8005248:	3b01      	subs	r3, #1
 800524a:	60a3      	str	r3, [r4, #8]
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	701e      	strb	r6, [r3, #0]
 8005254:	6962      	ldr	r2, [r4, #20]
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	429a      	cmp	r2, r3
 800525a:	d004      	beq.n	8005266 <__swbuf_r+0x6e>
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d5e1      	bpl.n	8005226 <__swbuf_r+0x2e>
 8005262:	2e0a      	cmp	r6, #10
 8005264:	d1df      	bne.n	8005226 <__swbuf_r+0x2e>
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f7ff ff9d 	bl	80051a8 <_fflush_r>
 800526e:	2800      	cmp	r0, #0
 8005270:	d0d9      	beq.n	8005226 <__swbuf_r+0x2e>
 8005272:	e7d6      	b.n	8005222 <__swbuf_r+0x2a>

08005274 <__swsetup_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4b29      	ldr	r3, [pc, #164]	@ (800531c <__swsetup_r+0xa8>)
 8005278:	4605      	mov	r5, r0
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	460c      	mov	r4, r1
 800527e:	b118      	cbz	r0, 8005288 <__swsetup_r+0x14>
 8005280:	6a03      	ldr	r3, [r0, #32]
 8005282:	b90b      	cbnz	r3, 8005288 <__swsetup_r+0x14>
 8005284:	f7ff fa3c 	bl	8004700 <__sinit>
 8005288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528c:	0719      	lsls	r1, r3, #28
 800528e:	d422      	bmi.n	80052d6 <__swsetup_r+0x62>
 8005290:	06da      	lsls	r2, r3, #27
 8005292:	d407      	bmi.n	80052a4 <__swsetup_r+0x30>
 8005294:	2209      	movs	r2, #9
 8005296:	602a      	str	r2, [r5, #0]
 8005298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	e033      	b.n	800530c <__swsetup_r+0x98>
 80052a4:	0758      	lsls	r0, r3, #29
 80052a6:	d512      	bpl.n	80052ce <__swsetup_r+0x5a>
 80052a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052aa:	b141      	cbz	r1, 80052be <__swsetup_r+0x4a>
 80052ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052b0:	4299      	cmp	r1, r3
 80052b2:	d002      	beq.n	80052ba <__swsetup_r+0x46>
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7ff fb2b 	bl	8004910 <_free_r>
 80052ba:	2300      	movs	r3, #0
 80052bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052c4:	81a3      	strh	r3, [r4, #12]
 80052c6:	2300      	movs	r3, #0
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f043 0308 	orr.w	r3, r3, #8
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	b94b      	cbnz	r3, 80052ee <__swsetup_r+0x7a>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e4:	d003      	beq.n	80052ee <__swsetup_r+0x7a>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 f84f 	bl	800538c <__smakebuf_r>
 80052ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f2:	f013 0201 	ands.w	r2, r3, #1
 80052f6:	d00a      	beq.n	800530e <__swsetup_r+0x9a>
 80052f8:	2200      	movs	r2, #0
 80052fa:	60a2      	str	r2, [r4, #8]
 80052fc:	6962      	ldr	r2, [r4, #20]
 80052fe:	4252      	negs	r2, r2
 8005300:	61a2      	str	r2, [r4, #24]
 8005302:	6922      	ldr	r2, [r4, #16]
 8005304:	b942      	cbnz	r2, 8005318 <__swsetup_r+0xa4>
 8005306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800530a:	d1c5      	bne.n	8005298 <__swsetup_r+0x24>
 800530c:	bd38      	pop	{r3, r4, r5, pc}
 800530e:	0799      	lsls	r1, r3, #30
 8005310:	bf58      	it	pl
 8005312:	6962      	ldrpl	r2, [r4, #20]
 8005314:	60a2      	str	r2, [r4, #8]
 8005316:	e7f4      	b.n	8005302 <__swsetup_r+0x8e>
 8005318:	2000      	movs	r0, #0
 800531a:	e7f7      	b.n	800530c <__swsetup_r+0x98>
 800531c:	20000018 	.word	0x20000018

08005320 <_sbrk_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4d06      	ldr	r5, [pc, #24]	@ (800533c <_sbrk_r+0x1c>)
 8005324:	2300      	movs	r3, #0
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	602b      	str	r3, [r5, #0]
 800532c:	f7fb fcf8 	bl	8000d20 <_sbrk>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_sbrk_r+0x1a>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_sbrk_r+0x1a>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20000350 	.word	0x20000350

08005340 <__swhatbuf_r>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	460c      	mov	r4, r1
 8005344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005348:	2900      	cmp	r1, #0
 800534a:	b096      	sub	sp, #88	@ 0x58
 800534c:	4615      	mov	r5, r2
 800534e:	461e      	mov	r6, r3
 8005350:	da0d      	bge.n	800536e <__swhatbuf_r+0x2e>
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	bf14      	ite	ne
 800535e:	2340      	movne	r3, #64	@ 0x40
 8005360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005364:	2000      	movs	r0, #0
 8005366:	6031      	str	r1, [r6, #0]
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	b016      	add	sp, #88	@ 0x58
 800536c:	bd70      	pop	{r4, r5, r6, pc}
 800536e:	466a      	mov	r2, sp
 8005370:	f000 f848 	bl	8005404 <_fstat_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	dbec      	blt.n	8005352 <__swhatbuf_r+0x12>
 8005378:	9901      	ldr	r1, [sp, #4]
 800537a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800537e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005382:	4259      	negs	r1, r3
 8005384:	4159      	adcs	r1, r3
 8005386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800538a:	e7eb      	b.n	8005364 <__swhatbuf_r+0x24>

0800538c <__smakebuf_r>:
 800538c:	898b      	ldrh	r3, [r1, #12]
 800538e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005390:	079d      	lsls	r5, r3, #30
 8005392:	4606      	mov	r6, r0
 8005394:	460c      	mov	r4, r1
 8005396:	d507      	bpl.n	80053a8 <__smakebuf_r+0x1c>
 8005398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	2301      	movs	r3, #1
 80053a2:	6163      	str	r3, [r4, #20]
 80053a4:	b003      	add	sp, #12
 80053a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a8:	ab01      	add	r3, sp, #4
 80053aa:	466a      	mov	r2, sp
 80053ac:	f7ff ffc8 	bl	8005340 <__swhatbuf_r>
 80053b0:	9f00      	ldr	r7, [sp, #0]
 80053b2:	4605      	mov	r5, r0
 80053b4:	4639      	mov	r1, r7
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff fb16 	bl	80049e8 <_malloc_r>
 80053bc:	b948      	cbnz	r0, 80053d2 <__smakebuf_r+0x46>
 80053be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c2:	059a      	lsls	r2, r3, #22
 80053c4:	d4ee      	bmi.n	80053a4 <__smakebuf_r+0x18>
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	e7e2      	b.n	8005398 <__smakebuf_r+0xc>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	6020      	str	r0, [r4, #0]
 80053d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053e2:	b15b      	cbz	r3, 80053fc <__smakebuf_r+0x70>
 80053e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e8:	4630      	mov	r0, r6
 80053ea:	f000 f81d 	bl	8005428 <_isatty_r>
 80053ee:	b128      	cbz	r0, 80053fc <__smakebuf_r+0x70>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	431d      	orrs	r5, r3
 8005400:	81a5      	strh	r5, [r4, #12]
 8005402:	e7cf      	b.n	80053a4 <__smakebuf_r+0x18>

08005404 <_fstat_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	@ (8005424 <_fstat_r+0x20>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	f7fb fc5c 	bl	8000cce <_fstat>
 8005416:	1c43      	adds	r3, r0, #1
 8005418:	d102      	bne.n	8005420 <_fstat_r+0x1c>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	b103      	cbz	r3, 8005420 <_fstat_r+0x1c>
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	bf00      	nop
 8005424:	20000350 	.word	0x20000350

08005428 <_isatty_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d06      	ldr	r5, [pc, #24]	@ (8005444 <_isatty_r+0x1c>)
 800542c:	2300      	movs	r3, #0
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	f7fb fc5b 	bl	8000cee <_isatty>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_isatty_r+0x1a>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_isatty_r+0x1a>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000350 	.word	0x20000350

08005448 <_init>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr

08005454 <_fini>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr
