
Firmware_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800557c  0800557c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005740  08005740  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005740  08005740  00006740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005748  08005748  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005748  08005748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005750  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000000c  0800575c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  0800575c  000072d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013881  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d96  00000000  00000000  0001a8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccf  00000000  00000000  0001e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021851  00000000  00000000  0001f3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015628  00000000  00000000  00040c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a39  00000000  00000000  00056228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fc61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  0011fca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001240d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005564 	.word	0x08005564

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005564 	.word	0x08005564

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96a 	b.w	80004c8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	460c      	mov	r4, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14e      	bne.n	80002b6 <__udivmoddi4+0xaa>
 8000218:	4694      	mov	ip, r2
 800021a:	458c      	cmp	ip, r1
 800021c:	4686      	mov	lr, r0
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	d962      	bls.n	80002ea <__udivmoddi4+0xde>
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0320 	rsb	r3, r2, #32
 800022a:	4091      	lsls	r1, r2
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	4319      	orrs	r1, r3
 8000236:	fa00 fe02 	lsl.w	lr, r0, r2
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fa1f f68c 	uxth.w	r6, ip
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024a:	fb07 1114 	mls	r1, r7, r4, r1
 800024e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000252:	fb04 f106 	mul.w	r1, r4, r6
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000262:	f080 8112 	bcs.w	800048a <__udivmoddi4+0x27e>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 810f 	bls.w	800048a <__udivmoddi4+0x27e>
 800026c:	3c02      	subs	r4, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a59      	subs	r1, r3, r1
 8000272:	fa1f f38e 	uxth.w	r3, lr
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb00 f606 	mul.w	r6, r0, r6
 8000286:	429e      	cmp	r6, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x94>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000292:	f080 80fc 	bcs.w	800048e <__udivmoddi4+0x282>
 8000296:	429e      	cmp	r6, r3
 8000298:	f240 80f9 	bls.w	800048e <__udivmoddi4+0x282>
 800029c:	4463      	add	r3, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	1b9b      	subs	r3, r3, r6
 80002a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa6>
 80002aa:	40d3      	lsrs	r3, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xba>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb4>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x150>
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xcc>
 80002d2:	4290      	cmp	r0, r2
 80002d4:	f0c0 80f0 	bcc.w	80004b8 <__udivmoddi4+0x2ac>
 80002d8:	1a86      	subs	r6, r0, r2
 80002da:	eb64 0303 	sbc.w	r3, r4, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d0e6      	beq.n	80002b2 <__udivmoddi4+0xa6>
 80002e4:	e9c5 6300 	strd	r6, r3, [r5]
 80002e8:	e7e3      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x204>
 80002f0:	eba1 040c 	sub.w	r4, r1, ip
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	fa1f f78c 	uxth.w	r7, ip
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030e:	fb07 f006 	mul.w	r0, r7, r6
 8000312:	4298      	cmp	r0, r3
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x11c>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 34ff 	add.w	r4, r6, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x11a>
 8000320:	4298      	cmp	r0, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 8000326:	4626      	mov	r6, r4
 8000328:	1a1c      	subs	r4, r3, r0
 800032a:	fa1f f38e 	uxth.w	r3, lr
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb00 f707 	mul.w	r7, r0, r7
 800033e:	429f      	cmp	r7, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x148>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f100 34ff 	add.w	r4, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x146>
 800034c:	429f      	cmp	r7, r3
 800034e:	f200 80b0 	bhi.w	80004b2 <__udivmoddi4+0x2a6>
 8000352:	4620      	mov	r0, r4
 8000354:	1bdb      	subs	r3, r3, r7
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x9c>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa20 fc06 	lsr.w	ip, r0, r6
 800036c:	fa04 f301 	lsl.w	r3, r4, r1
 8000370:	ea43 030c 	orr.w	r3, r3, ip
 8000374:	40f4      	lsrs	r4, r6
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	0c38      	lsrs	r0, r7, #16
 800037c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000380:	fbb4 fef0 	udiv	lr, r4, r0
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fb00 441e 	mls	r4, r0, lr, r4
 800038c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000390:	fb0e f90c 	mul.w	r9, lr, ip
 8000394:	45a1      	cmp	r9, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x1a6>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a2:	f080 8084 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8081 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80003ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b0:	443c      	add	r4, r7
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	fa1f f983 	uxth.w	r9, r3
 80003ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80003be:	fb00 4413 	mls	r4, r0, r3, r4
 80003c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1d2>
 80003ce:	193c      	adds	r4, r7, r4
 80003d0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d4:	d267      	bcs.n	80004a6 <__udivmoddi4+0x29a>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d965      	bls.n	80004a6 <__udivmoddi4+0x29a>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e2:	fba0 9302 	umull	r9, r3, r0, r2
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	429c      	cmp	r4, r3
 80003ec:	46ce      	mov	lr, r9
 80003ee:	469c      	mov	ip, r3
 80003f0:	d351      	bcc.n	8000496 <__udivmoddi4+0x28a>
 80003f2:	d04e      	beq.n	8000492 <__udivmoddi4+0x286>
 80003f4:	b155      	cbz	r5, 800040c <__udivmoddi4+0x200>
 80003f6:	ebb8 030e 	subs.w	r3, r8, lr
 80003fa:	eb64 040c 	sbc.w	r4, r4, ip
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	40cb      	lsrs	r3, r1
 8000404:	431e      	orrs	r6, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c5 6400 	strd	r6, r4, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	e750      	b.n	80002b2 <__udivmoddi4+0xa6>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa24 f303 	lsr.w	r3, r4, r3
 8000420:	4094      	lsls	r4, r2
 8000422:	430c      	orrs	r4, r1
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa00 fe02 	lsl.w	lr, r0, r2
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3110 	mls	r1, r8, r0, r3
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x24c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29e>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29e>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000460:	fb08 3311 	mls	r3, r8, r1, r3
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x276>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x296>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x296>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e739      	b.n	80002fe <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f0      	b.n	8000270 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e706      	b.n	80002a0 <__udivmoddi4+0x94>
 8000492:	45c8      	cmp	r8, r9
 8000494:	d2ae      	bcs.n	80003f4 <__udivmoddi4+0x1e8>
 8000496:	ebb9 0e02 	subs.w	lr, r9, r2
 800049a:	eb63 0c07 	sbc.w	ip, r3, r7
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a8      	b.n	80003f4 <__udivmoddi4+0x1e8>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x276>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e799      	b.n	80003de <__udivmoddi4+0x1d2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x24c>
 80004ae:	46d6      	mov	lr, sl
 80004b0:	e77f      	b.n	80003b2 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74d      	b.n	8000354 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e70f      	b.n	80002e0 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e730      	b.n	8000328 <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <local_getCharIndex>:
int32_t local_getCharIndex(uint8_t *str, uint32_t length, uint8_t to_find);

////////////////// Utils //////////////////////////

int32_t local_getCharIndex(uint8_t *str, uint32_t length, uint8_t to_find)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	71fb      	strb	r3, [r7, #7]
	// Update length to account for end of string
	length = (strlen((char *) str) > length) ? length : strlen((char *) str);
 80004da:	68f8      	ldr	r0, [r7, #12]
 80004dc:	f7ff fe76 	bl	80001cc <strlen>
 80004e0:	4602      	mov	r2, r0
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d304      	bcc.n	80004f2 <local_getCharIndex+0x26>
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f7ff fe6f 	bl	80001cc <strlen>
 80004ee:	4603      	mov	r3, r0
 80004f0:	e000      	b.n	80004f4 <local_getCharIndex+0x28>
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	60bb      	str	r3, [r7, #8]

	for (int32_t i = 0; i < length; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e00b      	b.n	8000514 <local_getCharIndex+0x48>
	{
		if(str[i] == to_find)
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	429a      	cmp	r2, r3
 8000508:	d101      	bne.n	800050e <local_getCharIndex+0x42>
		{
			return i;
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	e008      	b.n	8000520 <local_getCharIndex+0x54>
	for (int32_t i = 0; i < length; i++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	429a      	cmp	r2, r3
 800051a:	d8ef      	bhi.n	80004fc <local_getCharIndex+0x30>
		}
	}

	return -1;
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000520:	4618      	mov	r0, r3
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <Commands_RxCallback>:


/////////////////// Functions ///////////////////////

void Commands_RxCallback(UART_HandleTypeDef * huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	// static variable for the current index in command_buffer (only set to 0 on startup)
	static uint32_t index = 0;
	static Commands_Error_t err = CMD_ERROR_OK;

	if (index >= COMMAND_MAX_LENGTH)
 8000530:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <Commands_RxCallback+0x7c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b3f      	cmp	r3, #63	@ 0x3f
 8000536:	d905      	bls.n	8000544 <Commands_RxCallback+0x1c>
	{
		Utils_printCommandError(CMD_ERROR_COMMAND_TOO_LONG);
 8000538:	2005      	movs	r0, #5
 800053a:	f000 fa09 	bl	8000950 <Utils_printCommandError>
		index = 0;
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <Commands_RxCallback+0x7c>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
	}

	// uint8_t that was just received
	uint8_t received_char = command_buffer[index];
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <Commands_RxCallback+0x7c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <Commands_RxCallback+0x80>)
 800054a:	5cd3      	ldrb	r3, [r2, r3]
 800054c:	73fb      	strb	r3, [r7, #15]
	index++;
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <Commands_RxCallback+0x7c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a13      	ldr	r2, [pc, #76]	@ (80005a4 <Commands_RxCallback+0x7c>)
 8000556:	6013      	str	r3, [r2, #0]

	if(received_char == '\n' || received_char == '\r')
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2b0a      	cmp	r3, #10
 800055c:	d002      	beq.n	8000564 <Commands_RxCallback+0x3c>
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b0d      	cmp	r3, #13
 8000562:	d111      	bne.n	8000588 <Commands_RxCallback+0x60>
		// strcat(debug_buffer, (char *)command_buffer);
		// strcat(debug_buffer, "\n");
		// Utils_printToUart2((uint8_t *)debug_buffer);


		err = Commands_parseIntoCurrent();
 8000564:	f000 f826 	bl	80005b4 <Commands_parseIntoCurrent>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <Commands_RxCallback+0x84>)
 800056e:	701a      	strb	r2, [r3, #0]
		if (err)
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <Commands_RxCallback+0x84>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d004      	beq.n	8000582 <Commands_RxCallback+0x5a>
		{
			Utils_printCommandError(err);
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <Commands_RxCallback+0x84>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f9e7 	bl	8000950 <Utils_printCommandError>
		// if (err)
		// {
		// 	Utils_printCommandError(err);
		// }

		index = 0;
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <Commands_RxCallback+0x7c>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, &(command_buffer[index]), 1);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <Commands_RxCallback+0x7c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <Commands_RxCallback+0x80>)
 800058e:	4413      	add	r3, r2
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <Commands_RxCallback+0x88>)
 8000596:	f003 fbbd 	bl	8003d14 <HAL_UART_Receive_IT>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000fc 	.word	0x200000fc
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000100 	.word	0x20000100
 80005b0:	20000204 	.word	0x20000204

080005b4 <Commands_parseIntoCurrent>:

	return err;
}

Commands_Error_t Commands_parseIntoCurrent()
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b0c9      	sub	sp, #292	@ 0x124
 80005b8:	af22      	add	r7, sp, #136	@ 0x88
	Utils_initEmptyCommand(&current_command);
 80005ba:	4851      	ldr	r0, [pc, #324]	@ (8000700 <Commands_parseIntoCurrent+0x14c>)
 80005bc:	f000 f8a4 	bl	8000708 <Utils_initEmptyCommand>

	// Check that the command ends (and get length)
	int32_t command_length = local_getCharIndex(command_buffer, COMMAND_MAX_LENGTH, '\n');
 80005c0:	220a      	movs	r2, #10
 80005c2:	2140      	movs	r1, #64	@ 0x40
 80005c4:	484f      	ldr	r0, [pc, #316]	@ (8000704 <Commands_parseIntoCurrent+0x150>)
 80005c6:	f7ff ff81 	bl	80004cc <local_getCharIndex>
 80005ca:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	// Test for \r as well just in case
	if (command_length < 0)
 80005ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	da06      	bge.n	80005e4 <Commands_parseIntoCurrent+0x30>
	{
		command_length = local_getCharIndex(command_buffer, COMMAND_MAX_LENGTH, '\r');
 80005d6:	220d      	movs	r2, #13
 80005d8:	2140      	movs	r1, #64	@ 0x40
 80005da:	484a      	ldr	r0, [pc, #296]	@ (8000704 <Commands_parseIntoCurrent+0x150>)
 80005dc:	f7ff ff76 	bl	80004cc <local_getCharIndex>
 80005e0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	}

	// Error handling
	if (command_length < 0)
 80005e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da09      	bge.n	8000600 <Commands_parseIntoCurrent+0x4c>
	{
		if (strlen((char *) command_buffer) < COMMAND_MAX_LENGTH)
 80005ec:	4845      	ldr	r0, [pc, #276]	@ (8000704 <Commands_parseIntoCurrent+0x150>)
 80005ee:	f7ff fded 	bl	80001cc <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80005f6:	d801      	bhi.n	80005fc <Commands_parseIntoCurrent+0x48>
		{
			return CMD_ERROR_COULD_NOT_PARSE;
 80005f8:	2306      	movs	r3, #6
 80005fa:	e07d      	b.n	80006f8 <Commands_parseIntoCurrent+0x144>
		}
		return CMD_ERROR_COMMAND_TOO_LONG;
 80005fc:	2305      	movs	r3, #5
 80005fe:	e07b      	b.n	80006f8 <Commands_parseIntoCurrent+0x144>
	}

	// Copy command in a local buffer
	uint8_t temp_buffer[COMMAND_MAX_LENGTH + 1] = {0};
 8000600:	2300      	movs	r3, #0
 8000602:	647b      	str	r3, [r7, #68]	@ 0x44
 8000604:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000608:	223d      	movs	r2, #61	@ 0x3d
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f004 ff4d 	bl	80054ac <memset>
	strncpy((char *) temp_buffer, (char *) command_buffer, command_length); // Removes the \n at the end
 8000612:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000616:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800061a:	493a      	ldr	r1, [pc, #232]	@ (8000704 <Commands_parseIntoCurrent+0x150>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 ff5c 	bl	80054da <strncpy>
	temp_buffer[command_length] = ' '; // replace the \n with a space
 8000622:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000626:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800062a:	4413      	add	r3, r2
 800062c:	2220      	movs	r2, #32
 800062e:	701a      	strb	r2, [r3, #0]

	// Store received command into current_command
	uint32_t command_part_index = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	int32_t start_index = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	while (strlen((char *) &temp_buffer[start_index]) > 0)
 800063c:	e038      	b.n	80006b0 <Commands_parseIntoCurrent+0xfc>
	{
		// Check if argument overflows max_args
		if (command_part_index >= COMMAND_MAX_ARGS + 3)
 800063e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000642:	2b05      	cmp	r3, #5
 8000644:	d901      	bls.n	800064a <Commands_parseIntoCurrent+0x96>
		{
			return CMD_ERROR_INVALID_ARGS;
 8000646:	2304      	movs	r3, #4
 8000648:	e056      	b.n	80006f8 <Commands_parseIntoCurrent+0x144>
		}

		int32_t space_index = local_getCharIndex(&temp_buffer[start_index], command_length, ' ');
 800064a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800064e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000652:	4413      	add	r3, r2
 8000654:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8000658:	2220      	movs	r2, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff36 	bl	80004cc <local_getCharIndex>
 8000660:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		if (space_index < 0)
 8000664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000668:	2b00      	cmp	r3, #0
 800066a:	da01      	bge.n	8000670 <Commands_parseIntoCurrent+0xbc>
		{
			return CMD_ERROR_COULD_NOT_PARSE;
 800066c:	2306      	movs	r3, #6
 800066e:	e043      	b.n	80006f8 <Commands_parseIntoCurrent+0x144>
		}

		Utils_setCommandPartByIndex(&current_command, command_part_index, &temp_buffer[start_index]);
 8000670:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000678:	4413      	add	r3, r2
 800067a:	461a      	mov	r2, r3
 800067c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000680:	481f      	ldr	r0, [pc, #124]	@ (8000700 <Commands_parseIntoCurrent+0x14c>)
 8000682:	f000 f90b 	bl	800089c <Utils_setCommandPartByIndex>

		start_index += space_index + 1; // deletes everything before the space by manipulating the pointer.
 8000686:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800068a:	3301      	adds	r3, #1
 800068c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000690:	4413      	add	r3, r2
 8000692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		command_length -= space_index + 1; // Updates command length
 8000696:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800069a:	3301      	adds	r3, #1
 800069c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		command_part_index++;
 80006a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80006aa:	3301      	adds	r3, #1
 80006ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	while (strlen((char *) &temp_buffer[start_index]) > 0)
 80006b0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80006b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1be      	bne.n	800063e <Commands_parseIntoCurrent+0x8a>
	}

	uint8_t print_buffer[64] = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	223c      	movs	r2, #60	@ 0x3c
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 feed 	bl	80054ac <memset>
	Utils_printToUart2(Utils_getCommandInfoString(current_command, print_buffer));
 80006d2:	4c0b      	ldr	r4, [pc, #44]	@ (8000700 <Commands_parseIntoCurrent+0x14c>)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	9321      	str	r3, [sp, #132]	@ 0x84
 80006d8:	4668      	mov	r0, sp
 80006da:	f104 0310 	add.w	r3, r4, #16
 80006de:	2281      	movs	r2, #129	@ 0x81
 80006e0:	4619      	mov	r1, r3
 80006e2:	f004 ff31 	bl	8005548 <memcpy>
 80006e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006ea:	f000 f83f 	bl	800076c <Utils_getCommandInfoString>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f919 	bl	8000928 <Utils_printToUart2>

	return CMD_ERROR_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	379c      	adds	r7, #156	@ 0x9c
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	20000068 	.word	0x20000068
 8000704:	20000028 	.word	0x20000028

08000708 <Utils_initEmptyCommand>:
#include "string.h"
#include "main.h"
#include "usart.h"

void Utils_initEmptyCommand(Command_t *command_ptr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	memset(command_ptr->destination, 0, COMMAND_DESTINATION_MAX_LENGTH);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	2210      	movs	r2, #16
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fec7 	bl	80054ac <memset>
	memset(command_ptr->type, 0, COMMAND_TYPE_MAX_LENGTH);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3311      	adds	r3, #17
 8000722:	2210      	movs	r2, #16
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fec0 	bl	80054ac <memset>
	memset(command_ptr->name, 0, COMMAND_NAME_MAX_LENGTH);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3321      	adds	r3, #33	@ 0x21
 8000730:	2210      	movs	r2, #16
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f004 feb9 	bl	80054ac <memset>
	for (uint32_t i = 0; i < COMMAND_MAX_ARGS; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	e00d      	b.n	800075c <Utils_initEmptyCommand+0x54>
	{
		memset(command_ptr->args[i], 0, COMMAND_ARG_MAX_LENGTH);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	015b      	lsls	r3, r3, #5
 8000744:	3330      	adds	r3, #48	@ 0x30
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	3301      	adds	r3, #1
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f004 feab 	bl	80054ac <memset>
	for (uint32_t i = 0; i < COMMAND_MAX_ARGS; i++)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d9ee      	bls.n	8000740 <Utils_initEmptyCommand+0x38>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <Utils_getCommandInfoString>:

uint8_t *Utils_getCommandInfoString(Command_t command, uint8_t *buffer)
{
 800076c:	b084      	sub	sp, #16
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	f107 0c10 	add.w	ip, r7, #16
 8000778:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	strcpy((char *) buffer, "dest [");
 800077c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000780:	4a41      	ldr	r2, [pc, #260]	@ (8000888 <Utils_getCommandInfoString+0x11c>)
 8000782:	6810      	ldr	r0, [r2, #0]
 8000784:	6018      	str	r0, [r3, #0]
 8000786:	8891      	ldrh	r1, [r2, #4]
 8000788:	7992      	ldrb	r2, [r2, #6]
 800078a:	8099      	strh	r1, [r3, #4]
 800078c:	719a      	strb	r2, [r3, #6]
	strcat((char *) buffer, (char *) command.destination);
 800078e:	f107 0311 	add.w	r3, r7, #17
 8000792:	4619      	mov	r1, r3
 8000794:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000798:	f004 fe90 	bl	80054bc <strcat>
	strcat((char *) buffer, "]\ntype [");
 800079c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80007a0:	f7ff fd14 	bl	80001cc <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007ac:	4413      	add	r3, r2
 80007ae:	4937      	ldr	r1, [pc, #220]	@ (800088c <Utils_getCommandInfoString+0x120>)
 80007b0:	461a      	mov	r2, r3
 80007b2:	460b      	mov	r3, r1
 80007b4:	cb03      	ldmia	r3!, {r0, r1}
 80007b6:	6010      	str	r0, [r2, #0]
 80007b8:	6051      	str	r1, [r2, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	7213      	strb	r3, [r2, #8]
	strcat((char *) buffer, (char *) command.type);
 80007be:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80007c2:	4619      	mov	r1, r3
 80007c4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80007c8:	f004 fe78 	bl	80054bc <strcat>
	strcat((char *) buffer, "]\nname [");
 80007cc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80007d0:	f7ff fcfc 	bl	80001cc <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007dc:	4413      	add	r3, r2
 80007de:	492c      	ldr	r1, [pc, #176]	@ (8000890 <Utils_getCommandInfoString+0x124>)
 80007e0:	461a      	mov	r2, r3
 80007e2:	460b      	mov	r3, r1
 80007e4:	cb03      	ldmia	r3!, {r0, r1}
 80007e6:	6010      	str	r0, [r2, #0]
 80007e8:	6051      	str	r1, [r2, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	7213      	strb	r3, [r2, #8]
	strcat((char *) buffer, (char *) command.name);
 80007ee:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 80007f2:	4619      	mov	r1, r3
 80007f4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80007f8:	f004 fe60 	bl	80054bc <strcat>
	strcat((char *) buffer, "]\nargs [");
 80007fc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000800:	f7ff fce4 	bl	80001cc <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800080c:	4413      	add	r3, r2
 800080e:	4921      	ldr	r1, [pc, #132]	@ (8000894 <Utils_getCommandInfoString+0x128>)
 8000810:	461a      	mov	r2, r3
 8000812:	460b      	mov	r3, r1
 8000814:	cb03      	ldmia	r3!, {r0, r1}
 8000816:	6010      	str	r0, [r2, #0]
 8000818:	6051      	str	r1, [r2, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	7213      	strb	r3, [r2, #8]
	for (uint32_t i = 0; i < COMMAND_MAX_ARGS; i++)
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	e024      	b.n	800086e <Utils_getCommandInfoString+0x102>
	{
		if (strcmp((char *) command.args[i], "") != 0)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	3330      	adds	r3, #48	@ 0x30
 800082a:	3310      	adds	r3, #16
 800082c:	443b      	add	r3, r7
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d018      	beq.n	8000868 <Utils_getCommandInfoString+0xfc>
		{
			strcat((char *) buffer, (char *) command.args[i]);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	015b      	lsls	r3, r3, #5
 800083a:	3330      	adds	r3, #48	@ 0x30
 800083c:	3310      	adds	r3, #16
 800083e:	443b      	add	r3, r7
 8000840:	3301      	adds	r3, #1
 8000842:	4619      	mov	r1, r3
 8000844:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000848:	f004 fe38 	bl	80054bc <strcat>
			strcat((char *) buffer, "|");
 800084c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000850:	f7ff fcbc 	bl	80001cc <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800085c:	4413      	add	r3, r2
 800085e:	490e      	ldr	r1, [pc, #56]	@ (8000898 <Utils_getCommandInfoString+0x12c>)
 8000860:	461a      	mov	r2, r3
 8000862:	460b      	mov	r3, r1
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	8013      	strh	r3, [r2, #0]
	for (uint32_t i = 0; i < COMMAND_MAX_ARGS; i++)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d9d7      	bls.n	8000824 <Utils_getCommandInfoString+0xb8>
		}
	}

	return buffer;
 8000874:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000882:	b004      	add	sp, #16
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	0800557c 	.word	0x0800557c
 800088c:	08005584 	.word	0x08005584
 8000890:	08005590 	.word	0x08005590
 8000894:	0800559c 	.word	0x0800559c
 8000898:	080055a8 	.word	0x080055a8

0800089c <Utils_setCommandPartByIndex>:

Commands_Error_t Utils_setCommandPartByIndex(Command_t *command_ptr, uint32_t index, uint8_t *str)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	switch (index) {
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d01b      	beq.n	80008e6 <Utils_setCommandPartByIndex+0x4a>
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d821      	bhi.n	80008f8 <Utils_setCommandPartByIndex+0x5c>
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <Utils_setCommandPartByIndex+0x26>
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d009      	beq.n	80008d4 <Utils_setCommandPartByIndex+0x38>
 80008c0:	e01a      	b.n	80008f8 <Utils_setCommandPartByIndex+0x5c>
		case 0:
			strncpy((char *) command_ptr->destination, (char *) str, COMMAND_DESTINATION_MAX_LENGTH);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	2210      	movs	r2, #16
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fe05 	bl	80054da <strncpy>
			return CMD_ERROR_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	e024      	b.n	800091e <Utils_setCommandPartByIndex+0x82>
			break;

		case 1:
			strncpy((char *) command_ptr->type, (char *) str, COMMAND_TYPE_MAX_LENGTH);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3311      	adds	r3, #17
 80008d8:	2210      	movs	r2, #16
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 fdfc 	bl	80054da <strncpy>
			return CMD_ERROR_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e01b      	b.n	800091e <Utils_setCommandPartByIndex+0x82>
			break;

		case 2:
			strncpy((char *) command_ptr->name, (char *) str, COMMAND_NAME_MAX_LENGTH);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3321      	adds	r3, #33	@ 0x21
 80008ea:	2210      	movs	r2, #16
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fdf3 	bl	80054da <strncpy>
			return CMD_ERROR_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	e012      	b.n	800091e <Utils_setCommandPartByIndex+0x82>
			break;

		default:
			// Check if argument can exist (index not too big)
			if (index - 3 >= COMMAND_MAX_ARGS)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3b03      	subs	r3, #3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d901      	bls.n	8000904 <Utils_setCommandPartByIndex+0x68>
			{
				return CMD_ERROR_INVALID_ARGS;
 8000900:	2304      	movs	r3, #4
 8000902:	e00c      	b.n	800091e <Utils_setCommandPartByIndex+0x82>
			}

			strncpy((char *) command_ptr->args[index - 3], (char *) str, COMMAND_ARG_MAX_LENGTH);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3b03      	subs	r3, #3
 8000908:	015b      	lsls	r3, r3, #5
 800090a:	3330      	adds	r3, #48	@ 0x30
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	3301      	adds	r3, #1
 8000912:	2220      	movs	r2, #32
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fddf 	bl	80054da <strncpy>
			return CMD_ERROR_OK;
 800091c:	2300      	movs	r3, #0

			break;
	}

	return CMD_ERROR_COULD_NOT_PARSE;
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <Utils_printToUart2>:

	return CMD_ERROR_OK;
}

void Utils_printToUart2(uint8_t* string)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, string, strlen((char *) string));
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fc4b 	bl	80001cc <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	b29b      	uxth	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4803      	ldr	r0, [pc, #12]	@ (800094c <Utils_printToUart2+0x24>)
 8000940:	f003 fa34 	bl	8003dac <HAL_UART_Transmit_DMA>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000204 	.word	0x20000204

08000950 <Utils_printCommandError>:

void Utils_printCommandError(Commands_Error_t error)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	switch (error) {
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	3b01      	subs	r3, #1
 800095e:	2b07      	cmp	r3, #7
 8000960:	d832      	bhi.n	80009c8 <Utils_printCommandError+0x78>
 8000962:	a201      	add	r2, pc, #4	@ (adr r2, 8000968 <Utils_printCommandError+0x18>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	08000989 	.word	0x08000989
 800096c:	08000991 	.word	0x08000991
 8000970:	08000999 	.word	0x08000999
 8000974:	080009a1 	.word	0x080009a1
 8000978:	080009a9 	.word	0x080009a9
 800097c:	080009b1 	.word	0x080009b1
 8000980:	080009b9 	.word	0x080009b9
 8000984:	080009c1 	.word	0x080009c1
		case CMD_ERROR_INVALID_DESTINATION:
			Utils_printToUart2((uint8_t *) "[Error] Invalid command destination\n");
 8000988:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <Utils_printCommandError+0x88>)
 800098a:	f7ff ffcd 	bl	8000928 <Utils_printToUart2>
			break;
 800098e:	e01f      	b.n	80009d0 <Utils_printCommandError+0x80>
		case CMD_ERROR_INVALID_TYPE:
			Utils_printToUart2((uint8_t *) "[Error] Invalid command type\n");
 8000990:	4812      	ldr	r0, [pc, #72]	@ (80009dc <Utils_printCommandError+0x8c>)
 8000992:	f7ff ffc9 	bl	8000928 <Utils_printToUart2>
			break;
 8000996:	e01b      	b.n	80009d0 <Utils_printCommandError+0x80>
		case CMD_ERROR_INVALID_NAME:
			Utils_printToUart2((uint8_t *) "[Error] Invalid command name\n");
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <Utils_printCommandError+0x90>)
 800099a:	f7ff ffc5 	bl	8000928 <Utils_printToUart2>
			break;
 800099e:	e017      	b.n	80009d0 <Utils_printCommandError+0x80>
		case CMD_ERROR_INVALID_ARGS:
			Utils_printToUart2((uint8_t *) "[Error] Invalid arguments given\n");
 80009a0:	4810      	ldr	r0, [pc, #64]	@ (80009e4 <Utils_printCommandError+0x94>)
 80009a2:	f7ff ffc1 	bl	8000928 <Utils_printToUart2>
			break;
 80009a6:	e013      	b.n	80009d0 <Utils_printCommandError+0x80>
		case CMD_ERROR_COMMAND_TOO_LONG:
			Utils_printToUart2((uint8_t *) "[Error] Command is too long\n");
 80009a8:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <Utils_printCommandError+0x98>)
 80009aa:	f7ff ffbd 	bl	8000928 <Utils_printToUart2>
			break;
 80009ae:	e00f      	b.n	80009d0 <Utils_printCommandError+0x80>
		case CMD_ERROR_COULD_NOT_PARSE:
			Utils_printToUart2((uint8_t *) "[Error] Could not parse command\n");
 80009b0:	480e      	ldr	r0, [pc, #56]	@ (80009ec <Utils_printCommandError+0x9c>)
 80009b2:	f7ff ffb9 	bl	8000928 <Utils_printToUart2>
			break;
 80009b6:	e00b      	b.n	80009d0 <Utils_printCommandError+0x80>
		case CMD_ERROR_UNKNOWN:
			Utils_printToUart2((uint8_t *) "[Error] Unspecified error\n");
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <Utils_printCommandError+0xa0>)
 80009ba:	f7ff ffb5 	bl	8000928 <Utils_printToUart2>
			break;
 80009be:	e007      	b.n	80009d0 <Utils_printCommandError+0x80>

		case CMD_ERROR_NOT_IMPLEMENTED:
			Utils_printToUart2((uint8_t *) "[Error] Not implemented\n");
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <Utils_printCommandError+0xa4>)
 80009c2:	f7ff ffb1 	bl	8000928 <Utils_printToUart2>
			break;
 80009c6:	e003      	b.n	80009d0 <Utils_printCommandError+0x80>

		default:
			Utils_printToUart2((uint8_t *) "[Error] no error message (default case) \n");
 80009c8:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <Utils_printCommandError+0xa8>)
 80009ca:	f7ff ffad 	bl	8000928 <Utils_printToUart2>
			break;
 80009ce:	bf00      	nop
	}
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	080055ac 	.word	0x080055ac
 80009dc:	080055d4 	.word	0x080055d4
 80009e0:	080055f4 	.word	0x080055f4
 80009e4:	08005614 	.word	0x08005614
 80009e8:	08005638 	.word	0x08005638
 80009ec:	08005658 	.word	0x08005658
 80009f0:	0800567c 	.word	0x0800567c
 80009f4:	08005698 	.word	0x08005698
 80009f8:	080056b4 	.word	0x080056b4

080009fc <Motors_Init>:

/////// Functions definitions //////


void Motors_Init()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; ++i)
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	e026      	b.n	8000a56 <Motors_Init+0x5a>
	{
		motor_states[i].direction = DIR_FORWARD;
 8000a08:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <Motors_Init+0x6c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4413      	add	r3, r2
 8000a10:	2200      	movs	r2, #0
 8000a12:	711a      	strb	r2, [r3, #4]
		motor_states[i].enabled = false;
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <Motors_Init+0x6c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	715a      	strb	r2, [r3, #5]
		motor_states[i].step_period_us = 0;
 8000a20:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <Motors_Init+0x6c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2100      	movs	r1, #0
 8000a26:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

		// IT Not handled by update()
		HAL_TIM_Base_Stop_IT(MOT_TIM_HANDLE_PTR(i));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d00b      	beq.n	8000a48 <Motors_Init+0x4c>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d006      	beq.n	8000a44 <Motors_Init+0x48>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <Motors_Init+0x44>
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <Motors_Init+0x70>)
 8000a3e:	e004      	b.n	8000a4a <Motors_Init+0x4e>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e002      	b.n	8000a4a <Motors_Init+0x4e>
 8000a44:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <Motors_Init+0x74>)
 8000a46:	e000      	b.n	8000a4a <Motors_Init+0x4e>
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <Motors_Init+0x78>)
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd5e 	bl	800350c <HAL_TIM_Base_Stop_IT>
	for (int i = 0; i < 3; ++i)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	ddd5      	ble.n	8000a08 <Motors_Init+0xc>
	}

	Motors_Update();
 8000a5c:	f000 f878 	bl	8000b50 <Motors_Update>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000104 	.word	0x20000104
 8000a6c:	20000120 	.word	0x20000120
 8000a70:	2000016c 	.word	0x2000016c
 8000a74:	200001b8 	.word	0x200001b8

08000a78 <Motors_SetSpeedSingle>:

void Motors_SetSpeedSingle(uint8_t motor_index, MotorDirection_t direction, uint32_t step_period_us)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	603a      	str	r2, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	460b      	mov	r3, r1
 8000a86:	71bb      	strb	r3, [r7, #6]
	motor_states[motor_index].direction = direction;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <Motors_SetSpeedSingle+0x80>)
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	4413      	add	r3, r2
 8000a90:	79ba      	ldrb	r2, [r7, #6]
 8000a92:	711a      	strb	r2, [r3, #4]
	motor_states[motor_index].step_period_us = step_period_us;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4918      	ldr	r1, [pc, #96]	@ (8000af8 <Motors_SetSpeedSingle+0x80>)
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	motor_states[motor_index].enabled = true;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <Motors_SetSpeedSingle+0x80>)
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	715a      	strb	r2, [r3, #5]

	// Activate IT if needed
	if (!motor_it_enabled[motor_index] && step_period_us != 0)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <Motors_SetSpeedSingle+0x84>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d019      	beq.n	8000aee <Motors_SetSpeedSingle+0x76>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d016      	beq.n	8000aee <Motors_SetSpeedSingle+0x76>
	{
		motor_it_enabled[motor_index] = true;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <Motors_SetSpeedSingle+0x84>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	54d1      	strb	r1, [r2, r3]
		HAL_TIM_Base_Start_IT(MOT_TIM_HANDLE_PTR(motor_index));
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d00b      	beq.n	8000ae6 <Motors_SetSpeedSingle+0x6e>
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d006      	beq.n	8000ae2 <Motors_SetSpeedSingle+0x6a>
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <Motors_SetSpeedSingle+0x66>
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <Motors_SetSpeedSingle+0x88>)
 8000adc:	e004      	b.n	8000ae8 <Motors_SetSpeedSingle+0x70>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e002      	b.n	8000ae8 <Motors_SetSpeedSingle+0x70>
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <Motors_SetSpeedSingle+0x8c>)
 8000ae4:	e000      	b.n	8000ae8 <Motors_SetSpeedSingle+0x70>
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <Motors_SetSpeedSingle+0x90>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fcbb 	bl	8003464 <HAL_TIM_Base_Start_IT>
	}
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000104 	.word	0x20000104
 8000afc:	2000011c 	.word	0x2000011c
 8000b00:	20000120 	.word	0x20000120
 8000b04:	2000016c 	.word	0x2000016c
 8000b08:	200001b8 	.word	0x200001b8

08000b0c <Motors_SetSpeedAll>:
		HAL_TIM_Base_Stop_IT(MOT_TIM_HANDLE_PTR(motor_index));
	}
}

void Motors_SetSpeedAll(MotorDirection_t *directions, uint32_t *step_periods_us)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; ++i)
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e010      	b.n	8000b3e <Motors_SetSpeedAll+0x32>
	{
		Motors_SetSpeedSingle(i, directions[i], step_periods_us[i]);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	b2d8      	uxtb	r0, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	7819      	ldrb	r1, [r3, #0]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	f7ff ffa0 	bl	8000a78 <Motors_SetSpeedSingle>
	for (int i = 0; i < 3; ++i)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	ddeb      	ble.n	8000b1c <Motors_SetSpeedAll+0x10>
	}
	Motors_Update();
 8000b44:	f000 f804 	bl	8000b50 <Motors_Update>
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Motors_Update>:

/**
 * @brief Update the motors timer overflow and dir pins to match the contents of the motor_states array
 */
void Motors_Update()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; ++i)
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e0c2      	b.n	8000ce2 <Motors_Update+0x192>
	{
		// Timer overflow //
		if (motor_states[i].step_period_us >= MOTORS_MIN_PERIOD_US && motor_states[i].step_period_us <= MOTORS_MAX_PERIOD_US)
 8000b5c:	4a65      	ldr	r2, [pc, #404]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b64:	2b63      	cmp	r3, #99	@ 0x63
 8000b66:	d932      	bls.n	8000bce <Motors_Update+0x7e>
 8000b68:	4a62      	ldr	r2, [pc, #392]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b74:	d22b      	bcs.n	8000bce <Motors_Update+0x7e>
		{
			__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), (uint32_t)(motor_states[i].step_period_us));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d00b      	beq.n	8000b94 <Motors_Update+0x44>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d006      	beq.n	8000b90 <Motors_Update+0x40>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <Motors_Update+0x3c>
 8000b88:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <Motors_Update+0x1a8>)
 8000b8a:	e004      	b.n	8000b96 <Motors_Update+0x46>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e002      	b.n	8000b96 <Motors_Update+0x46>
 8000b90:	4b5a      	ldr	r3, [pc, #360]	@ (8000cfc <Motors_Update+0x1ac>)
 8000b92:	e000      	b.n	8000b96 <Motors_Update+0x46>
 8000b94:	4b5a      	ldr	r3, [pc, #360]	@ (8000d00 <Motors_Update+0x1b0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4956      	ldr	r1, [pc, #344]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d00b      	beq.n	8000bc0 <Motors_Update+0x70>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d006      	beq.n	8000bbc <Motors_Update+0x6c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d101      	bne.n	8000bb8 <Motors_Update+0x68>
 8000bb4:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <Motors_Update+0x1a8>)
 8000bb6:	e004      	b.n	8000bc2 <Motors_Update+0x72>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e002      	b.n	8000bc2 <Motors_Update+0x72>
 8000bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8000cfc <Motors_Update+0x1ac>)
 8000bbe:	e000      	b.n	8000bc2 <Motors_Update+0x72>
 8000bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d00 <Motors_Update+0x1b0>)
 8000bc2:	494c      	ldr	r1, [pc, #304]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	e059      	b.n	8000c82 <Motors_Update+0x132>
		}
		else if (motor_states[i].step_period_us > MOTORS_MAX_PERIOD_US)
 8000bce:	4a49      	ldr	r2, [pc, #292]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bda:	d327      	bcc.n	8000c2c <Motors_Update+0xdc>
		{
			__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), (uint32_t)(MOTORS_MAX_PERIOD_US));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d00b      	beq.n	8000bfa <Motors_Update+0xaa>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d006      	beq.n	8000bf6 <Motors_Update+0xa6>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <Motors_Update+0xa2>
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <Motors_Update+0x1a8>)
 8000bf0:	e004      	b.n	8000bfc <Motors_Update+0xac>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e002      	b.n	8000bfc <Motors_Update+0xac>
 8000bf6:	4b41      	ldr	r3, [pc, #260]	@ (8000cfc <Motors_Update+0x1ac>)
 8000bf8:	e000      	b.n	8000bfc <Motors_Update+0xac>
 8000bfa:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <Motors_Update+0x1b0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d00b      	beq.n	8000c22 <Motors_Update+0xd2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d006      	beq.n	8000c1e <Motors_Update+0xce>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <Motors_Update+0xca>
 8000c16:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <Motors_Update+0x1a8>)
 8000c18:	e004      	b.n	8000c24 <Motors_Update+0xd4>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e002      	b.n	8000c24 <Motors_Update+0xd4>
 8000c1e:	4b37      	ldr	r3, [pc, #220]	@ (8000cfc <Motors_Update+0x1ac>)
 8000c20:	e000      	b.n	8000c24 <Motors_Update+0xd4>
 8000c22:	4b37      	ldr	r3, [pc, #220]	@ (8000d00 <Motors_Update+0x1b0>)
 8000c24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	e02a      	b.n	8000c82 <Motors_Update+0x132>
		}
		else if (motor_states[i].step_period_us < MOTORS_MIN_PERIOD_US)
 8000c2c:	4a31      	ldr	r2, [pc, #196]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c34:	2b63      	cmp	r3, #99	@ 0x63
 8000c36:	d824      	bhi.n	8000c82 <Motors_Update+0x132>
		{
			__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), (uint32_t)(MOTORS_MIN_PERIOD_US));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d00b      	beq.n	8000c56 <Motors_Update+0x106>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d006      	beq.n	8000c52 <Motors_Update+0x102>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <Motors_Update+0xfe>
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <Motors_Update+0x1a8>)
 8000c4c:	e004      	b.n	8000c58 <Motors_Update+0x108>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e002      	b.n	8000c58 <Motors_Update+0x108>
 8000c52:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <Motors_Update+0x1ac>)
 8000c54:	e000      	b.n	8000c58 <Motors_Update+0x108>
 8000c56:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <Motors_Update+0x1b0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2264      	movs	r2, #100	@ 0x64
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d00b      	beq.n	8000c7c <Motors_Update+0x12c>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d006      	beq.n	8000c78 <Motors_Update+0x128>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <Motors_Update+0x124>
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <Motors_Update+0x1a8>)
 8000c72:	e004      	b.n	8000c7e <Motors_Update+0x12e>
 8000c74:	2300      	movs	r3, #0
 8000c76:	e002      	b.n	8000c7e <Motors_Update+0x12e>
 8000c78:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <Motors_Update+0x1ac>)
 8000c7a:	e000      	b.n	8000c7e <Motors_Update+0x12e>
 8000c7c:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <Motors_Update+0x1b0>)
 8000c7e:	2264      	movs	r2, #100	@ 0x64
 8000c80:	60da      	str	r2, [r3, #12]
		}

		// Direction pin state
		HAL_GPIO_WritePin(MOT_DIR_GPIO_PORT(i), MOT_DIR_GPIO_PIN(i), motor_states[i].direction);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d00d      	beq.n	8000ca4 <Motors_Update+0x154>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d007      	beq.n	8000c9e <Motors_Update+0x14e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <Motors_Update+0x14a>
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c98:	e006      	b.n	8000ca8 <Motors_Update+0x158>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	e004      	b.n	8000ca8 <Motors_Update+0x158>
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca2:	e001      	b.n	8000ca8 <Motors_Update+0x158>
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d00c      	beq.n	8000cc8 <Motors_Update+0x178>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d007      	beq.n	8000cc4 <Motors_Update+0x174>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf0c      	ite	eq
 8000cba:	2301      	moveq	r3, #1
 8000cbc:	2300      	movne	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	e003      	b.n	8000ccc <Motors_Update+0x17c>
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	e001      	b.n	8000ccc <Motors_Update+0x17c>
 8000cc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ccc:	4a09      	ldr	r2, [pc, #36]	@ (8000cf4 <Motors_Update+0x1a4>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f001 f9b6 	bl	8002048 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; ++i)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	f77f af39 	ble.w	8000b5c <Motors_Update+0xc>
	}
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000104 	.word	0x20000104
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	2000016c 	.word	0x2000016c
 8000d00:	200001b8 	.word	0x200001b8

08000d04 <Motors_TimerITCallback>:

void Motors_TimerITCallback(TIM_HandleTypeDef* htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == MOT0_TIM_HANDLE_PTR->Instance)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <Motors_TimerITCallback+0x54>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d105      	bne.n	8000d24 <Motors_TimerITCallback+0x20>
	{
		HAL_GPIO_TogglePin(MOT0_STP_GPIO_Port, MOT0_STP_Pin);
 8000d18:	2102      	movs	r1, #2
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f001 f9ab 	bl	8002078 <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == MOT2_TIM_HANDLE_PTR->Instance)
	{
		HAL_GPIO_TogglePin(MOT2_STP_GPIO_Port, MOT2_STP_Pin);
	}
}
 8000d22:	e015      	b.n	8000d50 <Motors_TimerITCallback+0x4c>
	else if (htim->Instance == MOT1_TIM_HANDLE_PTR->Instance)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <Motors_TimerITCallback+0x58>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d105      	bne.n	8000d3c <Motors_TimerITCallback+0x38>
		HAL_GPIO_TogglePin(MOT1_STP_GPIO_Port, MOT1_STP_Pin);
 8000d30:	2120      	movs	r1, #32
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f001 f99f 	bl	8002078 <HAL_GPIO_TogglePin>
}
 8000d3a:	e009      	b.n	8000d50 <Motors_TimerITCallback+0x4c>
	else if (htim->Instance == MOT2_TIM_HANDLE_PTR->Instance)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <Motors_TimerITCallback+0x5c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d103      	bne.n	8000d50 <Motors_TimerITCallback+0x4c>
		HAL_GPIO_TogglePin(MOT2_STP_GPIO_Port, MOT2_STP_Pin);
 8000d48:	2120      	movs	r1, #32
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <Motors_TimerITCallback+0x60>)
 8000d4c:	f001 f994 	bl	8002078 <HAL_GPIO_TogglePin>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000120 	.word	0x20000120
 8000d5c:	2000016c 	.word	0x2000016c
 8000d60:	200001b8 	.word	0x200001b8
 8000d64:	48000400 	.word	0x48000400

08000d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_DMA_Init+0x38>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d72:	4a0b      	ldr	r2, [pc, #44]	@ (8000da0 <MX_DMA_Init+0x38>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_DMA_Init+0x38>)
 8000d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2011      	movs	r0, #17
 8000d8c:	f000 fd45 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d90:	2011      	movs	r0, #17
 8000d92:	f000 fd5e 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a41      	ldr	r2, [pc, #260]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a35      	ldr	r2, [pc, #212]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b30      	ldr	r3, [pc, #192]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <MX_GPIO_Init+0x120>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT0_DIR_Pin|MOT0_STP_Pin|MOT0_EN_Pin|MOT1_DIR_Pin
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f640 017b 	movw	r1, #2171	@ 0x87b
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f001 f910 	bl	8002048 <HAL_GPIO_WritePin>
                          |MOT1_STP_Pin|MOT1_EN_Pin|MOT2_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|MOT2_EN_Pin|MOT2_STP_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2138      	movs	r1, #56	@ 0x38
 8000e2c:	4826      	ldr	r0, [pc, #152]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e2e:	f001 f90b 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT0_DIR_Pin|MOT0_STP_Pin|MOT0_EN_Pin|MOT1_DIR_Pin
 8000e32:	f640 037b 	movw	r3, #2171	@ 0x87b
 8000e36:	617b      	str	r3, [r7, #20]
                          |MOT1_STP_Pin|MOT1_EN_Pin|MOT2_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4e:	f000 ff91 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e52:	f44f 53bc 	mov.w	r3, #6016	@ 0x1780
 8000e56:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6a:	f000 ff83 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000e6e:	23c3      	movs	r3, #195	@ 0xc3
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e82:	f000 ff77 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|MOT2_EN_Pin|MOT2_STP_Pin;
 8000e86:	2338      	movs	r3, #56	@ 0x38
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480a      	ldr	r0, [pc, #40]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e9e:	f000 ff69 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_GPIO_Init+0x128>)
 8000eb6:	f000 ff5d 	bl	8001d74 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48001c00 	.word	0x48001c00

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	MotorDirection_t dirs[3] = {DIR_FORWARD, DIR_FORWARD, DIR_BACKWARD};
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	733b      	strb	r3, [r7, #12]
 8000eda:	2300      	movs	r3, #0
 8000edc:	737b      	strb	r3, [r7, #13]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73bb      	strb	r3, [r7, #14]
	uint32_t periods[3] = {10000, 10000, 10000};
 8000ee2:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <main+0x64>)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eec:	f000 fb45 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f828 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f7ff ff56 	bl	8000da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef8:	f7ff ff36 	bl	8000d68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 fa44 	bl	8001388 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f00:	f000 f92c 	bl	800115c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000f04:	f000 f978 	bl	80011f8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f08:	f000 f9ac 	bl	8001264 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Motors_Init();
 8000f0c:	f7ff fd76 	bl	80009fc <Motors_Init>
  HAL_UART_Receive_IT(&huart2, &(command_buffer[0]), 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	4909      	ldr	r1, [pc, #36]	@ (8000f38 <main+0x68>)
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <main+0x6c>)
 8000f16:	f002 fefd 	bl	8003d14 <HAL_UART_Receive_IT>

  Motors_SetSpeedAll(dirs, periods);
 8000f1a:	463a      	mov	r2, r7
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fdf2 	bl	8000b0c <Motors_SetSpeedAll>
  Utils_printToUart2((uint8_t *) "Init OK\n");
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <main+0x70>)
 8000f2a:	f7ff fcfd 	bl	8000928 <Utils_printToUart2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2e:	bf00      	nop
 8000f30:	e7fd      	b.n	8000f2e <main+0x5e>
 8000f32:	bf00      	nop
 8000f34:	080056ec 	.word	0x080056ec
 8000f38:	20000028 	.word	0x20000028
 8000f3c:	20000204 	.word	0x20000204
 8000f40:	080056e0 	.word	0x080056e0

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	@ 0x58
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2244      	movs	r2, #68	@ 0x44
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 faaa 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f6a:	f001 f8ad 	bl	80020c8 <HAL_PWREx_ControlVoltageScaling>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f74:	f000 f854 	bl	8001020 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f82:	2310      	movs	r3, #16
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f92:	2310      	movs	r3, #16
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f96:	2307      	movs	r3, #7
 8000f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 f8e4 	bl	8002174 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fb2:	f000 f835 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2103      	movs	r1, #3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fce4 	bl	800299c <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fda:	f000 f821 	bl	8001020 <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3758      	adds	r7, #88	@ 0x58
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//////// TIMER INTERRUPTS ///////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	// Callback for motor control (Impulses for the stepper)
	Motors_TimerITCallback(htim);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe88 	bl	8000d04 <Motors_TimerITCallback>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_UART_RxCpltCallback+0x20>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d102      	bne.n	8001014 <HAL_UART_RxCpltCallback+0x18>
	{
		Commands_RxCallback(huart);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fa8a 	bl	8000528 <Commands_RxCallback>
	}
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40004400 	.word	0x40004400

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6613      	str	r3, [r2, #96]	@ 0x60
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 faab 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <DMA1_Channel7_IRQHandler+0x10>)
 80010da:	f000 fd6c 	bl	8001bb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000028c 	.word	0x2000028c

080010e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM2_IRQHandler+0x10>)
 80010ee:	f002 fa3c 	bl	800356a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000120 	.word	0x20000120

080010fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <USART2_IRQHandler+0x10>)
 8001102:	f002 fecf 	bl	8003ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000204 	.word	0x20000204

08001110 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM6_DAC_IRQHandler+0x10>)
 8001116:	f002 fa28 	bl	800356a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000016c 	.word	0x2000016c

08001124 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM7_IRQHandler+0x10>)
 800112a:	f002 fa1e 	bl	800356a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001b8 	.word	0x200001b8

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_TIM2_Init+0x98>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_TIM2_Init+0x98>)
 8001184:	223f      	movs	r2, #63	@ 0x3f
 8001186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_TIM2_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_TIM2_Init+0x98>)
 8001190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <MX_TIM2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <MX_TIM2_Init+0x98>)
 80011a4:	f002 f906 	bl	80033b4 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011ae:	f7ff ff37 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <MX_TIM2_Init+0x98>)
 80011c0:	f002 fada 	bl	8003778 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ca:	f7ff ff29 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <MX_TIM2_Init+0x98>)
 80011dc:	f002 fcc8 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011e6:	f7ff ff1b 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000120 	.word	0x20000120

080011f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_TIM6_Init+0x64>)
 800120a:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <MX_TIM6_Init+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_TIM6_Init+0x64>)
 8001210:	223f      	movs	r2, #63	@ 0x3f
 8001212:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_TIM6_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_TIM6_Init+0x64>)
 800121c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001220:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_TIM6_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <MX_TIM6_Init+0x64>)
 800122a:	f002 f8c3 	bl	80033b4 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001234:	f7ff fef4 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_TIM6_Init+0x64>)
 8001246:	f002 fc93 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001250:	f7ff fee6 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000016c 	.word	0x2000016c
 8001260:	40001000 	.word	0x40001000

08001264 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_TIM7_Init+0x64>)
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <MX_TIM7_Init+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_TIM7_Init+0x64>)
 800127c:	223f      	movs	r2, #63	@ 0x3f
 800127e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_TIM7_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_TIM7_Init+0x64>)
 8001288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_TIM7_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_TIM7_Init+0x64>)
 8001296:	f002 f88d 	bl	80033b4 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80012a0:	f7ff febe 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_TIM7_Init+0x64>)
 80012b2:	f002 fc5d 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f7ff feb0 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001b8 	.word	0x200001b8
 80012cc:	40001400 	.word	0x40001400

080012d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e0:	d114      	bne.n	800130c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	4a25      	ldr	r2, [pc, #148]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	201c      	movs	r0, #28
 8001300:	f000 fa8b 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001304:	201c      	movs	r0, #28
 8001306:	f000 faa4 	bl	8001852 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800130a:	e032      	b.n	8001372 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <HAL_TIM_Base_MspInit+0xb0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2036      	movs	r0, #54	@ 0x36
 8001334:	f000 fa71 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001338:	2036      	movs	r0, #54	@ 0x36
 800133a:	f000 fa8a 	bl	8001852 <HAL_NVIC_EnableIRQ>
}
 800133e:	e018      	b.n	8001372 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d113      	bne.n	8001372 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	6593      	str	r3, [r2, #88]	@ 0x58
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_TIM_Base_MspInit+0xac>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2037      	movs	r0, #55	@ 0x37
 8001368:	f000 fa57 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800136c:	2037      	movs	r0, #55	@ 0x37
 800136e:	f000 fa70 	bl	8001852 <HAL_NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	40001000 	.word	0x40001000
 8001384:	40001400 	.word	0x40001400

08001388 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 800138e:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <MX_USART2_UART_Init+0x5c>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_USART2_UART_Init+0x58>)
 80013cc:	f002 fc54 	bl	8003c78 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013d6:	f7ff fe23 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000204 	.word	0x20000204
 80013e4:	40004400 	.word	0x40004400

080013e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b09e      	sub	sp, #120	@ 0x78
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2254      	movs	r2, #84	@ 0x54
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f84f 	bl	80054ac <memset>
  if(uartHandle->Instance==USART2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a41      	ldr	r2, [pc, #260]	@ (8001518 <HAL_UART_MspInit+0x130>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d17a      	bne.n	800150e <HAL_UART_MspInit+0x126>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fcdd 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001430:	f7ff fdf6 	bl	8001020 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_UART_MspInit+0x134>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	4a38      	ldr	r2, [pc, #224]	@ (800151c <HAL_UART_MspInit+0x134>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001440:	4b36      	ldr	r3, [pc, #216]	@ (800151c <HAL_UART_MspInit+0x134>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b33      	ldr	r3, [pc, #204]	@ (800151c <HAL_UART_MspInit+0x134>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	4a32      	ldr	r2, [pc, #200]	@ (800151c <HAL_UART_MspInit+0x134>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <HAL_UART_MspInit+0x134>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001464:	2304      	movs	r3, #4
 8001466:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001474:	2307      	movs	r3, #7
 8001476:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f000 fc77 	bl	8001d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800148a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001498:	2303      	movs	r3, #3
 800149a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f000 fc65 	bl	8001d74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014b2:	2202      	movs	r2, #2
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014b8:	2210      	movs	r2, #16
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014e2:	480f      	ldr	r0, [pc, #60]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014e4:	f000 f9d0 	bl	8001888 <HAL_DMA_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80014ee:	f7ff fd97 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80014f8:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_UART_MspInit+0x138>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2026      	movs	r0, #38	@ 0x26
 8001504:	f000 f989 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001508:	2026      	movs	r0, #38	@ 0x26
 800150a:	f000 f9a2 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3778      	adds	r7, #120	@ 0x78
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40004400 	.word	0x40004400
 800151c:	40021000 	.word	0x40021000
 8001520:	2000028c 	.word	0x2000028c
 8001524:	40020080 	.word	0x40020080

08001528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001560 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800152c:	f7ff fe04 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <LoopForever+0x6>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <LoopForever+0xe>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	@ (8001574 <LoopForever+0x16>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f003 ffd3 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155a:	f7ff fcb9 	bl	8000ed0 <main>

0800155e <LoopForever>:

LoopForever:
    b LoopForever
 800155e:	e7fe      	b.n	800155e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001560:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800156c:	08005750 	.word	0x08005750
  ldr r2, =_sbss
 8001570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001574:	200002d8 	.word	0x200002d8

08001578 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_IRQHandler>

0800157a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f93d 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f80e 	bl	80015ac <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159c:	f7ff fd46 	bl	800102c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_InitTick+0x70>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_InitTick+0x6c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f949 	bl	800186e <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d809      	bhi.n	80015fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f913 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_InitTick+0x74>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e007      	b.n	800160c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e004      	b.n	800160c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e001      	b.n	800160c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	200002d4 	.word	0x200002d4

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200002d4 	.word	0x200002d4

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff3e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff31 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e098      	b.n	80019cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <HAL_DMA_Init+0x150>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d80f      	bhi.n	80018c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b4b      	ldr	r3, [pc, #300]	@ (80019dc <HAL_DMA_Init+0x154>)
 80018ae:	4413      	add	r3, r2
 80018b0:	4a4b      	ldr	r2, [pc, #300]	@ (80019e0 <HAL_DMA_Init+0x158>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a48      	ldr	r2, [pc, #288]	@ (80019e4 <HAL_DMA_Init+0x15c>)
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c4:	e00e      	b.n	80018e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b46      	ldr	r3, [pc, #280]	@ (80019e8 <HAL_DMA_Init+0x160>)
 80018ce:	4413      	add	r3, r2
 80018d0:	4a43      	ldr	r2, [pc, #268]	@ (80019e0 <HAL_DMA_Init+0x158>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	009a      	lsls	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a42      	ldr	r2, [pc, #264]	@ (80019ec <HAL_DMA_Init+0x164>)
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800193e:	d039      	beq.n	80019b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a27      	ldr	r2, [pc, #156]	@ (80019e4 <HAL_DMA_Init+0x15c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d11a      	bne.n	8001980 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800194a:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <HAL_DMA_Init+0x168>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f003 031c 	and.w	r3, r3, #28
 8001956:	210f      	movs	r1, #15
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4924      	ldr	r1, [pc, #144]	@ (80019f0 <HAL_DMA_Init+0x168>)
 8001960:	4013      	ands	r3, r2
 8001962:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_DMA_Init+0x168>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	f003 031c 	and.w	r3, r3, #28
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	491d      	ldr	r1, [pc, #116]	@ (80019f0 <HAL_DMA_Init+0x168>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
 800197e:	e019      	b.n	80019b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_DMA_Init+0x16c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	f003 031c 	and.w	r3, r3, #28
 800198c:	210f      	movs	r1, #15
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	4917      	ldr	r1, [pc, #92]	@ (80019f4 <HAL_DMA_Init+0x16c>)
 8001996:	4013      	ands	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_DMA_Init+0x16c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f003 031c 	and.w	r3, r3, #28
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	4911      	ldr	r1, [pc, #68]	@ (80019f4 <HAL_DMA_Init+0x16c>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40020407 	.word	0x40020407
 80019dc:	bffdfff8 	.word	0xbffdfff8
 80019e0:	cccccccd 	.word	0xcccccccd
 80019e4:	40020000 	.word	0x40020000
 80019e8:	bffdfbf8 	.word	0xbffdfbf8
 80019ec:	40020400 	.word	0x40020400
 80019f0:	400200a8 	.word	0x400200a8
 80019f4:	400204a8 	.word	0x400204a8

080019f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_DMA_Start_IT+0x20>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e04b      	b.n	8001ab0 <HAL_DMA_Start_IT+0xb8>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d13a      	bne.n	8001aa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f95f 	bl	8001d14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 020e 	orr.w	r2, r2, #14
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e00f      	b.n	8001a90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 020a 	orr.w	r2, r2, #10
 8001a8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d008      	beq.n	8001ae2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e022      	b.n	8001b28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 020e 	bic.w	r2, r2, #14
 8001af0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 021c 	and.w	r2, r3, #28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d005      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e029      	b.n	8001bac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 020e 	bic.w	r2, r2, #14
 8001b66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7c:	f003 021c 	and.w	r2, r3, #28
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
    }
  }
  return status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	f003 031c 	and.w	r3, r3, #28
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d026      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x7a>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d021      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0204 	bic.w	r2, r2, #4
 8001c08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f003 021c 	and.w	r2, r3, #28
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	2104      	movs	r1, #4
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d071      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c2e:	e06c      	b.n	8001d0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	f003 031c 	and.w	r3, r3, #28
 8001c38:	2202      	movs	r2, #2
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02e      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xec>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d029      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020a 	bic.w	r2, r2, #10
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	f003 021c 	and.w	r2, r3, #28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	2102      	movs	r1, #2
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d038      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ca0:	e033      	b.n	8001d0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f003 031c 	and.w	r3, r3, #28
 8001caa:	2208      	movs	r2, #8
 8001cac:	409a      	lsls	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d02a      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x156>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d025      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 020e 	bic.w	r2, r2, #14
 8001cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	f003 021c 	and.w	r2, r3, #28
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
}
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f003 021c 	and.w	r2, r3, #28
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d108      	bne.n	8001d58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d56:	e007      	b.n	8001d68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	e148      	b.n	8002016 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 813a 	beq.w	8002010 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d005      	beq.n	8001db4 <HAL_GPIO_Init+0x40>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d130      	bne.n	8001e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dea:	2201      	movs	r2, #1
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 0201 	and.w	r2, r3, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d017      	beq.n	8001e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d123      	bne.n	8001ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0203 	and.w	r2, r3, #3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8094 	beq.w	8002010 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee8:	4b52      	ldr	r3, [pc, #328]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eec:	4a51      	ldr	r2, [pc, #324]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_Init+0x1d4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a43      	ldr	r2, [pc, #268]	@ (800203c <HAL_GPIO_Init+0x2c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_Init+0x1d0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a42      	ldr	r2, [pc, #264]	@ (8002040 <HAL_GPIO_Init+0x2cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_Init+0x1cc>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_Init+0x1d6>
 8001f40:	2307      	movs	r3, #7
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x1d6>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_Init+0x1d6>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f5a:	4937      	ldr	r1, [pc, #220]	@ (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f68:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f92:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb6:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800200a:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f aeaf 	bne.w	8001d84 <HAL_GPIO_Init+0x10>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	48000400 	.word	0x48000400
 8002040:	48000800 	.word	0x48000800
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002064:	e002      	b.n	800206c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43d9      	mvns	r1, r3
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	400b      	ands	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40007000 	.word	0x40007000

080020c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d6:	d130      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e4:	d038      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2232      	movs	r2, #50	@ 0x32
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4a1b      	ldr	r2, [pc, #108]	@ (8002170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210c:	e002      	b.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002120:	d102      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f2      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002134:	d110      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e00f      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d007      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002148:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002150:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40007000 	.word	0x40007000
 800216c:	20000000 	.word	0x20000000
 8002170:	431bde83 	.word	0x431bde83

08002174 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f000 bc02 	b.w	800298c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002188:	4b96      	ldr	r3, [pc, #600]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002192:	4b94      	ldr	r3, [pc, #592]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80e4 	beq.w	8002372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4c>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	f040 808b 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 8087 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c0:	4b88      	ldr	r3, [pc, #544]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x64>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e3d9      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4b81      	ldr	r3, [pc, #516]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_RCC_OscConfig+0x7e>
 80021e8:	4b7e      	ldr	r3, [pc, #504]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021f0:	e005      	b.n	80021fe <HAL_RCC_OscConfig+0x8a>
 80021f2:	4b7c      	ldr	r3, [pc, #496]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021fe:	4293      	cmp	r3, r2
 8002200:	d223      	bcs.n	800224a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd8c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ba      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002216:	4b73      	ldr	r3, [pc, #460]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a72      	ldr	r2, [pc, #456]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b70      	ldr	r3, [pc, #448]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	496d      	ldr	r1, [pc, #436]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4b6b      	ldr	r3, [pc, #428]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	4968      	ldr	r1, [pc, #416]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e025      	b.n	8002296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224a:	4b66      	ldr	r3, [pc, #408]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a65      	ldr	r2, [pc, #404]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4960      	ldr	r1, [pc, #384]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4b5e      	ldr	r3, [pc, #376]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	495b      	ldr	r1, [pc, #364]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fd4c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e37a      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002296:	f000 fc81 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4950      	ldr	r1, [pc, #320]	@ (80023e8 <HAL_RCC_OscConfig+0x274>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a4e      	ldr	r2, [pc, #312]	@ (80023ec <HAL_RCC_OscConfig+0x278>)
 80022b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022b6:	4b4e      	ldr	r3, [pc, #312]	@ (80023f0 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f976 	bl	80015ac <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d052      	beq.n	8002370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e35e      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d032      	beq.n	800233c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022d6:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a42      	ldr	r2, [pc, #264]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e2:	f7ff f9b3 	bl	800164c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ea:	f7ff f9af 	bl	800164c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e347      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fc:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a35      	ldr	r2, [pc, #212]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4930      	ldr	r1, [pc, #192]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	492b      	ldr	r1, [pc, #172]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e01a      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800233c:	4b29      	ldr	r3, [pc, #164]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002348:	f7ff f980 	bl	800164c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7ff f97c 	bl	800164c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e314      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1dc>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d073      	beq.n	8002466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x21c>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d063      	beq.n	8002464 <HAL_RCC_OscConfig+0x2f0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d15f      	bne.n	8002464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e2f1      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x24c>
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a0b      	ldr	r2, [pc, #44]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e025      	b.n	800240c <HAL_RCC_OscConfig+0x298>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c8:	d114      	bne.n	80023f4 <HAL_RCC_OscConfig+0x280>
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a02      	ldr	r2, [pc, #8]	@ (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x298>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	080056f8 	.word	0x080056f8
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004
 80023f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b9d      	ldr	r3, [pc, #628]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a9c      	ldr	r2, [pc, #624]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7ff f91a 	bl	800164c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff f916 	bl	800164c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e2ae      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	4b92      	ldr	r3, [pc, #584]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2a8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff f906 	bl	800164c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff f902 	bl	800164c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e29a      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002456:	4b88      	ldr	r3, [pc, #544]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x2d0>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d060      	beq.n	8002534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x310>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002484:	4b7c      	ldr	r3, [pc, #496]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x328>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e277      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b76      	ldr	r3, [pc, #472]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	4973      	ldr	r1, [pc, #460]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	e040      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d023      	beq.n	8002502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff f8c1 	bl	800164c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff f8bd 	bl	800164c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e255      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	4b65      	ldr	r3, [pc, #404]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b62      	ldr	r3, [pc, #392]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	495f      	ldr	r1, [pc, #380]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e018      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b5d      	ldr	r3, [pc, #372]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5c      	ldr	r2, [pc, #368]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff f89d 	bl	800164c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7ff f899 	bl	800164c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e231      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	4b53      	ldr	r3, [pc, #332]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254e:	4a4a      	ldr	r2, [pc, #296]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7ff f878 	bl	800164c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff f874 	bl	800164c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e20c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002572:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCC_OscConfig+0x3ec>
 8002580:	e01b      	b.n	80025ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	4b3d      	ldr	r3, [pc, #244]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002588:	4a3b      	ldr	r2, [pc, #236]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7ff f85b 	bl	800164c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7ff f857 	bl	800164c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1ef      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	4b32      	ldr	r3, [pc, #200]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a6 	beq.w	8002714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <HAL_RCC_OscConfig+0x508>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d118      	bne.n	8002632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002600:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCC_OscConfig+0x508>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_RCC_OscConfig+0x508>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260c:	f7ff f81e 	bl	800164c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7ff f81a 	bl	800164c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1b2      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_RCC_OscConfig+0x508>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x4d8>
 800263a:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800264a:	e029      	b.n	80026a0 <HAL_RCC_OscConfig+0x52c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d115      	bne.n	8002680 <HAL_RCC_OscConfig+0x50c>
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	4a03      	ldr	r2, [pc, #12]	@ (8002678 <HAL_RCC_OscConfig+0x504>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x52c>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	4b9a      	ldr	r3, [pc, #616]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002686:	4a99      	ldr	r2, [pc, #612]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002690:	4b96      	ldr	r3, [pc, #600]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002696:	4a95      	ldr	r2, [pc, #596]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe ffd0 	bl	800164c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe ffcc 	bl	800164c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e162      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	4b89      	ldr	r3, [pc, #548]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ed      	beq.n	80026b0 <HAL_RCC_OscConfig+0x53c>
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe ffb9 	bl	800164c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe ffb5 	bl	800164c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e14b      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	4b7d      	ldr	r3, [pc, #500]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ed      	bne.n	80026de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b78      	ldr	r3, [pc, #480]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	4a77      	ldr	r2, [pc, #476]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03c      	beq.n	800279a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002728:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800272e:	4a6f      	ldr	r2, [pc, #444]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe ff88 	bl	800164c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002740:	f7fe ff84 	bl	800164c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e11c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002754:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0x5cc>
 8002760:	e01b      	b.n	800279a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002762:	4b62      	ldr	r3, [pc, #392]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002768:	4a60      	ldr	r2, [pc, #384]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe ff6b 	bl	800164c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277a:	f7fe ff67 	bl	800164c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0ff      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	4b57      	ldr	r3, [pc, #348]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 800278e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80f3 	beq.w	800298a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80c9 	bne.w	8002940 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ae:	4b4f      	ldr	r3, [pc, #316]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d12c      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	3b01      	subs	r3, #1
 80027ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d123      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d11b      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d113      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d109      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d06b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d062      	beq.n	80028e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002822:	4b32      	ldr	r3, [pc, #200]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0ac      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002832:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800283e:	f7fe ff05 	bl	800164c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe ff01 	bl	800164c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e099      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b21      	ldr	r3, [pc, #132]	@ (80028f0 <HAL_RCC_OscConfig+0x77c>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002874:	3a01      	subs	r2, #1
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	4311      	orrs	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800287e:	0212      	lsls	r2, r2, #8
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0552      	lsls	r2, r2, #21
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0652      	lsls	r2, r2, #25
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800289e:	06d2      	lsls	r2, r2, #27
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4912      	ldr	r1, [pc, #72]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028a8:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b4:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7fe fec4 	bl	800164c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fec0 	bl	800164c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e058      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <HAL_RCC_OscConfig+0x778>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e6:	e050      	b.n	800298a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e04f      	b.n	800298c <HAL_RCC_OscConfig+0x818>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d144      	bne.n	800298a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002900:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a20      	ldr	r2, [pc, #128]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002918:	f7fe fe98 	bl	800164c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fe94 	bl	800164c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e02c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x7ac>
 800293e:	e024      	b.n	800298a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d01f      	beq.n	8002986 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 800294c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fe7b 	bl	800164c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fe77 	bl	800164c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e00f      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4905      	ldr	r1, [pc, #20]	@ (8002994 <HAL_RCC_OscConfig+0x820>)
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_OscConfig+0x824>)
 8002980:	4013      	ands	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e001      	b.n	800298a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	feeefffc 	.word	0xfeeefffc

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0e7      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b75      	ldr	r3, [pc, #468]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b72      	ldr	r3, [pc, #456]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4970      	ldr	r1, [pc, #448]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cf      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d908      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b63      	ldr	r3, [pc, #396]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4960      	ldr	r1, [pc, #384]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04c      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a22:	4b5a      	ldr	r3, [pc, #360]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d121      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0a6      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4b54      	ldr	r3, [pc, #336]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d115      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e09a      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a52:	4b4e      	ldr	r3, [pc, #312]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e08e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a62:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e086      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b46      	ldr	r3, [pc, #280]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4943      	ldr	r1, [pc, #268]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe fde2 	bl	800164c <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe fdde 	bl	800164c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e06e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d208      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	492b      	ldr	r1, [pc, #172]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae2:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d210      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0207 	bic.w	r2, r3, #7
 8002af8:	4923      	ldr	r1, [pc, #140]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e036      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4918      	ldr	r1, [pc, #96]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4910      	ldr	r1, [pc, #64]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b50:	f000 f824 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	490b      	ldr	r1, [pc, #44]	@ (8002b90 <HAL_RCC_ClockConfig+0x1f4>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b70:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_RCC_ClockConfig+0x1fc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fd19 	bl	80015ac <HAL_InitTick>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	080056f8 	.word	0x080056f8
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d134      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xac>
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb03 f202 	mul.w	r2, r3, r2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	0e5b      	lsrs	r3, r3, #25
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c94:	69bb      	ldr	r3, [r7, #24]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	@ 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08005710 	.word	0x08005710
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4904      	ldr	r1, [pc, #16]	@ (8002cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08005708 	.word	0x08005708

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cfc:	f7ff ffda 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0adb      	lsrs	r3, r3, #11
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4904      	ldr	r1, [pc, #16]	@ (8002d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08005708 	.word	0x08005708

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d30:	4b2a      	ldr	r3, [pc, #168]	@ (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d3c:	f7ff f9b6 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d40:	6178      	str	r0, [r7, #20]
 8002d42:	e014      	b.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	4a24      	ldr	r2, [pc, #144]	@ (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d50:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d5c:	f7ff f9a6 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b1e      	ldr	r3, [pc, #120]	@ (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	4a1d      	ldr	r2, [pc, #116]	@ (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d74:	d10b      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	@ 0x80
 8002d7a:	d919      	bls.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d80:	d902      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d82:	2302      	movs	r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e013      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e010      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b80      	cmp	r3, #128	@ 0x80
 8002d92:	d902      	bls.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d94:	2303      	movs	r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e00a      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	@ 0x80
 8002d9e:	d102      	bne.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da0:	2302      	movs	r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e004      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b70      	cmp	r3, #112	@ 0x70
 8002daa:	d101      	bne.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dac:	2301      	movs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 0207 	bic.w	r2, r3, #7
 8002db8:	4909      	ldr	r1, [pc, #36]	@ (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dc0:	4b07      	ldr	r3, [pc, #28]	@ (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40022000 	.word	0x40022000

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df0:	2300      	movs	r3, #0
 8002df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d031      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e08:	d01a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e0e:	d814      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e26:	e00c      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f9ce 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e3e:	e000      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e48:	4b51      	ldr	r3, [pc, #324]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	494e      	ldr	r1, [pc, #312]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e5e:	e001      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 809e 	beq.w	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e76:	4b46      	ldr	r3, [pc, #280]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	4a3f      	ldr	r2, [pc, #252]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e98:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a39      	ldr	r2, [pc, #228]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fbca 	bl	800164c <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eba:	e009      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe fbc6 	bl	800164c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ece:	e005      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ed0:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ef      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d15a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01e      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d019      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002efe:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f0a:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f20:	4a1b      	ldr	r2, [pc, #108]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f2a:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fb86 	bl	800164c <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	e00b      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fb82 	bl	800164c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d902      	bls.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	74fb      	strb	r3, [r7, #19]
            break;
 8002f5a:	e006      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ec      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7e:	4904      	ldr	r1, [pc, #16]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f86:	e009      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9c:	7c7b      	ldrb	r3, [r7, #17]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b8a      	ldr	r3, [pc, #552]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa6:	4a89      	ldr	r2, [pc, #548]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fba:	4b84      	ldr	r3, [pc, #528]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	f023 0203 	bic.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4980      	ldr	r1, [pc, #512]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	f023 020c 	bic.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	4978      	ldr	r1, [pc, #480]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ffe:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003004:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	496f      	ldr	r1, [pc, #444]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003020:	4b6a      	ldr	r3, [pc, #424]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302e:	4967      	ldr	r1, [pc, #412]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003042:	4b62      	ldr	r3, [pc, #392]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	495e      	ldr	r1, [pc, #376]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003064:	4b59      	ldr	r3, [pc, #356]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	4956      	ldr	r1, [pc, #344]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003086:	4b51      	ldr	r3, [pc, #324]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	494d      	ldr	r1, [pc, #308]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d028      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a8:	4b48      	ldr	r3, [pc, #288]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4945      	ldr	r1, [pc, #276]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c8:	4b40      	ldr	r3, [pc, #256]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a3f      	ldr	r2, [pc, #252]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d2:	60d3      	str	r3, [r2, #12]
 80030d4:	e011      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030de:	d10c      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f872 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d028      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003106:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	492d      	ldr	r1, [pc, #180]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003124:	d106      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003126:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	4a28      	ldr	r2, [pc, #160]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003130:	60d3      	str	r3, [r2, #12]
 8003132:	e011      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800313c:	d10c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f843 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003172:	4916      	ldr	r1, [pc, #88]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003182:	d10c      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f820 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031aa:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b8:	4904      	ldr	r1, [pc, #16]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031de:	4b74      	ldr	r3, [pc, #464]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031ea:	4b71      	ldr	r3, [pc, #452]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
       ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003202:	4b6b      	ldr	r3, [pc, #428]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
       ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d047      	beq.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e044      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d018      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x86>
 8003224:	2b03      	cmp	r3, #3
 8003226:	d825      	bhi.n	8003274 <RCCEx_PLLSAI1_Config+0xa4>
 8003228:	2b01      	cmp	r3, #1
 800322a:	d002      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x62>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d009      	beq.n	8003244 <RCCEx_PLLSAI1_Config+0x74>
 8003230:	e020      	b.n	8003274 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003232:	4b5f      	ldr	r3, [pc, #380]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11d      	bne.n	800327a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003242:	e01a      	b.n	800327a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003244:	4b5a      	ldr	r3, [pc, #360]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e013      	b.n	800327e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003256:	4b56      	ldr	r3, [pc, #344]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003262:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003272:	e006      	b.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e004      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003282:	bf00      	nop
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328a:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	430b      	orrs	r3, r1
 80032a0:	4943      	ldr	r1, [pc, #268]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d17c      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032ac:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fe f9c8 	bl	800164c <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032be:	e009      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c0:	f7fe f9c4 	bl	800164c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	73fb      	strb	r3, [r7, #15]
        break;
 80032d2:	e005      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032d4:	4b36      	ldr	r3, [pc, #216]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ef      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d15f      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d110      	bne.n	800330e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ec:	4b30      	ldr	r3, [pc, #192]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80032f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	06d2      	lsls	r2, r2, #27
 8003304:	430a      	orrs	r2, r1
 8003306:	492a      	ldr	r1, [pc, #168]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	610b      	str	r3, [r1, #16]
 800330c:	e027      	b.n	800335e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d112      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003314:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800331c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6892      	ldr	r2, [r2, #8]
 8003324:	0211      	lsls	r1, r2, #8
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6912      	ldr	r2, [r2, #16]
 800332a:	0852      	lsrs	r2, r2, #1
 800332c:	3a01      	subs	r2, #1
 800332e:	0552      	lsls	r2, r2, #21
 8003330:	430a      	orrs	r2, r1
 8003332:	491f      	ldr	r1, [pc, #124]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	610b      	str	r3, [r1, #16]
 8003338:	e011      	b.n	800335e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333a:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003342:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6892      	ldr	r2, [r2, #8]
 800334a:	0211      	lsls	r1, r2, #8
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6952      	ldr	r2, [r2, #20]
 8003350:	0852      	lsrs	r2, r2, #1
 8003352:	3a01      	subs	r2, #1
 8003354:	0652      	lsls	r2, r2, #25
 8003356:	430a      	orrs	r2, r1
 8003358:	4915      	ldr	r1, [pc, #84]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800335e:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a13      	ldr	r2, [pc, #76]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003364:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003368:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe f96f 	bl	800164c <HAL_GetTick>
 800336e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003370:	e009      	b.n	8003386 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003372:	f7fe f96b 	bl	800164c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d902      	bls.n	8003386 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	73fb      	strb	r3, [r7, #15]
          break;
 8003384:	e005      	b.n	8003392 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ef      	beq.n	8003372 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4903      	ldr	r1, [pc, #12]	@ (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e049      	b.n	800345a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd ff78 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 fab2 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e03b      	b.n	80034f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_TIM_Base_Start_IT+0x9c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_TIM_Base_Start_IT+0x4e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a6:	d004      	beq.n	80034b2 <HAL_TIM_Base_Start_IT+0x4e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a15      	ldr	r2, [pc, #84]	@ (8003504 <HAL_TIM_Base_Start_IT+0xa0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d115      	bne.n	80034de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <HAL_TIM_Base_Start_IT+0xa4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d015      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x8c>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ca:	d011      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	e008      	b.n	80034f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e000      	b.n	80034f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40014000 	.word	0x40014000
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10f      	bne.n	8003554 <HAL_TIM_Base_Stop_IT+0x48>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	f240 4344 	movw	r3, #1092	@ 0x444
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_TIM_Base_Stop_IT+0x48>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01b      	beq.n	80035ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f06f 0202 	mvn.w	r2, #2
 800359e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f9b2 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 80035ba:	e005      	b.n	80035c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f9a4 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9b5 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01b      	beq.n	800361a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0204 	mvn.w	r2, #4
 80035ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f98c 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 8003606:	e005      	b.n	8003614 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f97e 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f98f 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01b      	beq.n	8003666 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0208 	mvn.w	r2, #8
 8003636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f966 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 8003652:	e005      	b.n	8003660 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f958 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f969 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01b      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0210 	mvn.w	r2, #16
 8003682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2208      	movs	r2, #8
 8003688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f940 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 800369e:	e005      	b.n	80036ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f932 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f943 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00c      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0201 	mvn.w	r2, #1
 80036ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fd fc88 	bl	8000fe6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 faa6 	bl	8003c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00c      	beq.n	8003728 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa9e 	bl	8003c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8fd 	bl	8003946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0220 	mvn.w	r2, #32
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa66 	bl	8003c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIM_ConfigClockSource+0x1c>
 8003790:	2302      	movs	r3, #2
 8003792:	e0b6      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x18a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d0:	d03e      	beq.n	8003850 <HAL_TIM_ConfigClockSource+0xd8>
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d6:	f200 8087 	bhi.w	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037de:	f000 8086 	beq.w	80038ee <HAL_TIM_ConfigClockSource+0x176>
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e6:	d87f      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 80037e8:	2b70      	cmp	r3, #112	@ 0x70
 80037ea:	d01a      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0xaa>
 80037ec:	2b70      	cmp	r3, #112	@ 0x70
 80037ee:	d87b      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 80037f0:	2b60      	cmp	r3, #96	@ 0x60
 80037f2:	d050      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x11e>
 80037f4:	2b60      	cmp	r3, #96	@ 0x60
 80037f6:	d877      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 80037f8:	2b50      	cmp	r3, #80	@ 0x50
 80037fa:	d03c      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0xfe>
 80037fc:	2b50      	cmp	r3, #80	@ 0x50
 80037fe:	d873      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 8003800:	2b40      	cmp	r3, #64	@ 0x40
 8003802:	d058      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x13e>
 8003804:	2b40      	cmp	r3, #64	@ 0x40
 8003806:	d86f      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 8003808:	2b30      	cmp	r3, #48	@ 0x30
 800380a:	d064      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x15e>
 800380c:	2b30      	cmp	r3, #48	@ 0x30
 800380e:	d86b      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 8003810:	2b20      	cmp	r3, #32
 8003812:	d060      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d867      	bhi.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05c      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x15e>
 800381c:	2b10      	cmp	r3, #16
 800381e:	d05a      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003820:	e062      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003832:	f000 f97d 	bl	8003b30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	609a      	str	r2, [r3, #8]
      break;
 800384e:	e04f      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003860:	f000 f966 	bl	8003b30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003872:	609a      	str	r2, [r3, #8]
      break;
 8003874:	e03c      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	461a      	mov	r2, r3
 8003884:	f000 f8da 	bl	8003a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2150      	movs	r1, #80	@ 0x50
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f933 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 8003894:	e02c      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 f8f9 	bl	8003a9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2160      	movs	r1, #96	@ 0x60
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f923 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80038b4:	e01c      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 f8ba 	bl	8003a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2140      	movs	r1, #64	@ 0x40
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f913 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80038d4:	e00c      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f000 f90a 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80038e6:	e003      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e000      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a30      	ldr	r2, [pc, #192]	@ (8003a30 <TIM_Base_SetConfig+0xd4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0x20>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397a:	d108      	bne.n	800398e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a27      	ldr	r2, [pc, #156]	@ (8003a30 <TIM_Base_SetConfig+0xd4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0x52>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0x52>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <TIM_Base_SetConfig+0xd8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0x52>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a23      	ldr	r2, [pc, #140]	@ (8003a38 <TIM_Base_SetConfig+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <TIM_Base_SetConfig+0xd4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_Base_SetConfig+0xa0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a11      	ldr	r2, [pc, #68]	@ (8003a34 <TIM_Base_SetConfig+0xd8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_Base_SetConfig+0xa0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a10      	ldr	r2, [pc, #64]	@ (8003a38 <TIM_Base_SetConfig+0xdc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]
  }
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400

08003a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0201 	bic.w	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 030a 	bic.w	r3, r3, #10
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b087      	sub	sp, #28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f023 0210 	bic.w	r2, r3, #16
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	031b      	lsls	r3, r3, #12
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f043 0307 	orr.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	021a      	lsls	r2, r3, #8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	609a      	str	r2, [r3, #8]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e04f      	b.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a21      	ldr	r2, [pc, #132]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003bb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a14      	ldr	r2, [pc, #80]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a10      	ldr	r2, [pc, #64]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10c      	bne.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014000 	.word	0x40014000

08003c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e040      	b.n	8003d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fba4 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	@ 0x24
 8003ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fe4c 	bl	800495c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fc1d 	bl	8004504 <UART_SetConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e01b      	b.n	8003d0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fecb 	bl	8004aa0 <UART_CheckIdleState>
 8003d0a:	4603      	mov	r3, r0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d137      	bne.n	8003d9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Receive_IT+0x24>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e030      	b.n	8003d9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a18      	ldr	r2, [pc, #96]	@ (8003da8 <HAL_UART_Receive_IT+0x94>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01f      	beq.n	8003d8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	613b      	str	r3, [r7, #16]
   return(result);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	69f9      	ldr	r1, [r7, #28]
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 ff9a 	bl	8004ccc <UART_Start_Receive_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	e000      	b.n	8003d9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3728      	adds	r7, #40	@ 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40008000 	.word	0x40008000

08003dac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d165      	bne.n	8003e8e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_Transmit_DMA+0x22>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e05e      	b.n	8003e90 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2221      	movs	r2, #33	@ 0x21
 8003df4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d027      	beq.n	8003e4e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <HAL_UART_Transmit_DMA+0xec>)
 8003e04:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a24      	ldr	r2, [pc, #144]	@ (8003e9c <HAL_UART_Transmit_DMA+0xf0>)
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <HAL_UART_Transmit_DMA+0xf4>)
 8003e14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	4619      	mov	r1, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3328      	adds	r3, #40	@ 0x28
 8003e2e:	461a      	mov	r2, r3
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	f7fd fde1 	bl	80019f8 <HAL_DMA_Start_IT>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e020      	b.n	8003e90 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2240      	movs	r2, #64	@ 0x40
 8003e54:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	613b      	str	r3, [r7, #16]
   return(result);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e76:	623a      	str	r2, [r7, #32]
 8003e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	69f9      	ldr	r1, [r7, #28]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e5      	bne.n	8003e56 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	@ 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	08004f6d 	.word	0x08004f6d
 8003e9c:	08005007 	.word	0x08005007
 8003ea0:	08005023 	.word	0x08005023

08003ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ece:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d115      	bne.n	8003f0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00f      	beq.n	8003f0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 82ca 	beq.w	8004496 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
      }
      return;
 8003f0a:	e2c4      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8117 	beq.w	8004144 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f26:	4b85      	ldr	r3, [pc, #532]	@ (800413c <HAL_UART_IRQHandler+0x298>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 810a 	beq.w	8004144 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d011      	beq.n	8003f60 <HAL_UART_IRQHandler+0xbc>
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f56:	f043 0201 	orr.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d011      	beq.n	8003f90 <HAL_UART_IRQHandler+0xec>
 8003f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x11c>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2204      	movs	r2, #4
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb6:	f043 0202 	orr.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff2:	f043 0208 	orr.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <HAL_UART_IRQHandler+0x18a>
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800401c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8230 	beq.w	800449a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004068:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800407a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800407e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004082:	2b00      	cmp	r3, #0
 8004084:	d04f      	beq.n	8004126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 ff0c 	bl	8004ea4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004096:	2b40      	cmp	r3, #64	@ 0x40
 8004098:	d141      	bne.n	800411e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1d9      	bne.n	800409a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d013      	beq.n	8004116 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f2:	4a13      	ldr	r2, [pc, #76]	@ (8004140 <HAL_UART_IRQHandler+0x29c>)
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd fd1a 	bl	8001b34 <HAL_DMA_Abort_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e00f      	b.n	8004136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9de 	bl	80044d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	e00b      	b.n	8004136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9da 	bl	80044d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	e007      	b.n	8004136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9d6 	bl	80044d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004134:	e1b1      	b.n	800449a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004136:	bf00      	nop
    return;
 8004138:	e1af      	b.n	800449a <HAL_UART_IRQHandler+0x5f6>
 800413a:	bf00      	nop
 800413c:	04000120 	.word	0x04000120
 8004140:	080050a1 	.word	0x080050a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 816a 	bne.w	8004422 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8163 	beq.w	8004422 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 815c 	beq.w	8004422 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	f040 80d4 	bne.w	800432a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800418e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80ad 	beq.w	80042f2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800419e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f080 80a5 	bcs.w	80042f2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8086 	bne.w	80042d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1da      	bne.n	80041c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800421e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004232:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004236:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800423a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e1      	bne.n	800420e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3308      	adds	r3, #8
 8004250:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800425a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800425c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800426e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004270:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004274:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800427c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800429e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e4      	bne.n	8004290 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fbf4 	bl	8001ab8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8fe 	bl	80044ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80042f0:	e0d5      	b.n	800449e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f040 80ce 	bne.w	800449e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	f040 80c5 	bne.w	800449e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f8e2 	bl	80044ec <HAL_UARTEx_RxEventCallback>
      return;
 8004328:	e0b9      	b.n	800449e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004336:	b29b      	uxth	r3, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80ab 	beq.w	80044a2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800434c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a6 	beq.w	80044a2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004378:	647b      	str	r3, [r7, #68]	@ 0x44
 800437a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800437e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e4      	bne.n	8004356 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	623b      	str	r3, [r7, #32]
   return(result);
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e3      	bne.n	800438c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 0310 	bic.w	r3, r3, #16
 80043ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	617b      	str	r3, [r7, #20]
   return(result);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e4      	bne.n	80043d8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f866 	bl	80044ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004420:	e03f      	b.n	80044a2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <HAL_UART_IRQHandler+0x5a8>
 800442e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f001 f827 	bl	8005498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800444a:	e02d      	b.n	80044a8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800445c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01c      	beq.n	80044a6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
    }
    return;
 8004474:	e017      	b.n	80044a6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d012      	beq.n	80044a8 <HAL_UART_IRQHandler+0x604>
 8004482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fe1c 	bl	80050cc <UART_EndTransmit_IT>
    return;
 8004494:	e008      	b.n	80044a8 <HAL_UART_IRQHandler+0x604>
      return;
 8004496:	bf00      	nop
 8004498:	e006      	b.n	80044a8 <HAL_UART_IRQHandler+0x604>
    return;
 800449a:	bf00      	nop
 800449c:	e004      	b.n	80044a8 <HAL_UART_IRQHandler+0x604>
      return;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <HAL_UART_IRQHandler+0x604>
      return;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <HAL_UART_IRQHandler+0x604>
    return;
 80044a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044a8:	37e8      	adds	r7, #232	@ 0xe8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop

080044b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b08a      	sub	sp, #40	@ 0x28
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4bb4      	ldr	r3, [pc, #720]	@ (8004804 <UART_SetConfig+0x300>)
 8004534:	4013      	ands	r3, r2
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800453c:	430b      	orrs	r3, r1
 800453e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4aa9      	ldr	r2, [pc, #676]	@ (8004808 <UART_SetConfig+0x304>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456c:	4313      	orrs	r3, r2
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004580:	430a      	orrs	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4aa0      	ldr	r2, [pc, #640]	@ (800480c <UART_SetConfig+0x308>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d126      	bne.n	80045dc <UART_SetConfig+0xd8>
 800458e:	4ba0      	ldr	r3, [pc, #640]	@ (8004810 <UART_SetConfig+0x30c>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b03      	cmp	r3, #3
 800459a:	d81b      	bhi.n	80045d4 <UART_SetConfig+0xd0>
 800459c:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <UART_SetConfig+0xa0>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045c5 	.word	0x080045c5
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045cd 	.word	0x080045cd
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ba:	e080      	b.n	80046be <UART_SetConfig+0x1ba>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e07c      	b.n	80046be <UART_SetConfig+0x1ba>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ca:	e078      	b.n	80046be <UART_SetConfig+0x1ba>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e074      	b.n	80046be <UART_SetConfig+0x1ba>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e070      	b.n	80046be <UART_SetConfig+0x1ba>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a8c      	ldr	r2, [pc, #560]	@ (8004814 <UART_SetConfig+0x310>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d138      	bne.n	8004658 <UART_SetConfig+0x154>
 80045e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004810 <UART_SetConfig+0x30c>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	d82d      	bhi.n	8004650 <UART_SetConfig+0x14c>
 80045f4:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <UART_SetConfig+0xf8>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004651 	.word	0x08004651
 8004604:	08004651 	.word	0x08004651
 8004608:	08004651 	.word	0x08004651
 800460c:	08004641 	.word	0x08004641
 8004610:	08004651 	.word	0x08004651
 8004614:	08004651 	.word	0x08004651
 8004618:	08004651 	.word	0x08004651
 800461c:	08004639 	.word	0x08004639
 8004620:	08004651 	.word	0x08004651
 8004624:	08004651 	.word	0x08004651
 8004628:	08004651 	.word	0x08004651
 800462c:	08004649 	.word	0x08004649
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e042      	b.n	80046be <UART_SetConfig+0x1ba>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e03e      	b.n	80046be <UART_SetConfig+0x1ba>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004646:	e03a      	b.n	80046be <UART_SetConfig+0x1ba>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e036      	b.n	80046be <UART_SetConfig+0x1ba>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e032      	b.n	80046be <UART_SetConfig+0x1ba>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a6a      	ldr	r2, [pc, #424]	@ (8004808 <UART_SetConfig+0x304>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d12a      	bne.n	80046b8 <UART_SetConfig+0x1b4>
 8004662:	4b6b      	ldr	r3, [pc, #428]	@ (8004810 <UART_SetConfig+0x30c>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800466c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004670:	d01a      	beq.n	80046a8 <UART_SetConfig+0x1a4>
 8004672:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004676:	d81b      	bhi.n	80046b0 <UART_SetConfig+0x1ac>
 8004678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467c:	d00c      	beq.n	8004698 <UART_SetConfig+0x194>
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004682:	d815      	bhi.n	80046b0 <UART_SetConfig+0x1ac>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <UART_SetConfig+0x18c>
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468c:	d008      	beq.n	80046a0 <UART_SetConfig+0x19c>
 800468e:	e00f      	b.n	80046b0 <UART_SetConfig+0x1ac>
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004696:	e012      	b.n	80046be <UART_SetConfig+0x1ba>
 8004698:	2302      	movs	r3, #2
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e00e      	b.n	80046be <UART_SetConfig+0x1ba>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a6:	e00a      	b.n	80046be <UART_SetConfig+0x1ba>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e006      	b.n	80046be <UART_SetConfig+0x1ba>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b6:	e002      	b.n	80046be <UART_SetConfig+0x1ba>
 80046b8:	2310      	movs	r3, #16
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a51      	ldr	r2, [pc, #324]	@ (8004808 <UART_SetConfig+0x304>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d17a      	bne.n	80047be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d824      	bhi.n	800471a <UART_SetConfig+0x216>
 80046d0:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <UART_SetConfig+0x1d4>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	0800471b 	.word	0x0800471b
 80046e0:	08004705 	.word	0x08004705
 80046e4:	0800471b 	.word	0x0800471b
 80046e8:	0800470b 	.word	0x0800470b
 80046ec:	0800471b 	.word	0x0800471b
 80046f0:	0800471b 	.word	0x0800471b
 80046f4:	0800471b 	.word	0x0800471b
 80046f8:	08004713 	.word	0x08004713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7fe fae6 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004700:	61f8      	str	r0, [r7, #28]
        break;
 8004702:	e010      	b.n	8004726 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004704:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <UART_SetConfig+0x314>)
 8004706:	61fb      	str	r3, [r7, #28]
        break;
 8004708:	e00d      	b.n	8004726 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470a:	f7fe fa47 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800470e:	61f8      	str	r0, [r7, #28]
        break;
 8004710:	e009      	b.n	8004726 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004716:	61fb      	str	r3, [r7, #28]
        break;
 8004718:	e005      	b.n	8004726 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8107 	beq.w	800493c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	429a      	cmp	r2, r3
 800473c:	d305      	bcc.n	800474a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	429a      	cmp	r2, r3
 8004748:	d903      	bls.n	8004752 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004750:	e0f4      	b.n	800493c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2200      	movs	r2, #0
 8004756:	461c      	mov	r4, r3
 8004758:	4615      	mov	r5, r2
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	022b      	lsls	r3, r5, #8
 8004764:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004768:	0222      	lsls	r2, r4, #8
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	6849      	ldr	r1, [r1, #4]
 800476e:	0849      	lsrs	r1, r1, #1
 8004770:	2000      	movs	r0, #0
 8004772:	4688      	mov	r8, r1
 8004774:	4681      	mov	r9, r0
 8004776:	eb12 0a08 	adds.w	sl, r2, r8
 800477a:	eb43 0b09 	adc.w	fp, r3, r9
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800478c:	4650      	mov	r0, sl
 800478e:	4659      	mov	r1, fp
 8004790:	f7fb fd24 	bl	80001dc <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047a2:	d308      	bcc.n	80047b6 <UART_SetConfig+0x2b2>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047aa:	d204      	bcs.n	80047b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e0c2      	b.n	800493c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047bc:	e0be      	b.n	800493c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c6:	d16a      	bne.n	800489e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80047c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d834      	bhi.n	800483a <UART_SetConfig+0x336>
 80047d0:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <UART_SetConfig+0x2d4>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004825 	.word	0x08004825
 80047e4:	0800483b 	.word	0x0800483b
 80047e8:	0800482b 	.word	0x0800482b
 80047ec:	0800483b 	.word	0x0800483b
 80047f0:	0800483b 	.word	0x0800483b
 80047f4:	0800483b 	.word	0x0800483b
 80047f8:	08004833 	.word	0x08004833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7fe fa66 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004800:	61f8      	str	r0, [r7, #28]
        break;
 8004802:	e020      	b.n	8004846 <UART_SetConfig+0x342>
 8004804:	efff69f3 	.word	0xefff69f3
 8004808:	40008000 	.word	0x40008000
 800480c:	40013800 	.word	0x40013800
 8004810:	40021000 	.word	0x40021000
 8004814:	40004400 	.word	0x40004400
 8004818:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800481c:	f7fe fa6c 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004820:	61f8      	str	r0, [r7, #28]
        break;
 8004822:	e010      	b.n	8004846 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b4c      	ldr	r3, [pc, #304]	@ (8004958 <UART_SetConfig+0x454>)
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e00d      	b.n	8004846 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe f9b7 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800482e:	61f8      	str	r0, [r7, #28]
        break;
 8004830:	e009      	b.n	8004846 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004836:	61fb      	str	r3, [r7, #28]
        break;
 8004838:	e005      	b.n	8004846 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d077      	beq.n	800493c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005a      	lsls	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b0f      	cmp	r3, #15
 8004866:	d916      	bls.n	8004896 <UART_SetConfig+0x392>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486e:	d212      	bcs.n	8004896 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f023 030f 	bic.w	r3, r3, #15
 8004878:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	b29b      	uxth	r3, r3
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b29a      	uxth	r2, r3
 8004886:	8afb      	ldrh	r3, [r7, #22]
 8004888:	4313      	orrs	r3, r2
 800488a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	8afa      	ldrh	r2, [r7, #22]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e052      	b.n	800493c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800489c:	e04e      	b.n	800493c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d827      	bhi.n	80048f6 <UART_SetConfig+0x3f2>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0x3a8>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048f7 	.word	0x080048f7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe f9fc 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e014      	b.n	8004902 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fe fa0e 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80048dc:	61f8      	str	r0, [r7, #28]
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <UART_SetConfig+0x454>)
 80048e2:	61fb      	str	r3, [r7, #28]
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe f959 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 80048ea:	61f8      	str	r0, [r7, #28]
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004900:	bf00      	nop
    }

    if (pclk != 0U)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d019      	beq.n	800493c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	085a      	lsrs	r2, r3, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d909      	bls.n	8004936 <UART_SetConfig+0x432>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004928:	d205      	bcs.n	8004936 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	e002      	b.n	800493c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004948:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800494c:	4618      	mov	r0, r3
 800494e:	3728      	adds	r7, #40	@ 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	00f42400 	.word	0x00f42400

0800495c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01a      	beq.n	8004a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a5a:	d10a      	bne.n	8004a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
  }
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b098      	sub	sp, #96	@ 0x60
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab0:	f7fc fdcc 	bl	800164c <HAL_GetTick>
 8004ab4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d12e      	bne.n	8004b22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f88c 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d021      	beq.n	8004b22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004afe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e062      	b.n	8004be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d149      	bne.n	8004bc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f856 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d03c      	beq.n	8004bc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	623b      	str	r3, [r7, #32]
   return(result);
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b9c:	61fa      	str	r2, [r7, #28]
 8004b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69b9      	ldr	r1, [r7, #24]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e011      	b.n	8004be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3758      	adds	r7, #88	@ 0x58
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c00:	e04f      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d04b      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fc fd1f 	bl	800164c <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e04e      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d037      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b80      	cmp	r3, #128	@ 0x80
 8004c36:	d034      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b40      	cmp	r3, #64	@ 0x40
 8004c3c:	d031      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d110      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2208      	movs	r2, #8
 8004c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f925 	bl	8004ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e029      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c7c:	d111      	bne.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f90b 	bl	8004ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e00f      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d0a0      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b097      	sub	sp, #92	@ 0x5c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfe:	d10e      	bne.n	8004d1e <UART_Start_Receive_IT+0x52>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <UART_Start_Receive_IT+0x48>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d12:	e02d      	b.n	8004d70 <UART_Start_Receive_IT+0xa4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d1c:	e028      	b.n	8004d70 <UART_Start_Receive_IT+0xa4>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <UART_Start_Receive_IT+0x76>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <UART_Start_Receive_IT+0x6c>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	22ff      	movs	r2, #255	@ 0xff
 8004d32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d36:	e01b      	b.n	8004d70 <UART_Start_Receive_IT+0xa4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	227f      	movs	r2, #127	@ 0x7f
 8004d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d40:	e016      	b.n	8004d70 <UART_Start_Receive_IT+0xa4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d4a:	d10d      	bne.n	8004d68 <UART_Start_Receive_IT+0x9c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <UART_Start_Receive_IT+0x92>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	227f      	movs	r2, #127	@ 0x7f
 8004d58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d5c:	e008      	b.n	8004d70 <UART_Start_Receive_IT+0xa4>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	223f      	movs	r2, #63	@ 0x3f
 8004d62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d66:	e003      	b.n	8004d70 <UART_Start_Receive_IT+0xa4>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2222      	movs	r2, #34	@ 0x22
 8004d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004da0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004da2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbc:	d107      	bne.n	8004dce <UART_Start_Receive_IT+0x102>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a21      	ldr	r2, [pc, #132]	@ (8004e50 <UART_Start_Receive_IT+0x184>)
 8004dca:	669a      	str	r2, [r3, #104]	@ 0x68
 8004dcc:	e002      	b.n	8004dd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a20      	ldr	r2, [pc, #128]	@ (8004e54 <UART_Start_Receive_IT+0x188>)
 8004dd2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d019      	beq.n	8004e10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_Start_Receive_IT+0x110>
 8004e0e:	e018      	b.n	8004e42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e6      	bne.n	8004e10 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	375c      	adds	r7, #92	@ 0x5c
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	080052dd 	.word	0x080052dd
 8004e54:	08005121 	.word	0x08005121

08004e58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	@ 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e6      	bne.n	8004e60 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004e98:	bf00      	nop
 8004e9a:	3724      	adds	r7, #36	@ 0x24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b095      	sub	sp, #84	@ 0x54
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e6      	bne.n	8004eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d118      	bne.n	8004f4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0310 	bic.w	r3, r3, #16
 8004f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	613b      	str	r3, [r7, #16]
   return(result);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f60:	bf00      	nop
 8004f62:	3754      	adds	r7, #84	@ 0x54
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b090      	sub	sp, #64	@ 0x40
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d137      	bne.n	8004ff8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e6      	bne.n	8004fc4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ff6:	e002      	b.n	8004ffe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004ff8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ffa:	f7ff fa59 	bl	80044b0 <HAL_UART_TxCpltCallback>
}
 8004ffe:	bf00      	nop
 8005000:	3740      	adds	r7, #64	@ 0x40
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff fa55 	bl	80044c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005034:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005048:	2b80      	cmp	r3, #128	@ 0x80
 800504a:	d109      	bne.n	8005060 <UART_DMAError+0x3e>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b21      	cmp	r3, #33	@ 0x21
 8005050:	d106      	bne.n	8005060 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff fefc 	bl	8004e58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506a:	2b40      	cmp	r3, #64	@ 0x40
 800506c:	d109      	bne.n	8005082 <UART_DMAError+0x60>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b22      	cmp	r3, #34	@ 0x22
 8005072:	d106      	bne.n	8005082 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2200      	movs	r2, #0
 8005078:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800507c:	6978      	ldr	r0, [r7, #20]
 800507e:	f7ff ff11 	bl	8004ea4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005088:	f043 0210 	orr.w	r2, r3, #16
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff fa20 	bl	80044d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fa0a 	bl	80044d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e6      	bne.n	80050d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff f9cc 	bl	80044b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005118:	bf00      	nop
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b09c      	sub	sp, #112	@ 0x70
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800512e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005138:	2b22      	cmp	r3, #34	@ 0x22
 800513a:	f040 80be 	bne.w	80052ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005144:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005148:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800514c:	b2d9      	uxtb	r1, r3
 800514e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005152:	b2da      	uxtb	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005158:	400a      	ands	r2, r1
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 80a3 	bne.w	80052ce <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e6      	bne.n	8005188 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3308      	adds	r3, #8
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051da:	647a      	str	r2, [r7, #68]	@ 0x44
 80051dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e5      	bne.n	80051ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a34      	ldr	r2, [pc, #208]	@ (80052d8 <UART_RxISR_8BIT+0x1b8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d01f      	beq.n	800524c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d018      	beq.n	800524c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	623b      	str	r3, [r7, #32]
   return(result);
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800522e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30
 800523a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800523e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005250:	2b01      	cmp	r3, #1
 8005252:	d12e      	bne.n	80052b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	60fb      	str	r3, [r7, #12]
   return(result);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	617b      	str	r3, [r7, #20]
   return(result);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e6      	bne.n	800525a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d103      	bne.n	80052a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2210      	movs	r2, #16
 80052a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff f91e 	bl	80044ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052b0:	e00d      	b.n	80052ce <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb fea2 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 80052b8:	e009      	b.n	80052ce <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	8b1b      	ldrh	r3, [r3, #24]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	b292      	uxth	r2, r2
 80052cc:	831a      	strh	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	3770      	adds	r7, #112	@ 0x70
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40008000 	.word	0x40008000

080052dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b09c      	sub	sp, #112	@ 0x70
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f4:	2b22      	cmp	r3, #34	@ 0x22
 80052f6:	f040 80be 	bne.w	8005476 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005300:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005308:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800530a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800530e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005312:	4013      	ands	r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531e:	1c9a      	adds	r2, r3, #2
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	f040 80a3 	bne.w	800548a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005358:	667b      	str	r3, [r7, #100]	@ 0x64
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005362:	657b      	str	r3, [r7, #84]	@ 0x54
 8005364:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005368:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	663b      	str	r3, [r7, #96]	@ 0x60
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005396:	643a      	str	r2, [r7, #64]	@ 0x40
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800539c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a34      	ldr	r2, [pc, #208]	@ (8005494 <UART_RxISR_16BIT+0x1b8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d01f      	beq.n	8005408 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d018      	beq.n	8005408 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e6      	bne.n	80053d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540c:	2b01      	cmp	r3, #1
 800540e:	d12e      	bne.n	800546e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60bb      	str	r3, [r7, #8]
   return(result);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6979      	ldr	r1, [r7, #20]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	613b      	str	r3, [r7, #16]
   return(result);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e6      	bne.n	8005416 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d103      	bne.n	800545e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2210      	movs	r2, #16
 800545c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff f840 	bl	80044ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800546c:	e00d      	b.n	800548a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb fdc4 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 8005474:	e009      	b.n	800548a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	8b1b      	ldrh	r3, [r3, #24]
 800547c:	b29a      	uxth	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	b292      	uxth	r2, r2
 8005488:	831a      	strh	r2, [r3, #24]
}
 800548a:	bf00      	nop
 800548c:	3770      	adds	r7, #112	@ 0x70
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40008000 	.word	0x40008000

08005498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <strcat>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	4602      	mov	r2, r0
 80054c0:	7814      	ldrb	r4, [r2, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	3201      	adds	r2, #1
 80054c6:	2c00      	cmp	r4, #0
 80054c8:	d1fa      	bne.n	80054c0 <strcat+0x4>
 80054ca:	3b01      	subs	r3, #1
 80054cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d1f9      	bne.n	80054cc <strcat+0x10>
 80054d8:	bd10      	pop	{r4, pc}

080054da <strncpy>:
 80054da:	b510      	push	{r4, lr}
 80054dc:	3901      	subs	r1, #1
 80054de:	4603      	mov	r3, r0
 80054e0:	b132      	cbz	r2, 80054f0 <strncpy+0x16>
 80054e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80054e6:	f803 4b01 	strb.w	r4, [r3], #1
 80054ea:	3a01      	subs	r2, #1
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	d1f7      	bne.n	80054e0 <strncpy+0x6>
 80054f0:	441a      	add	r2, r3
 80054f2:	2100      	movs	r1, #0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <strncpy+0x20>
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <strncpy+0x1a>

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	@ (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	@ (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	@ (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	@ (8005544 <__libc_init_array+0x44>)
 8005514:	f000 f826 	bl	8005564 <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	08005748 	.word	0x08005748
 800553c:	08005748 	.word	0x08005748
 8005540:	08005748 	.word	0x08005748
 8005544:	0800574c 	.word	0x0800574c

08005548 <memcpy>:
 8005548:	440a      	add	r2, r1
 800554a:	4291      	cmp	r1, r2
 800554c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005550:	d100      	bne.n	8005554 <memcpy+0xc>
 8005552:	4770      	bx	lr
 8005554:	b510      	push	{r4, lr}
 8005556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800555e:	4291      	cmp	r1, r2
 8005560:	d1f9      	bne.n	8005556 <memcpy+0xe>
 8005562:	bd10      	pop	{r4, pc}

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
