
Firmware_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005614  08005614  00006614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e4  080057e4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080057e4  080057e4  000067e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ec  080057ec  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000067ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  08005800  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005800  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b0e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef7  00000000  00000000  0001ab4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d01  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219cb  00000000  00000000  0001f819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c49  00000000  00000000  000411e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b09  00000000  00000000  00056e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  0012097c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00124e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080055fc 	.word	0x080055fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080055fc 	.word	0x080055fc

080001cc <strcmp>:
 80001cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d4:	2a01      	cmp	r2, #1
 80001d6:	bf28      	it	cs
 80001d8:	429a      	cmpcs	r2, r3
 80001da:	d0f7      	beq.n	80001cc <strcmp>
 80001dc:	1ad0      	subs	r0, r2, r3
 80001de:	4770      	bx	lr

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <local_getCharIndex>:
 * @param length length of the string
 * @param to_find char to findin the string
 * @return int32_t 
 */
int32_t local_getCharIndex(uint8_t *str, uint32_t length, uint8_t to_find)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4613      	mov	r3, r2
 80004ec:	71fb      	strb	r3, [r7, #7]
	// Update length to account for end of string
	length = (strlen((char *) str) > length) ? length : strlen((char *) str);
 80004ee:	68f8      	ldr	r0, [r7, #12]
 80004f0:	f7ff fe76 	bl	80001e0 <strlen>
 80004f4:	4602      	mov	r2, r0
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d304      	bcc.n	8000506 <local_getCharIndex+0x26>
 80004fc:	68f8      	ldr	r0, [r7, #12]
 80004fe:	f7ff fe6f 	bl	80001e0 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	e000      	b.n	8000508 <local_getCharIndex+0x28>
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	60bb      	str	r3, [r7, #8]

	for (int32_t i = 0; i < length; i++)
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e00b      	b.n	8000528 <local_getCharIndex+0x48>
	{
		if(str[i] == to_find)
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4413      	add	r3, r2
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	429a      	cmp	r2, r3
 800051c:	d101      	bne.n	8000522 <local_getCharIndex+0x42>
		{
			return i;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	e008      	b.n	8000534 <local_getCharIndex+0x54>
	for (int32_t i = 0; i < length; i++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	d8ef      	bhi.n	8000510 <local_getCharIndex+0x30>
		}
	}

	return -1;
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <Commands_RxCallback>:
 * @brief Interrupt function to be inserted in the RxCompleteCallback.
 * 
 * @param huart 
 */
void Commands_RxCallback(UART_HandleTypeDef * huart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	// static variable for the current index in command_buffer (only set to 0 on startup)
	static uint32_t index = 0;
	static Commands_Error_t err = CMD_ERROR_OK;

	if (index >= COMMAND_MAX_LENGTH)
 8000544:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <Commands_RxCallback+0x9c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b3f      	cmp	r3, #63	@ 0x3f
 800054a:	d905      	bls.n	8000558 <Commands_RxCallback+0x1c>
	{
		Utils_printCommandError(CMD_ERROR_COMMAND_TOO_LONG);
 800054c:	2004      	movs	r0, #4
 800054e:	f000 fac3 	bl	8000ad8 <Utils_printCommandError>
		index = 0;
 8000552:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <Commands_RxCallback+0x9c>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	}

	// uint8_t that was just received
	uint8_t received_char = command_buffer[index];
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <Commands_RxCallback+0x9c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1f      	ldr	r2, [pc, #124]	@ (80005dc <Commands_RxCallback+0xa0>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	73fb      	strb	r3, [r7, #15]
	index++;
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <Commands_RxCallback+0x9c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a1b      	ldr	r2, [pc, #108]	@ (80005d8 <Commands_RxCallback+0x9c>)
 800056a:	6013      	str	r3, [r2, #0]

	if(received_char == '\n' || received_char == '\r')
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	2b0a      	cmp	r3, #10
 8000570:	d002      	beq.n	8000578 <Commands_RxCallback+0x3c>
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d121      	bne.n	80005bc <Commands_RxCallback+0x80>
	{

		err = Commands_parseIntoCurrent();
 8000578:	f000 f85e 	bl	8000638 <Commands_parseIntoCurrent>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <Commands_RxCallback+0xa4>)
 8000582:	701a      	strb	r2, [r3, #0]
		if (err)
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <Commands_RxCallback+0xa4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <Commands_RxCallback+0x5c>
		{
			Utils_printCommandError(err);
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <Commands_RxCallback+0xa4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 faa1 	bl	8000ad8 <Utils_printCommandError>
 8000596:	e00e      	b.n	80005b6 <Commands_RxCallback+0x7a>
		}
		else 
		{
			err = Commands_executeCurrent();
 8000598:	f000 f826 	bl	80005e8 <Commands_executeCurrent>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <Commands_RxCallback+0xa4>)
 80005a2:	701a      	strb	r2, [r3, #0]
			if (err)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <Commands_RxCallback+0xa4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d004      	beq.n	80005b6 <Commands_RxCallback+0x7a>
			{
				Utils_printCommandError(err);
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <Commands_RxCallback+0xa4>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fa91 	bl	8000ad8 <Utils_printCommandError>
			}
		}

		index = 0;
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <Commands_RxCallback+0x9c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, &(command_buffer[index]), 1);
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <Commands_RxCallback+0x9c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <Commands_RxCallback+0xa0>)
 80005c2:	4413      	add	r3, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <Commands_RxCallback+0xa8>)
 80005ca:	f003 fbfd 	bl	8003dc8 <HAL_UART_Receive_IT>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	20000028 	.word	0x20000028
 80005e0:	200000f0 	.word	0x200000f0
 80005e4:	200001f4 	.word	0x200001f4

080005e8 <Commands_executeCurrent>:
 * @brief Execute the command in current_command.
 * 
 * @return Commands_Error_t 
 */
Commands_Error_t Commands_executeCurrent()
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b0a1      	sub	sp, #132	@ 0x84
 80005ec:	af1e      	add	r7, sp, #120	@ 0x78
	Commands_Error_t err = CMD_ERROR_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]

	if (!strcmp((char *) current_command.destination, "config"))
 80005f2:	490e      	ldr	r1, [pc, #56]	@ (800062c <Commands_executeCurrent+0x44>)
 80005f4:	480e      	ldr	r0, [pc, #56]	@ (8000630 <Commands_executeCurrent+0x48>)
 80005f6:	f7ff fde9 	bl	80001cc <strcmp>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10e      	bne.n	800061e <Commands_executeCurrent+0x36>
	{
		err = Config_handleCommand(current_command);
 8000600:	4c0c      	ldr	r4, [pc, #48]	@ (8000634 <Commands_executeCurrent+0x4c>)
 8000602:	4668      	mov	r0, sp
 8000604:	f104 0310 	add.w	r3, r4, #16
 8000608:	2271      	movs	r2, #113	@ 0x71
 800060a:	4619      	mov	r1, r3
 800060c:	f004 ffe8 	bl	80055e0 <memcpy>
 8000610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000614:	f000 f99c 	bl	8000950 <Config_handleCommand>
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	e001      	b.n	8000622 <Commands_executeCurrent+0x3a>
	//	   err = Example_handleCommand(current_command);
	// }
	// ---example end---
	else
	{
		err = CMD_ERROR_INVALID_DESTINATION;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
	}

	return err;
 8000622:	79fb      	ldrb	r3, [r7, #7]
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	08005614 	.word	0x08005614
 8000630:	20000069 	.word	0x20000069
 8000634:	20000068 	.word	0x20000068

08000638 <Commands_parseIntoCurrent>:
 * @brief Parse the command received via UART into current_command
 * 
 * @return Commands_Error_t 
 */
Commands_Error_t Commands_parseIntoCurrent()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	@ 0x58
 800063c:	af00      	add	r7, sp, #0
	Utils_initEmptyCommand(&current_command);
 800063e:	4837      	ldr	r0, [pc, #220]	@ (800071c <Commands_parseIntoCurrent+0xe4>)
 8000640:	f000 f9c8 	bl	80009d4 <Utils_initEmptyCommand>

	// Check that the command ends (and get length)
	int32_t command_length = local_getCharIndex(command_buffer, COMMAND_MAX_LENGTH, '\n');
 8000644:	220a      	movs	r2, #10
 8000646:	2140      	movs	r1, #64	@ 0x40
 8000648:	4835      	ldr	r0, [pc, #212]	@ (8000720 <Commands_parseIntoCurrent+0xe8>)
 800064a:	f7ff ff49 	bl	80004e0 <local_getCharIndex>
 800064e:	6578      	str	r0, [r7, #84]	@ 0x54
	// Test for \r as well just in case
	if (command_length < 0)
 8000650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000652:	2b00      	cmp	r3, #0
 8000654:	da05      	bge.n	8000662 <Commands_parseIntoCurrent+0x2a>
	{
		command_length = local_getCharIndex(command_buffer, COMMAND_MAX_LENGTH, '\r');
 8000656:	220d      	movs	r2, #13
 8000658:	2140      	movs	r1, #64	@ 0x40
 800065a:	4831      	ldr	r0, [pc, #196]	@ (8000720 <Commands_parseIntoCurrent+0xe8>)
 800065c:	f7ff ff40 	bl	80004e0 <local_getCharIndex>
 8000660:	6578      	str	r0, [r7, #84]	@ 0x54
	}

	// Error handling
	if (command_length < 0)
 8000662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000664:	2b00      	cmp	r3, #0
 8000666:	da09      	bge.n	800067c <Commands_parseIntoCurrent+0x44>
	{
		if (strlen((char *) command_buffer) < COMMAND_MAX_LENGTH)
 8000668:	482d      	ldr	r0, [pc, #180]	@ (8000720 <Commands_parseIntoCurrent+0xe8>)
 800066a:	f7ff fdb9 	bl	80001e0 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	2b3f      	cmp	r3, #63	@ 0x3f
 8000672:	d801      	bhi.n	8000678 <Commands_parseIntoCurrent+0x40>
		{
			return CMD_ERROR_COULD_NOT_PARSE;
 8000674:	2305      	movs	r3, #5
 8000676:	e04c      	b.n	8000712 <Commands_parseIntoCurrent+0xda>
		}
		return CMD_ERROR_COMMAND_TOO_LONG;
 8000678:	2304      	movs	r3, #4
 800067a:	e04a      	b.n	8000712 <Commands_parseIntoCurrent+0xda>
	}

	// Copy command in a local buffer
	uint8_t temp_buffer[COMMAND_MAX_LENGTH + 1] = {0};
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	223d      	movs	r2, #61	@ 0x3d
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 ff69 	bl	8005560 <memset>
	strncpy((char *) temp_buffer, (char *) command_buffer, command_length); // Removes the \n at the end
 800068e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4923      	ldr	r1, [pc, #140]	@ (8000720 <Commands_parseIntoCurrent+0xe8>)
 8000694:	4618      	mov	r0, r3
 8000696:	f004 ff6b 	bl	8005570 <strncpy>
	temp_buffer[command_length] = ' '; // replace the \n with a space
 800069a:	1d3a      	adds	r2, r7, #4
 800069c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800069e:	4413      	add	r3, r2
 80006a0:	2220      	movs	r2, #32
 80006a2:	701a      	strb	r2, [r3, #0]
	command_length++;
 80006a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006a6:	3301      	adds	r3, #1
 80006a8:	657b      	str	r3, [r7, #84]	@ 0x54

	// Store received command into current_command
	uint32_t command_part_index = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
	int32_t start_index = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (strlen((char *) &temp_buffer[start_index]) > 0)
 80006b2:	e027      	b.n	8000704 <Commands_parseIntoCurrent+0xcc>
	{
		// Check if argument overflows max_args
		if (command_part_index >= COMMAND_MAX_ARGS + 2)
 80006b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d901      	bls.n	80006be <Commands_parseIntoCurrent+0x86>
		{
			return CMD_ERROR_INVALID_ARGS;
 80006ba:	2303      	movs	r3, #3
 80006bc:	e029      	b.n	8000712 <Commands_parseIntoCurrent+0xda>
		}

		int32_t space_index = local_getCharIndex(&temp_buffer[start_index], command_length, ' ');
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006c2:	4413      	add	r3, r2
 80006c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80006c6:	2220      	movs	r2, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff09 	bl	80004e0 <local_getCharIndex>
 80006ce:	64b8      	str	r0, [r7, #72]	@ 0x48
		if (space_index < 0)
 80006d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	da01      	bge.n	80006da <Commands_parseIntoCurrent+0xa2>
		{
			return CMD_ERROR_COULD_NOT_PARSE;
 80006d6:	2305      	movs	r3, #5
 80006d8:	e01b      	b.n	8000712 <Commands_parseIntoCurrent+0xda>
		}

		Utils_setCommandPartByIndex(&current_command, command_part_index, &temp_buffer[start_index], space_index);
 80006da:	1d3a      	adds	r2, r7, #4
 80006dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006de:	441a      	add	r2, r3
 80006e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <Commands_parseIntoCurrent+0xe4>)
 80006e6:	f000 f9a0 	bl	8000a2a <Utils_setCommandPartByIndex>

		start_index += space_index + 1; // deletes everything before the space by manipulating the pointer.
 80006ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006ec:	3301      	adds	r3, #1
 80006ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80006f0:	4413      	add	r3, r2
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		command_length -= (space_index + 1); // Updates command length
 80006f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006f6:	3301      	adds	r3, #1
 80006f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
		command_part_index++;
 80006fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000700:	3301      	adds	r3, #1
 8000702:	653b      	str	r3, [r7, #80]	@ 0x50
	while (strlen((char *) &temp_buffer[start_index]) > 0)
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1d1      	bne.n	80006b4 <Commands_parseIntoCurrent+0x7c>
	}

	return CMD_ERROR_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3758      	adds	r7, #88	@ 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000068 	.word	0x20000068
 8000720:	20000028 	.word	0x20000028

08000724 <local_stringToTeamEnum>:
Strategy_t local_stringToStrategyEnum(uint8_t *string);

///////// Local utils functions ///////////

Team_t local_stringToTeamEnum(uint8_t *string)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if ((strcmp((char *) string, "blue") == 0) || (strcmp((char *) string, "1") == 0))
 800072c:	4912      	ldr	r1, [pc, #72]	@ (8000778 <local_stringToTeamEnum+0x54>)
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff fd4c 	bl	80001cc <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <local_stringToTeamEnum+0x24>
 800073a:	4910      	ldr	r1, [pc, #64]	@ (800077c <local_stringToTeamEnum+0x58>)
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fd45 	bl	80001cc <strcmp>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <local_stringToTeamEnum+0x28>
	{
		return TEAM_BLUE;
 8000748:	2301      	movs	r3, #1
 800074a:	e010      	b.n	800076e <local_stringToTeamEnum+0x4a>
	}
	else if ((strcmp((char *) string, "yellow") == 0) || (strcmp((char *) string, "2") == 0))
 800074c:	490c      	ldr	r1, [pc, #48]	@ (8000780 <local_stringToTeamEnum+0x5c>)
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fd3c 	bl	80001cc <strcmp>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <local_stringToTeamEnum+0x44>
 800075a:	490a      	ldr	r1, [pc, #40]	@ (8000784 <local_stringToTeamEnum+0x60>)
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fd35 	bl	80001cc <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <local_stringToTeamEnum+0x48>
	{
		return TEAM_YELLOW;
 8000768:	2302      	movs	r3, #2
 800076a:	e000      	b.n	800076e <local_stringToTeamEnum+0x4a>
	}

	return TEAM_NONE;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	0800561c 	.word	0x0800561c
 800077c:	08005624 	.word	0x08005624
 8000780:	08005628 	.word	0x08005628
 8000784:	08005630 	.word	0x08005630

08000788 <local_teamEnumToString>:

uint8_t *local_teamEnumToString(Team_t team)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	switch (team) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d002      	beq.n	800079e <local_teamEnumToString+0x16>
 8000798:	2b02      	cmp	r3, #2
 800079a:	d002      	beq.n	80007a2 <local_teamEnumToString+0x1a>
 800079c:	e003      	b.n	80007a6 <local_teamEnumToString+0x1e>

		case TEAM_BLUE:
			return (uint8_t *) "blue";
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <local_teamEnumToString+0x2c>)
 80007a0:	e002      	b.n	80007a8 <local_teamEnumToString+0x20>
			break;

		case TEAM_YELLOW:
			return (uint8_t *) "yellow";
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <local_teamEnumToString+0x30>)
 80007a4:	e000      	b.n	80007a8 <local_teamEnumToString+0x20>
			break;

		default:
			return (uint8_t *) "none";
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <local_teamEnumToString+0x34>)
			break;
	}
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	0800561c 	.word	0x0800561c
 80007b8:	08005628 	.word	0x08005628
 80007bc:	08005634 	.word	0x08005634

080007c0 <local_stringToStrategyEnum>:

Strategy_t local_stringToStrategyEnum(uint8_t *string)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if ((strcmp((char *) string, "basic") == 0) || (strcmp((char *) string, "1") == 0))
 80007c8:	4912      	ldr	r1, [pc, #72]	@ (8000814 <local_stringToStrategyEnum+0x54>)
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fcfe 	bl	80001cc <strcmp>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <local_stringToStrategyEnum+0x24>
 80007d6:	4910      	ldr	r1, [pc, #64]	@ (8000818 <local_stringToStrategyEnum+0x58>)
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fcf7 	bl	80001cc <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <local_stringToStrategyEnum+0x28>
	{
		return STRATEGY_BASIC;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e010      	b.n	800080a <local_stringToStrategyEnum+0x4a>
	}
	else if ((strcmp((char *) string, "test") == 0) || (strcmp((char *) string, "2") == 0))
 80007e8:	490c      	ldr	r1, [pc, #48]	@ (800081c <local_stringToStrategyEnum+0x5c>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff fcee 	bl	80001cc <strcmp>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <local_stringToStrategyEnum+0x44>
 80007f6:	490a      	ldr	r1, [pc, #40]	@ (8000820 <local_stringToStrategyEnum+0x60>)
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fce7 	bl	80001cc <strcmp>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <local_stringToStrategyEnum+0x48>
	{
		return STRATEGY_TEST;
 8000804:	2302      	movs	r3, #2
 8000806:	e000      	b.n	800080a <local_stringToStrategyEnum+0x4a>
	}

	return STRATEGY_NONE;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	0800563c 	.word	0x0800563c
 8000818:	08005624 	.word	0x08005624
 800081c:	08005644 	.word	0x08005644
 8000820:	08005630 	.word	0x08005630

08000824 <local_strategyEnumToString>:

uint8_t *local_strategyEnumToString(Strategy_t strategy)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	switch (strategy) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d002      	beq.n	800083a <local_strategyEnumToString+0x16>
 8000834:	2b02      	cmp	r3, #2
 8000836:	d002      	beq.n	800083e <local_strategyEnumToString+0x1a>
 8000838:	e003      	b.n	8000842 <local_strategyEnumToString+0x1e>
		case STRATEGY_BASIC:
			return (uint8_t *) "basic";
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <local_strategyEnumToString+0x2c>)
 800083c:	e002      	b.n	8000844 <local_strategyEnumToString+0x20>
			break;

		case STRATEGY_TEST:
			return (uint8_t *) "test";
 800083e:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <local_strategyEnumToString+0x30>)
 8000840:	e000      	b.n	8000844 <local_strategyEnumToString+0x20>
			break;

		default:
			return (uint8_t *) "none";
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <local_strategyEnumToString+0x34>)
			break;
	}
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	0800563c 	.word	0x0800563c
 8000854:	08005644 	.word	0x08005644
 8000858:	08005634 	.word	0x08005634

0800085c <Config_get>:

///////// Functions /////////

Commands_Error_t Config_get(uint8_t *var_name)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if (strcmp((char *) var_name, "team") == 0)
 8000864:	4914      	ldr	r1, [pc, #80]	@ (80008b8 <Config_get+0x5c>)
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff fcb0 	bl	80001cc <strcmp>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10a      	bne.n	8000888 <Config_get+0x2c>
	{
		Utils_printToUart2(local_teamEnumToString(team));
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <Config_get+0x60>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff86 	bl	8000788 <local_teamEnumToString>
 800087c:	4603      	mov	r3, r0
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f916 	bl	8000ab0 <Utils_printToUart2>
		return CMD_ERROR_OK;
 8000884:	2300      	movs	r3, #0
 8000886:	e012      	b.n	80008ae <Config_get+0x52>
	}
	else if(strcmp((char *) var_name, "strategy") == 0)
 8000888:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <Config_get+0x64>)
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fc9e 	bl	80001cc <strcmp>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10a      	bne.n	80008ac <Config_get+0x50>
	{
		Utils_printToUart2(local_strategyEnumToString(strategy));
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <Config_get+0x68>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffc2 	bl	8000824 <local_strategyEnumToString>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f904 	bl	8000ab0 <Utils_printToUart2>
		return CMD_ERROR_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	e000      	b.n	80008ae <Config_get+0x52>
	}
	else
	{
		return CMD_ERROR_INVALID_ARGS;
 80008ac:	2303      	movs	r3, #3
	}
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800564c 	.word	0x0800564c
 80008bc:	200000f1 	.word	0x200000f1
 80008c0:	08005654 	.word	0x08005654
 80008c4:	200000f2 	.word	0x200000f2

080008c8 <Config_set>:

Commands_Error_t Config_set(uint8_t *var_name, uint8_t *value)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	if (strcmp((char *) var_name, "team") == 0)
 80008d2:	491b      	ldr	r1, [pc, #108]	@ (8000940 <Config_set+0x78>)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fc79 	bl	80001cc <strcmp>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d111      	bne.n	8000904 <Config_set+0x3c>
	{
		team = local_stringToTeamEnum(value);
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f7ff ff1f 	bl	8000724 <local_stringToTeamEnum>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <Config_set+0x7c>)
 80008ec:	701a      	strb	r2, [r3, #0]

		Utils_printToUart2(local_teamEnumToString(team));
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <Config_set+0x7c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff48 	bl	8000788 <local_teamEnumToString>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f8d8 	bl	8000ab0 <Utils_printToUart2>
		return CMD_ERROR_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	e019      	b.n	8000938 <Config_set+0x70>
	}
	else if(strcmp((char *) var_name, "strategy") == 0)
 8000904:	4910      	ldr	r1, [pc, #64]	@ (8000948 <Config_set+0x80>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fc60 	bl	80001cc <strcmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d111      	bne.n	8000936 <Config_set+0x6e>
	{
		strategy = local_stringToStrategyEnum(value);
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f7ff ff54 	bl	80007c0 <local_stringToStrategyEnum>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <Config_set+0x84>)
 800091e:	701a      	strb	r2, [r3, #0]

		Utils_printToUart2(local_strategyEnumToString(strategy));
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <Config_set+0x84>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff7d 	bl	8000824 <local_strategyEnumToString>
 800092a:	4603      	mov	r3, r0
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8bf 	bl	8000ab0 <Utils_printToUart2>
		return CMD_ERROR_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <Config_set+0x70>
	}
	else
	{
		return CMD_ERROR_INVALID_ARGS;
 8000936:	2303      	movs	r3, #3
	}
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	0800564c 	.word	0x0800564c
 8000944:	200000f1 	.word	0x200000f1
 8000948:	08005654 	.word	0x08005654
 800094c:	200000f2 	.word	0x200000f2

08000950 <Config_handleCommand>:

Commands_Error_t Config_handleCommand(Command_t command)
{
 8000950:	b084      	sub	sp, #16
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
 8000956:	f107 0c08 	add.w	ip, r7, #8
 800095a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Verify destination
	if (strcmp((char *) command.destination, "config") != 0)
 800095e:	f107 0309 	add.w	r3, r7, #9
 8000962:	4919      	ldr	r1, [pc, #100]	@ (80009c8 <Config_handleCommand+0x78>)
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc31 	bl	80001cc <strcmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <Config_handleCommand+0x24>
	{
		return CMD_ERROR_UNKNOWN;
 8000970:	2306      	movs	r3, #6
 8000972:	e023      	b.n	80009bc <Config_handleCommand+0x6c>
	}

	// Handle command type
	if (strcmp((char *) command.name, "get") == 0)
 8000974:	f107 0319 	add.w	r3, r7, #25
 8000978:	4914      	ldr	r1, [pc, #80]	@ (80009cc <Config_handleCommand+0x7c>)
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc26 	bl	80001cc <strcmp>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d106      	bne.n	8000994 <Config_handleCommand+0x44>
	{
		return Config_get(command.args[0]);
 8000986:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff66 	bl	800085c <Config_get>
 8000990:	4603      	mov	r3, r0
 8000992:	e013      	b.n	80009bc <Config_handleCommand+0x6c>
	}
	else if (strcmp((char *) command.name, "set") == 0)
 8000994:	f107 0319 	add.w	r3, r7, #25
 8000998:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <Config_handleCommand+0x80>)
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc16 	bl	80001cc <strcmp>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d109      	bne.n	80009ba <Config_handleCommand+0x6a>
	{
		return Config_set(command.args[0], command.args[1]);
 80009a6:	f107 0249 	add.w	r2, r7, #73	@ 0x49
 80009aa:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff89 	bl	80008c8 <Config_set>
 80009b6:	4603      	mov	r3, r0
 80009b8:	e000      	b.n	80009bc <Config_handleCommand+0x6c>
	}
	else
	{
		return CMD_ERROR_INVALID_NAME;
 80009ba:	2302      	movs	r3, #2
	}

}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009c4:	b004      	add	sp, #16
 80009c6:	4770      	bx	lr
 80009c8:	08005660 	.word	0x08005660
 80009cc:	08005668 	.word	0x08005668
 80009d0:	0800566c 	.word	0x0800566c

080009d4 <Utils_initEmptyCommand>:
 * @brief Initialize a command (set all elements to 0)
 * 
 * @param command_ptr 
 */
void Utils_initEmptyCommand(Command_t *command_ptr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	memset(command_ptr->destination, 0, COMMAND_DESTINATION_MAX_LENGTH);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3301      	adds	r3, #1
 80009e0:	2210      	movs	r2, #16
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 fdbb 	bl	8005560 <memset>
	memset(command_ptr->name, 0, COMMAND_NAME_MAX_LENGTH);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3311      	adds	r3, #17
 80009ee:	2210      	movs	r2, #16
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 fdb4 	bl	8005560 <memset>
	for (uint32_t i = 0; i < COMMAND_MAX_ARGS; i++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e00d      	b.n	8000a1a <Utils_initEmptyCommand+0x46>
	{
		memset(command_ptr->args[i], 0, COMMAND_ARG_MAX_LENGTH);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	015b      	lsls	r3, r3, #5
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	3301      	adds	r3, #1
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 fda6 	bl	8005560 <memset>
	for (uint32_t i = 0; i < COMMAND_MAX_ARGS; i++)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d9ee      	bls.n	80009fe <Utils_initEmptyCommand+0x2a>
	}
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Utils_setCommandPartByIndex>:
 * @param str string to store
 * @param length length of the string
 * @return Commands_Error_t 
 */
Commands_Error_t Utils_setCommandPartByIndex(Command_t *command_ptr, uint32_t index, uint8_t *str, uint32_t length)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	603b      	str	r3, [r7, #0]
	switch (index) {
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <Utils_setCommandPartByIndex+0x1c>
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d00e      	beq.n	8000a62 <Utils_setCommandPartByIndex+0x38>
 8000a44:	e01b      	b.n	8000a7e <Utils_setCommandPartByIndex+0x54>
		case 0:
			if (length > COMMAND_DESTINATION_MAX_LENGTH)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b10      	cmp	r3, #16
 8000a4a:	d901      	bls.n	8000a50 <Utils_setCommandPartByIndex+0x26>
			{
				return CMD_ERROR_INVALID_DESTINATION;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e02b      	b.n	8000aa8 <Utils_setCommandPartByIndex+0x7e>
			}
			strncpy((char *) command_ptr->destination, (char *) str, length);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3301      	adds	r3, #1
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fd89 	bl	8005570 <strncpy>
			return CMD_ERROR_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e022      	b.n	8000aa8 <Utils_setCommandPartByIndex+0x7e>
			break;

		case 1:
			if (length > COMMAND_NAME_MAX_LENGTH)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b10      	cmp	r3, #16
 8000a66:	d901      	bls.n	8000a6c <Utils_setCommandPartByIndex+0x42>
			{
				return CMD_ERROR_INVALID_NAME;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e01d      	b.n	8000aa8 <Utils_setCommandPartByIndex+0x7e>
			}
			strncpy((char *) command_ptr->name, (char *) str, length);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3311      	adds	r3, #17
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 fd7b 	bl	8005570 <strncpy>
			return CMD_ERROR_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e014      	b.n	8000aa8 <Utils_setCommandPartByIndex+0x7e>
			break;

		default:
			// Check if argument can exist (index not too big)
			if ((index >= (COMMAND_MAX_ARGS + 2)) || (length > COMMAND_ARG_MAX_LENGTH))
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d802      	bhi.n	8000a8a <Utils_setCommandPartByIndex+0x60>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d901      	bls.n	8000a8e <Utils_setCommandPartByIndex+0x64>
			{
				return CMD_ERROR_INVALID_ARGS;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e00c      	b.n	8000aa8 <Utils_setCommandPartByIndex+0x7e>
			}
			strncpy((char *) command_ptr->args[index - 2], (char *) str, length);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3b02      	subs	r3, #2
 8000a92:	3301      	adds	r3, #1
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4413      	add	r3, r2
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fd65 	bl	8005570 <strncpy>
			return CMD_ERROR_OK;
 8000aa6:	2300      	movs	r3, #0

			break;
	}

	return CMD_ERROR_COULD_NOT_PARSE;
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <Utils_printToUart2>:
 * @brief print a string using UART2 via DMA. ONLY 1 PRINT PER INTERRUPT WILL WORK.
 * 
 * @param string zero-terminated string to be printed
 */
void Utils_printToUart2(uint8_t* string)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, string, strlen((char *) string));
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fb91 	bl	80001e0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <Utils_printToUart2+0x24>)
 8000ac8:	f003 f9ca 	bl	8003e60 <HAL_UART_Transmit_DMA>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001f4 	.word	0x200001f4

08000ad8 <Utils_printCommandError>:
 * @brief print an error message based on the error.
 * 
 * @param error error to print the message for.
 */
void Utils_printCommandError(Commands_Error_t error)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	switch (error) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d82c      	bhi.n	8000b44 <Utils_printCommandError+0x6c>
 8000aea:	a201      	add	r2, pc, #4	@ (adr r2, 8000af0 <Utils_printCommandError+0x18>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b0d 	.word	0x08000b0d
 8000af4:	08000b15 	.word	0x08000b15
 8000af8:	08000b1d 	.word	0x08000b1d
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	08000b2d 	.word	0x08000b2d
 8000b04:	08000b35 	.word	0x08000b35
 8000b08:	08000b3d 	.word	0x08000b3d
		case CMD_ERROR_INVALID_DESTINATION:
			Utils_printToUart2((uint8_t *) "[Error] Invalid command destination\n");
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <Utils_printCommandError+0x7c>)
 8000b0e:	f7ff ffcf 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b12:	e01b      	b.n	8000b4c <Utils_printCommandError+0x74>
		case CMD_ERROR_INVALID_NAME:
			Utils_printToUart2((uint8_t *) "[Error] Invalid command name\n");
 8000b14:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <Utils_printCommandError+0x80>)
 8000b16:	f7ff ffcb 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b1a:	e017      	b.n	8000b4c <Utils_printCommandError+0x74>
		case CMD_ERROR_INVALID_ARGS:
			Utils_printToUart2((uint8_t *) "[Error] Invalid arguments given\n");
 8000b1c:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <Utils_printCommandError+0x84>)
 8000b1e:	f7ff ffc7 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b22:	e013      	b.n	8000b4c <Utils_printCommandError+0x74>
		case CMD_ERROR_COMMAND_TOO_LONG:
			Utils_printToUart2((uint8_t *) "[Error] Command is too long\n");
 8000b24:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <Utils_printCommandError+0x88>)
 8000b26:	f7ff ffc3 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b2a:	e00f      	b.n	8000b4c <Utils_printCommandError+0x74>
		case CMD_ERROR_COULD_NOT_PARSE:
			Utils_printToUart2((uint8_t *) "[Error] Could not parse command\n");
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <Utils_printCommandError+0x8c>)
 8000b2e:	f7ff ffbf 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b32:	e00b      	b.n	8000b4c <Utils_printCommandError+0x74>
		case CMD_ERROR_UNKNOWN:
			Utils_printToUart2((uint8_t *) "[Error] Unspecified error\n");
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <Utils_printCommandError+0x90>)
 8000b36:	f7ff ffbb 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b3a:	e007      	b.n	8000b4c <Utils_printCommandError+0x74>

		case CMD_ERROR_NOT_IMPLEMENTED:
			Utils_printToUart2((uint8_t *) "[Error] Not implemented\n");
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <Utils_printCommandError+0x94>)
 8000b3e:	f7ff ffb7 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b42:	e003      	b.n	8000b4c <Utils_printCommandError+0x74>

		default:
			Utils_printToUart2((uint8_t *) "[Error] no error message (default case) \n");
 8000b44:	480a      	ldr	r0, [pc, #40]	@ (8000b70 <Utils_printCommandError+0x98>)
 8000b46:	f7ff ffb3 	bl	8000ab0 <Utils_printToUart2>
			break;
 8000b4a:	bf00      	nop
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08005670 	.word	0x08005670
 8000b58:	08005698 	.word	0x08005698
 8000b5c:	080056b8 	.word	0x080056b8
 8000b60:	080056dc 	.word	0x080056dc
 8000b64:	080056fc 	.word	0x080056fc
 8000b68:	08005720 	.word	0x08005720
 8000b6c:	0800573c 	.word	0x0800573c
 8000b70:	08005758 	.word	0x08005758

08000b74 <Motors_Init>:
/**
 * @brief Initialize all 3 motors.
 * 
 */
void Motors_Init()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; ++i)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	e026      	b.n	8000bce <Motors_Init+0x5a>
	{
		motor_states[i].direction = DIR_FORWARD;
 8000b80:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <Motors_Init+0x6c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	2200      	movs	r2, #0
 8000b8a:	711a      	strb	r2, [r3, #4]
		motor_states[i].enabled = false;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <Motors_Init+0x6c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	715a      	strb	r2, [r3, #5]
		motor_states[i].step_period_us = 0;
 8000b98:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <Motors_Init+0x6c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

		// IT Not handled by update()
		HAL_TIM_Base_Stop_IT(MOT_TIM_HANDLE_PTR(i));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d00b      	beq.n	8000bc0 <Motors_Init+0x4c>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d006      	beq.n	8000bbc <Motors_Init+0x48>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d101      	bne.n	8000bb8 <Motors_Init+0x44>
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <Motors_Init+0x70>)
 8000bb6:	e004      	b.n	8000bc2 <Motors_Init+0x4e>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e002      	b.n	8000bc2 <Motors_Init+0x4e>
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <Motors_Init+0x74>)
 8000bbe:	e000      	b.n	8000bc2 <Motors_Init+0x4e>
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <Motors_Init+0x78>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fcfc 	bl	80035c0 <HAL_TIM_Base_Stop_IT>
	for (int i = 0; i < 3; ++i)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	ddd5      	ble.n	8000b80 <Motors_Init+0xc>
	}

	Motors_Update();
 8000bd4:	f000 f878 	bl	8000cc8 <Motors_Update>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000f4 	.word	0x200000f4
 8000be4:	20000110 	.word	0x20000110
 8000be8:	2000015c 	.word	0x2000015c
 8000bec:	200001a8 	.word	0x200001a8

08000bf0 <Motors_SetSpeedSingle>:
 * @param motor_index index of the motor
 * @param direction direction for the motor
 * @param step_period_us period of a step in microseconds
 */
void Motors_SetSpeedSingle(uint8_t motor_index, MotorDirection_t direction, uint32_t step_period_us)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	603a      	str	r2, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	71bb      	strb	r3, [r7, #6]
	motor_states[motor_index].direction = direction;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <Motors_SetSpeedSingle+0x80>)
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	711a      	strb	r2, [r3, #4]
	motor_states[motor_index].step_period_us = step_period_us;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4918      	ldr	r1, [pc, #96]	@ (8000c70 <Motors_SetSpeedSingle+0x80>)
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	motor_states[motor_index].enabled = true;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <Motors_SetSpeedSingle+0x80>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2201      	movs	r2, #1
 8000c20:	715a      	strb	r2, [r3, #5]

	// Activate IT if needed
	if (!motor_it_enabled[motor_index] && step_period_us != 0)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a13      	ldr	r2, [pc, #76]	@ (8000c74 <Motors_SetSpeedSingle+0x84>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	f083 0301 	eor.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d019      	beq.n	8000c66 <Motors_SetSpeedSingle+0x76>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d016      	beq.n	8000c66 <Motors_SetSpeedSingle+0x76>
	{
		motor_it_enabled[motor_index] = true;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <Motors_SetSpeedSingle+0x84>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	54d1      	strb	r1, [r2, r3]
		HAL_TIM_Base_Start_IT(MOT_TIM_HANDLE_PTR(motor_index));
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d00b      	beq.n	8000c5e <Motors_SetSpeedSingle+0x6e>
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d006      	beq.n	8000c5a <Motors_SetSpeedSingle+0x6a>
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <Motors_SetSpeedSingle+0x66>
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <Motors_SetSpeedSingle+0x88>)
 8000c54:	e004      	b.n	8000c60 <Motors_SetSpeedSingle+0x70>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e002      	b.n	8000c60 <Motors_SetSpeedSingle+0x70>
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <Motors_SetSpeedSingle+0x8c>)
 8000c5c:	e000      	b.n	8000c60 <Motors_SetSpeedSingle+0x70>
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <Motors_SetSpeedSingle+0x90>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 fc59 	bl	8003518 <HAL_TIM_Base_Start_IT>
	}
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000f4 	.word	0x200000f4
 8000c74:	2000010c 	.word	0x2000010c
 8000c78:	20000110 	.word	0x20000110
 8000c7c:	2000015c 	.word	0x2000015c
 8000c80:	200001a8 	.word	0x200001a8

08000c84 <Motors_SetSpeedAll>:
		HAL_TIM_Base_Stop_IT(MOT_TIM_HANDLE_PTR(motor_index));
	}
}

void Motors_SetSpeedAll(MotorDirection_t *directions, uint32_t *step_periods_us)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; ++i)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e010      	b.n	8000cb6 <Motors_SetSpeedAll+0x32>
	{
		Motors_SetSpeedSingle(i, directions[i], step_periods_us[i]);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	b2d8      	uxtb	r0, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	7819      	ldrb	r1, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	f7ff ffa0 	bl	8000bf0 <Motors_SetSpeedSingle>
	for (int i = 0; i < 3; ++i)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	ddeb      	ble.n	8000c94 <Motors_SetSpeedAll+0x10>
	}
	Motors_Update();
 8000cbc:	f000 f804 	bl	8000cc8 <Motors_Update>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <Motors_Update>:

/**
 * @brief Update the motors timer overflow and dir pins to match the contents of the motor_states array
 */
void Motors_Update()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; ++i)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	e061      	b.n	8000d98 <Motors_Update+0xd0>
	{
		// 2 * MOT_TIM_TICK_PERIOD_US because 1 step = 2 overflows
		uint32_t arr_value = motor_states[i].step_period_us / (2 * MOT_TIM_TICKTIME_US);
 8000cd4:	4a34      	ldr	r2, [pc, #208]	@ (8000da8 <Motors_Update+0xe0>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cdc:	085b      	lsrs	r3, r3, #1
 8000cde:	603b      	str	r3, [r7, #0]

		// force it to be 16 bit
		if (arr_value > 65535)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce6:	d302      	bcc.n	8000cee <Motors_Update+0x26>
		{
			arr_value = 65535;
 8000ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cec:	603b      	str	r3, [r7, #0]
		}

		__HAL_TIM_SET_AUTORELOAD(MOT_TIM_HANDLE_PTR(i), arr_value);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d00b      	beq.n	8000d0c <Motors_Update+0x44>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d006      	beq.n	8000d08 <Motors_Update+0x40>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <Motors_Update+0x3c>
 8000d00:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <Motors_Update+0xe4>)
 8000d02:	e004      	b.n	8000d0e <Motors_Update+0x46>
 8000d04:	2300      	movs	r3, #0
 8000d06:	e002      	b.n	8000d0e <Motors_Update+0x46>
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <Motors_Update+0xe8>)
 8000d0a:	e000      	b.n	8000d0e <Motors_Update+0x46>
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <Motors_Update+0xec>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d00b      	beq.n	8000d32 <Motors_Update+0x6a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d006      	beq.n	8000d2e <Motors_Update+0x66>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <Motors_Update+0x62>
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <Motors_Update+0xe4>)
 8000d28:	e004      	b.n	8000d34 <Motors_Update+0x6c>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e002      	b.n	8000d34 <Motors_Update+0x6c>
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <Motors_Update+0xe8>)
 8000d30:	e000      	b.n	8000d34 <Motors_Update+0x6c>
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <Motors_Update+0xec>)
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	60da      	str	r2, [r3, #12]

		// Direction pin state
		HAL_GPIO_WritePin(MOT_DIR_GPIO_PORT(i), MOT_DIR_GPIO_PIN(i), motor_states[i].direction);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d00d      	beq.n	8000d5a <Motors_Update+0x92>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d007      	beq.n	8000d54 <Motors_Update+0x8c>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <Motors_Update+0x88>
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	e006      	b.n	8000d5e <Motors_Update+0x96>
 8000d50:	2000      	movs	r0, #0
 8000d52:	e004      	b.n	8000d5e <Motors_Update+0x96>
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d58:	e001      	b.n	8000d5e <Motors_Update+0x96>
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d00c      	beq.n	8000d7e <Motors_Update+0xb6>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d007      	beq.n	8000d7a <Motors_Update+0xb2>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf0c      	ite	eq
 8000d70:	2301      	moveq	r3, #1
 8000d72:	2300      	movne	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	e003      	b.n	8000d82 <Motors_Update+0xba>
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	e001      	b.n	8000d82 <Motors_Update+0xba>
 8000d7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d82:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <Motors_Update+0xe0>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f001 f9b5 	bl	80020fc <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; ++i)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3301      	adds	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	dd9a      	ble.n	8000cd4 <Motors_Update+0xc>

		// Enable pin state
		// Enable not supported yet.
	}
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000f4 	.word	0x200000f4
 8000dac:	20000110 	.word	0x20000110
 8000db0:	2000015c 	.word	0x2000015c
 8000db4:	200001a8 	.word	0x200001a8

08000db8 <Motors_TimerITCallback>:

void Motors_TimerITCallback(TIM_HandleTypeDef* htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == MOT0_TIM_HANDLE_PTR->Instance)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <Motors_TimerITCallback+0x54>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d105      	bne.n	8000dd8 <Motors_TimerITCallback+0x20>
	{
		HAL_GPIO_TogglePin(MOT0_STP_GPIO_Port, MOT0_STP_Pin);
 8000dcc:	2102      	movs	r1, #2
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd2:	f001 f9ab 	bl	800212c <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == MOT2_TIM_HANDLE_PTR->Instance)
	{
		HAL_GPIO_TogglePin(MOT2_STP_GPIO_Port, MOT2_STP_Pin);
	}
}
 8000dd6:	e015      	b.n	8000e04 <Motors_TimerITCallback+0x4c>
	else if (htim->Instance == MOT1_TIM_HANDLE_PTR->Instance)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <Motors_TimerITCallback+0x58>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d105      	bne.n	8000df0 <Motors_TimerITCallback+0x38>
		HAL_GPIO_TogglePin(MOT1_STP_GPIO_Port, MOT1_STP_Pin);
 8000de4:	2120      	movs	r1, #32
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f001 f99f 	bl	800212c <HAL_GPIO_TogglePin>
}
 8000dee:	e009      	b.n	8000e04 <Motors_TimerITCallback+0x4c>
	else if (htim->Instance == MOT2_TIM_HANDLE_PTR->Instance)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <Motors_TimerITCallback+0x5c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d103      	bne.n	8000e04 <Motors_TimerITCallback+0x4c>
		HAL_GPIO_TogglePin(MOT2_STP_GPIO_Port, MOT2_STP_Pin);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <Motors_TimerITCallback+0x60>)
 8000e00:	f001 f994 	bl	800212c <HAL_GPIO_TogglePin>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000110 	.word	0x20000110
 8000e10:	2000015c 	.word	0x2000015c
 8000e14:	200001a8 	.word	0x200001a8
 8000e18:	48000400 	.word	0x48000400

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_DMA_Init+0x38>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e26:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <MX_DMA_Init+0x38>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_DMA_Init+0x38>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2011      	movs	r0, #17
 8000e40:	f000 fd45 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e44:	2011      	movs	r0, #17
 8000e46:	f000 fd5e 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a41      	ldr	r2, [pc, #260]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b3c      	ldr	r3, [pc, #240]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b39      	ldr	r3, [pc, #228]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a35      	ldr	r2, [pc, #212]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b33      	ldr	r3, [pc, #204]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	4b30      	ldr	r3, [pc, #192]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a2f      	ldr	r2, [pc, #188]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT0_DIR_Pin|MOT0_STP_Pin|MOT0_EN_Pin|MOT1_DIR_Pin
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f640 017b 	movw	r1, #2171	@ 0x87b
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f001 f910 	bl	80020fc <HAL_GPIO_WritePin>
                          |MOT1_STP_Pin|MOT1_EN_Pin|MOT2_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|MOT2_EN_Pin|MOT2_STP_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2138      	movs	r1, #56	@ 0x38
 8000ee0:	4826      	ldr	r0, [pc, #152]	@ (8000f7c <MX_GPIO_Init+0x124>)
 8000ee2:	f001 f90b 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT0_DIR_Pin|MOT0_STP_Pin|MOT0_EN_Pin|MOT1_DIR_Pin
 8000ee6:	f640 037b 	movw	r3, #2171	@ 0x87b
 8000eea:	617b      	str	r3, [r7, #20]
                          |MOT1_STP_Pin|MOT1_EN_Pin|MOT2_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f02:	f000 ff91 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f06:	f44f 53bc 	mov.w	r3, #6016	@ 0x1780
 8000f0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1e:	f000 ff83 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000f22:	23c3      	movs	r3, #195	@ 0xc3
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_GPIO_Init+0x124>)
 8000f36:	f000 ff77 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|MOT2_EN_Pin|MOT2_STP_Pin;
 8000f3a:	2338      	movs	r3, #56	@ 0x38
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <MX_GPIO_Init+0x124>)
 8000f52:	f000 ff69 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f56:	2308      	movs	r3, #8
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_GPIO_Init+0x128>)
 8000f6a:	f000 ff5d 	bl	8001e28 <HAL_GPIO_Init>

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	@ 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48001c00 	.word	0x48001c00

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	MotorDirection_t dirs[3] = {DIR_FORWARD, DIR_FORWARD, DIR_BACKWARD};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	733b      	strb	r3, [r7, #12]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	737b      	strb	r3, [r7, #13]
 8000f92:	2301      	movs	r3, #1
 8000f94:	73bb      	strb	r3, [r7, #14]
	uint32_t periods[3] = {10000, 10000, 10000};
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <main+0x64>)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fb45 	bl	800162e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f828 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f7ff ff56 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fac:	f7ff ff36 	bl	8000e1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 fa44 	bl	800143c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fb4:	f000 f92c 	bl	8001210 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000fb8:	f000 f978 	bl	80012ac <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fbc:	f000 f9ac 	bl	8001318 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Motors_Init();
 8000fc0:	f7ff fdd8 	bl	8000b74 <Motors_Init>
  HAL_UART_Receive_IT(&huart2, &(command_buffer[0]), 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4909      	ldr	r1, [pc, #36]	@ (8000fec <main+0x68>)
 8000fc8:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <main+0x6c>)
 8000fca:	f002 fefd 	bl	8003dc8 <HAL_UART_Receive_IT>

  Motors_SetSpeedAll(dirs, periods);
 8000fce:	463a      	mov	r2, r7
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe54 	bl	8000c84 <Motors_SetSpeedAll>
  Utils_printToUart2((uint8_t *) "Init OK\n");
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <main+0x70>)
 8000fde:	f7ff fd67 	bl	8000ab0 <Utils_printToUart2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <main+0x5e>
 8000fe6:	bf00      	nop
 8000fe8:	08005790 	.word	0x08005790
 8000fec:	20000028 	.word	0x20000028
 8000ff0:	200001f4 	.word	0x200001f4
 8000ff4:	08005784 	.word	0x08005784

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	@ 0x58
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2244      	movs	r2, #68	@ 0x44
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 faaa 	bl	8005560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101e:	f001 f8ad 	bl	800217c <HAL_PWREx_ControlVoltageScaling>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001028:	f000 f854 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001034:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001046:	2310      	movs	r3, #16
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104a:	2307      	movs	r3, #7
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4618      	mov	r0, r3
 800105c:	f001 f8e4 	bl	8002228 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001066:	f000 f835 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2103      	movs	r1, #3
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fce4 	bl	8002a50 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108e:	f000 f821 	bl	80010d4 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3758      	adds	r7, #88	@ 0x58
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//////// TIMER INTERRUPTS ///////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	// Callback for motor control (Impulses for the stepper)
	Motors_TimerITCallback(htim);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fe88 	bl	8000db8 <Motors_TimerITCallback>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_UART_RxCpltCallback+0x20>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d102      	bne.n	80010c8 <HAL_UART_RxCpltCallback+0x18>
	{
		Commands_RxCallback(huart);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fa3a 	bl	800053c <Commands_RxCallback>
	}
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40004400 	.word	0x40004400

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_MspInit+0x44>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <HAL_MspInit+0x44>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <HAL_MspInit+0x44>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001108:	6593      	str	r3, [r2, #88]	@ 0x58
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <MemManage_Handler+0x4>

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <UsageFault_Handler+0x4>

08001150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 faab 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <DMA1_Channel7_IRQHandler+0x10>)
 800118e:	f000 fd6c 	bl	8001c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000027c 	.word	0x2000027c

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <TIM2_IRQHandler+0x10>)
 80011a2:	f002 fa3c 	bl	800361e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000110 	.word	0x20000110

080011b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <USART2_IRQHandler+0x10>)
 80011b6:	f002 fecf 	bl	8003f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200001f4 	.word	0x200001f4

080011c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <TIM6_DAC_IRQHandler+0x10>)
 80011ca:	f002 fa28 	bl	800361e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000015c 	.word	0x2000015c

080011d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <TIM7_IRQHandler+0x10>)
 80011de:	f002 fa1e 	bl	800361e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001a8 	.word	0x200001a8

080011ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001234:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001238:	223f      	movs	r2, #63	@ 0x3f
 800123a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM2_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001244:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_TIM2_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001256:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001258:	f002 f906 	bl	8003468 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001262:	f7ff ff37 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001274:	f002 fada 	bl	800382c <HAL_TIM_ConfigClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800127e:	f7ff ff29 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM2_Init+0x98>)
 8001290:	f002 fcc8 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800129a:	f7ff ff1b 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000110 	.word	0x20000110

080012ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <MX_TIM6_Init+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012c4:	223f      	movs	r2, #63	@ 0x3f
 80012c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012de:	f002 f8c3 	bl	8003468 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e8:	f7ff fef4 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012fa:	f002 fc93 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001304:	f7ff fee6 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000015c 	.word	0x2000015c
 8001314:	40001000 	.word	0x40001000

08001318 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_TIM7_Init+0x64>)
 800132a:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <MX_TIM7_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_TIM7_Init+0x64>)
 8001330:	223f      	movs	r2, #63	@ 0x3f
 8001332:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_TIM7_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_TIM7_Init+0x64>)
 800133c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_TIM7_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <MX_TIM7_Init+0x64>)
 800134a:	f002 f88d 	bl	8003468 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001354:	f7ff febe 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_TIM7_Init+0x64>)
 8001366:	f002 fc5d 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001370:	f7ff feb0 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001a8 	.word	0x200001a8
 8001380:	40001400 	.word	0x40001400

08001384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001394:	d114      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	4a25      	ldr	r2, [pc, #148]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a2:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f000 fa8b 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f000 faa4 	bl	8001906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80013be:	e032      	b.n	8001426 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_TIM_Base_MspInit+0xb0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d114      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2036      	movs	r0, #54	@ 0x36
 80013e8:	f000 fa71 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013ec:	2036      	movs	r0, #54	@ 0x36
 80013ee:	f000 fa8a 	bl	8001906 <HAL_NVIC_EnableIRQ>
}
 80013f2:	e018      	b.n	8001426 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_TIM_Base_MspInit+0xb4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d113      	bne.n	8001426 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_TIM_Base_MspInit+0xac>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2037      	movs	r0, #55	@ 0x37
 800141c:	f000 fa57 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001420:	2037      	movs	r0, #55	@ 0x37
 8001422:	f000 fa70 	bl	8001906 <HAL_NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40001000 	.word	0x40001000
 8001438:	40001400 	.word	0x40001400

0800143c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	@ (8001498 <MX_USART2_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART2_UART_Init+0x58>)
 8001480:	f002 fc54 	bl	8003d2c <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f7ff fe23 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f4 	.word	0x200001f4
 8001498:	40004400 	.word	0x40004400

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09e      	sub	sp, #120	@ 0x78
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	2254      	movs	r2, #84	@ 0x54
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f84f 	bl	8005560 <memset>
  if(uartHandle->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a41      	ldr	r2, [pc, #260]	@ (80015cc <HAL_UART_MspInit+0x130>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d17a      	bne.n	80015c2 <HAL_UART_MspInit+0x126>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fcdd 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff fdf6 	bl	80010d4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <HAL_UART_MspInit+0x134>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <HAL_UART_MspInit+0x134>)
 80014ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_UART_MspInit+0x134>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <HAL_UART_MspInit+0x134>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <HAL_UART_MspInit+0x134>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_UART_MspInit+0x134>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001518:	2304      	movs	r3, #4
 800151a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001528:	2307      	movs	r3, #7
 800152a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001536:	f000 fc77 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800153a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800153e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800154c:	2303      	movs	r3, #3
 800154e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f000 fc65 	bl	8001e28 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800155e:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001560:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001562:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001566:	2202      	movs	r2, #2
 8001568:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 800156c:	2210      	movs	r2, #16
 800156e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001578:	2280      	movs	r2, #128	@ 0x80
 800157a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001590:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001594:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001596:	480f      	ldr	r0, [pc, #60]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 8001598:	f000 f9d0 	bl	800193c <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80015a2:	f7ff fd97 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 80015aa:	671a      	str	r2, [r3, #112]	@ 0x70
 80015ac:	4a09      	ldr	r2, [pc, #36]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2026      	movs	r0, #38	@ 0x26
 80015b8:	f000 f989 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015bc:	2026      	movs	r0, #38	@ 0x26
 80015be:	f000 f9a2 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015c2:	bf00      	nop
 80015c4:	3778      	adds	r7, #120	@ 0x78
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004400 	.word	0x40004400
 80015d0:	40021000 	.word	0x40021000
 80015d4:	2000027c 	.word	0x2000027c
 80015d8:	40020080 	.word	0x40020080

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001614 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff fe04 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f003 ffc5 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7ff fcb9 	bl	8000f84 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001614:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001620:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 8001624:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001628:	200002c8 	.word	0x200002c8

0800162c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_IRQHandler>

0800162e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f93d 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f80e 	bl	8001660 <HAL_InitTick>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	e001      	b.n	8001654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001650:	f7ff fd46 	bl	80010e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001654:	79fb      	ldrb	r3, [r7, #7]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_InitTick+0x70>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_InitTick+0x6c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f949 	bl	8001922 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d809      	bhi.n	80016b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f913 	bl	80018ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_InitTick+0x74>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e007      	b.n	80016c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e004      	b.n	80016c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e001      	b.n	80016c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	200002c4 	.word	0x200002c4

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200002c4 	.word	0x200002c4

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	@ (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	@ (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	@ (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	@ (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff29 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff3e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff31 	bl	800177c <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e098      	b.n	8001a80 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	4b4d      	ldr	r3, [pc, #308]	@ (8001a8c <HAL_DMA_Init+0x150>)
 8001956:	429a      	cmp	r2, r3
 8001958:	d80f      	bhi.n	800197a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b4b      	ldr	r3, [pc, #300]	@ (8001a90 <HAL_DMA_Init+0x154>)
 8001962:	4413      	add	r3, r2
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_DMA_Init+0x158>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	009a      	lsls	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a48      	ldr	r2, [pc, #288]	@ (8001a98 <HAL_DMA_Init+0x15c>)
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40
 8001978:	e00e      	b.n	8001998 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	4b46      	ldr	r3, [pc, #280]	@ (8001a9c <HAL_DMA_Init+0x160>)
 8001982:	4413      	add	r3, r2
 8001984:	4a43      	ldr	r2, [pc, #268]	@ (8001a94 <HAL_DMA_Init+0x158>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	009a      	lsls	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a42      	ldr	r2, [pc, #264]	@ (8001aa0 <HAL_DMA_Init+0x164>)
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019f2:	d039      	beq.n	8001a68 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <HAL_DMA_Init+0x15c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11a      	bne.n	8001a34 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_DMA_Init+0x168>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f003 031c 	and.w	r3, r3, #28
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4924      	ldr	r1, [pc, #144]	@ (8001aa4 <HAL_DMA_Init+0x168>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_DMA_Init+0x168>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a24:	f003 031c 	and.w	r3, r3, #28
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	491d      	ldr	r1, [pc, #116]	@ (8001aa4 <HAL_DMA_Init+0x168>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
 8001a32:	e019      	b.n	8001a68 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <HAL_DMA_Init+0x16c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	210f      	movs	r1, #15
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4917      	ldr	r1, [pc, #92]	@ (8001aa8 <HAL_DMA_Init+0x16c>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_DMA_Init+0x16c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f003 031c 	and.w	r3, r3, #28
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	4911      	ldr	r1, [pc, #68]	@ (8001aa8 <HAL_DMA_Init+0x16c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40020407 	.word	0x40020407
 8001a90:	bffdfff8 	.word	0xbffdfff8
 8001a94:	cccccccd 	.word	0xcccccccd
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	bffdfbf8 	.word	0xbffdfbf8
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	400200a8 	.word	0x400200a8
 8001aa8:	400204a8 	.word	0x400204a8

08001aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Start_IT+0x20>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e04b      	b.n	8001b64 <HAL_DMA_Start_IT+0xb8>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d13a      	bne.n	8001b56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f95f 	bl	8001dc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 020e 	orr.w	r2, r2, #14
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e00f      	b.n	8001b44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 020a 	orr.w	r2, r2, #10
 8001b42:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e005      	b.n	8001b62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d008      	beq.n	8001b96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2204      	movs	r2, #4
 8001b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e022      	b.n	8001bdc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 020e 	bic.w	r2, r2, #14
 8001ba4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f003 021c 	and.w	r2, r3, #28
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d005      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e029      	b.n	8001c60 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020e 	bic.w	r2, r2, #14
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	f003 021c 	and.w	r2, r3, #28
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
    }
  }
  return status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f003 031c 	and.w	r3, r3, #28
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d026      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x7a>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d021      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0204 	bic.w	r2, r2, #4
 8001cbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 021c 	and.w	r2, r3, #28
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	2104      	movs	r1, #4
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d071      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ce2:	e06c      	b.n	8001dbe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	f003 031c 	and.w	r3, r3, #28
 8001cec:	2202      	movs	r2, #2
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02e      	beq.n	8001d56 <HAL_DMA_IRQHandler+0xec>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d029      	beq.n	8001d56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10b      	bne.n	8001d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020a 	bic.w	r2, r2, #10
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	f003 021c 	and.w	r2, r3, #28
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	2102      	movs	r1, #2
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d038      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d54:	e033      	b.n	8001dbe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f003 031c 	and.w	r3, r3, #28
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02a      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x156>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d025      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 020e 	bic.w	r2, r2, #14
 8001d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f003 021c 	and.w	r2, r3, #28
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
}
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	f003 021c 	and.w	r2, r3, #28
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d108      	bne.n	8001e0c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e0a:	e007      	b.n	8001e1c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	e148      	b.n	80020ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 813a 	beq.w	80020c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x40>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d017      	beq.n	8001f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d123      	bne.n	8001f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	6939      	ldr	r1, [r7, #16]
 8001f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8094 	beq.w	80020c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9c:	4b52      	ldr	r3, [pc, #328]	@ (80020e8 <HAL_GPIO_Init+0x2c0>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa0:	4a51      	ldr	r2, [pc, #324]	@ (80020e8 <HAL_GPIO_Init+0x2c0>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80020e8 <HAL_GPIO_Init+0x2c0>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80020ec <HAL_GPIO_Init+0x2c4>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1d4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a43      	ldr	r2, [pc, #268]	@ (80020f0 <HAL_GPIO_Init+0x2c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1d0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a42      	ldr	r2, [pc, #264]	@ (80020f4 <HAL_GPIO_Init+0x2cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1cc>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x1d6>
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x1d6>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x1d6>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800200e:	4937      	ldr	r1, [pc, #220]	@ (80020ec <HAL_GPIO_Init+0x2c4>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800201c:	4b36      	ldr	r3, [pc, #216]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002040:	4a2d      	ldr	r2, [pc, #180]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002046:	4b2c      	ldr	r3, [pc, #176]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002094:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800209a:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020be:	4a0e      	ldr	r2, [pc, #56]	@ (80020f8 <HAL_GPIO_Init+0x2d0>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f47f aeaf 	bne.w	8001e38 <HAL_GPIO_Init+0x10>
  }
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000800 	.word	0x48000800
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002118:	e002      	b.n	8002120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43d9      	mvns	r1, r3
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	400b      	ands	r3, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <HAL_PWREx_GetVoltageRange+0x18>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007000 	.word	0x40007000

0800217c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218a:	d130      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800218c:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d038      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2232      	movs	r2, #50	@ 0x32
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0c9b      	lsrs	r3, r3, #18
 80021bc:	3301      	adds	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c0:	e002      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d4:	d102      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f2      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	d110      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e00f      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fa:	d007      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83

08002228 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f000 bc02 	b.w	8002a40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223c:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002246:	4b94      	ldr	r3, [pc, #592]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80e4 	beq.w	8002426 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_RCC_OscConfig+0x4c>
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	f040 808b 	bne.w	8002382 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 8087 	bne.w	8002382 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002274:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_OscConfig+0x64>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e3d9      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	4b81      	ldr	r3, [pc, #516]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_RCC_OscConfig+0x7e>
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a4:	e005      	b.n	80022b2 <HAL_RCC_OscConfig+0x8a>
 80022a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d223      	bcs.n	80022fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fd8c 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3ba      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ca:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a72      	ldr	r2, [pc, #456]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	496d      	ldr	r1, [pc, #436]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	4968      	ldr	r1, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	e025      	b.n	800234a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fe:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a65      	ldr	r2, [pc, #404]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4960      	ldr	r1, [pc, #384]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800231c:	4b5e      	ldr	r3, [pc, #376]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	495b      	ldr	r1, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fd4c 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e37a      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 fc81 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4950      	ldr	r1, [pc, #320]	@ (800249c <HAL_RCC_OscConfig+0x274>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a4e      	ldr	r2, [pc, #312]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002368:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800236a:	4b4e      	ldr	r3, [pc, #312]	@ (80024a4 <HAL_RCC_OscConfig+0x27c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f976 	bl	8001660 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d052      	beq.n	8002424 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	e35e      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d032      	beq.n	80023f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a42      	ldr	r2, [pc, #264]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002396:	f7ff f9b3 	bl	8001700 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800239e:	f7ff f9af 	bl	8001700 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e347      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a35      	ldr	r2, [pc, #212]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4930      	ldr	r1, [pc, #192]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023da:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	492b      	ldr	r1, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
 80023ee:	e01a      	b.n	8002426 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023f0:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a28      	ldr	r2, [pc, #160]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fc:	f7ff f980 	bl	8001700 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002404:	f7ff f97c 	bl	8001700 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e314      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1dc>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d073      	beq.n	800251a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x21c>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d10e      	bne.n	800245c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d063      	beq.n	8002518 <HAL_RCC_OscConfig+0x2f0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d15f      	bne.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e2f1      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x24c>
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0b      	ldr	r2, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e025      	b.n	80024c0 <HAL_RCC_OscConfig+0x298>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247c:	d114      	bne.n	80024a8 <HAL_RCC_OscConfig+0x280>
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a02      	ldr	r2, [pc, #8]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e013      	b.n	80024c0 <HAL_RCC_OscConfig+0x298>
 8002498:	40021000 	.word	0x40021000
 800249c:	0800579c 	.word	0x0800579c
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000004 	.word	0x20000004
 80024a8:	4ba0      	ldr	r3, [pc, #640]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a9f      	ldr	r2, [pc, #636]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b9d      	ldr	r3, [pc, #628]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a9c      	ldr	r2, [pc, #624]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff f91a 	bl	8001700 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff f916 	bl	8001700 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e2ae      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	4b92      	ldr	r3, [pc, #584]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2a8>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff f906 	bl	8001700 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff f902 	bl	8001700 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e29a      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	4b88      	ldr	r3, [pc, #544]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2d0>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d060      	beq.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x310>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d119      	bne.n	8002566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d116      	bne.n	8002566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002538:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x328>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e277      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	4973      	ldr	r1, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	e040      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256e:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7ff f8c1 	bl	8001700 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7ff f8bd 	bl	8001700 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e255      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	4b65      	ldr	r3, [pc, #404]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b62      	ldr	r3, [pc, #392]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	495f      	ldr	r1, [pc, #380]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
 80025b4:	e018      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7ff f89d 	bl	8001700 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ca:	f7ff f899 	bl	8001700 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e231      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d03c      	beq.n	800266e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01c      	beq.n	8002636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002602:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f878 	bl	8001700 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff f874 	bl	8001700 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e20c      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCC_OscConfig+0x3ec>
 8002634:	e01b      	b.n	800266e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800263c:	4a3b      	ldr	r2, [pc, #236]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7ff f85b 	bl	8001700 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7ff f857 	bl	8001700 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1ef      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	4b32      	ldr	r3, [pc, #200]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ef      	bne.n	800264e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a6 	beq.w	80027c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	@ 0x58
 8002698:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a4:	2301      	movs	r3, #1
 80026a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c0:	f7ff f81e 	bl	8001700 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7ff f81a 	bl	8001700 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1b2      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0x4d8>
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fe:	e029      	b.n	8002754 <HAL_RCC_OscConfig+0x52c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d115      	bne.n	8002734 <HAL_RCC_OscConfig+0x50c>
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002728:	e014      	b.n	8002754 <HAL_RCC_OscConfig+0x52c>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	4b9a      	ldr	r3, [pc, #616]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	4a99      	ldr	r2, [pc, #612]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002744:	4b96      	ldr	r3, [pc, #600]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	4a95      	ldr	r2, [pc, #596]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe ffd0 	bl	8001700 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe ffcc 	bl	8001700 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e162      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b89      	ldr	r3, [pc, #548]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ed      	beq.n	8002764 <HAL_RCC_OscConfig+0x53c>
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7fe ffb9 	bl	8001700 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe ffb5 	bl	8001700 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e14b      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a8:	4b7d      	ldr	r3, [pc, #500]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ed      	bne.n	8002792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b78      	ldr	r3, [pc, #480]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	4a77      	ldr	r2, [pc, #476]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d03c      	beq.n	800284e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01c      	beq.n	8002816 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027dc:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e2:	4a6f      	ldr	r2, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe ff88 	bl	8001700 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f4:	f7fe ff84 	bl	8001700 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e11c      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002806:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ef      	beq.n	80027f4 <HAL_RCC_OscConfig+0x5cc>
 8002814:	e01b      	b.n	800284e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002816:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800281c:	4a60      	ldr	r2, [pc, #384]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe ff6b 	bl	8001700 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282e:	f7fe ff67 	bl	8001700 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ff      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002840:	4b57      	ldr	r3, [pc, #348]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ef      	bne.n	800282e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80f3 	beq.w	8002a3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	2b02      	cmp	r3, #2
 800285e:	f040 80c9 	bne.w	80029f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002862:	4b4f      	ldr	r3, [pc, #316]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	429a      	cmp	r2, r3
 8002874:	d12c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	3b01      	subs	r3, #1
 8002882:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d123      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002892:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d11b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d113      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d109      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	3b01      	subs	r3, #1
 80028ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d06b      	beq.n	80029a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d062      	beq.n	800299c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028d6:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0ac      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f2:	f7fe ff05 	bl	8001700 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe ff01 	bl	8001700 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e099      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290c:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002928:	3a01      	subs	r2, #1
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002932:	0212      	lsls	r2, r2, #8
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0552      	lsls	r2, r2, #21
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002946:	0852      	lsrs	r2, r2, #1
 8002948:	3a01      	subs	r2, #1
 800294a:	0652      	lsls	r2, r2, #25
 800294c:	4311      	orrs	r1, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002952:	06d2      	lsls	r2, r2, #27
 8002954:	430a      	orrs	r2, r1
 8002956:	4912      	ldr	r1, [pc, #72]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0f      	ldr	r2, [pc, #60]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a0c      	ldr	r2, [pc, #48]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002974:	f7fe fec4 	bl	8001700 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fec0 	bl	8001700 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e058      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299a:	e050      	b.n	8002a3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04f      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d144      	bne.n	8002a3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029b4:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029cc:	f7fe fe98 	bl	8001700 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe fe94 	bl	8001700 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e02c      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x7ac>
 80029f2:	e024      	b.n	8002a3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d01f      	beq.n	8002a3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe fe7b 	bl	8001700 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fe77 	bl	8001700 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e00f      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4905      	ldr	r1, [pc, #20]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x824>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
 8002a38:	e001      	b.n	8002a3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	feeefffc 	.word	0xfeeefffc

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0e7      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b72      	ldr	r3, [pc, #456]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4970      	ldr	r1, [pc, #448]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b6e      	ldr	r3, [pc, #440]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cf      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d908      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4960      	ldr	r1, [pc, #384]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04c      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0a6      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e09a      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b06:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e08e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e086      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b46      	ldr	r3, [pc, #280]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4943      	ldr	r1, [pc, #268]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7fe fde2 	bl	8001700 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fdde 	bl	8001700 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e06e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d010      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d208      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	492b      	ldr	r1, [pc, #172]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b96:	4b29      	ldr	r3, [pc, #164]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d210      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 0207 	bic.w	r2, r3, #7
 8002bac:	4923      	ldr	r1, [pc, #140]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb4:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e036      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4918      	ldr	r1, [pc, #96]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4910      	ldr	r1, [pc, #64]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c04:	f000 f824 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f4>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f8>)
 8002c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1fc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe fd19 	bl	8001660 <HAL_InitTick>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c32:	7afb      	ldrb	r3, [r7, #11]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0800579c 	.word	0x0800579c
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	@ 0x24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x34>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11e      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c84:	4b34      	ldr	r3, [pc, #208]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cac:	4a2b      	ldr	r2, [pc, #172]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d134      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0xac>
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfe:	617b      	str	r3, [r7, #20]
      break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	617b      	str	r3, [r7, #20]
      break;
 8002d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	3301      	adds	r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fb03 f202 	mul.w	r2, r3, r2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	0e5b      	lsrs	r3, r3, #25
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d48:	69bb      	ldr	r3, [r7, #24]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	080057b4 	.word	0x080057b4
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080057ac 	.word	0x080057ac

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db0:	f7ff ffda 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0adb      	lsrs	r3, r3, #11
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4904      	ldr	r1, [pc, #16]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	080057ac 	.word	0x080057ac

08002dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f9b6 	bl	8002160 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	e014      	b.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a24      	ldr	r2, [pc, #144]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff f9a6 	bl	8002160 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e28:	d10b      	bne.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d919      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e34:	d902      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e013      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e010      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	@ 0x80
 8002e46:	d902      	bls.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e48:	2303      	movs	r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e00a      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b80      	cmp	r3, #128	@ 0x80
 8002e52:	d102      	bne.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e54:	2302      	movs	r3, #2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	e004      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d101      	bne.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4909      	ldr	r1, [pc, #36]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e74:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d031      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ebe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ec2:	d814      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ecc:	d10f      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ece:	4b5d      	ldr	r3, [pc, #372]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a5c      	ldr	r2, [pc, #368]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eda:	e00c      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f9ce 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b51      	ldr	r3, [pc, #324]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0a:	494e      	ldr	r1, [pc, #312]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f12:	e001      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 809e 	beq.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f2a:	4b46      	ldr	r3, [pc, #280]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	4a3f      	ldr	r2, [pc, #252]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a39      	ldr	r2, [pc, #228]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f68:	f7fe fbca 	bl	8001700 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f6e:	e009      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f70:	f7fe fbc6 	bl	8001700 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d902      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	74fb      	strb	r3, [r7, #19]
        break;
 8002f82:	e005      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f84:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ef      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d15a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f96:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d019      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d016      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fb86 	bl	8001700 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff6:	e00b      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fb82 	bl	8001700 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d902      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	74fb      	strb	r3, [r7, #19]
            break;
 800300e:	e006      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ec      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003032:	4904      	ldr	r1, [pc, #16]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800303a:	e009      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003050:	7c7b      	ldrb	r3, [r7, #17]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b8a      	ldr	r3, [pc, #552]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	4a89      	ldr	r2, [pc, #548]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306e:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4980      	ldr	r1, [pc, #512]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003090:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	f023 020c 	bic.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	4978      	ldr	r1, [pc, #480]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b2:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	496f      	ldr	r1, [pc, #444]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030da:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e2:	4967      	ldr	r1, [pc, #412]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030f6:	4b62      	ldr	r3, [pc, #392]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	495e      	ldr	r1, [pc, #376]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	4956      	ldr	r1, [pc, #344]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800313a:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	494d      	ldr	r1, [pc, #308]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d028      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800315c:	4b48      	ldr	r3, [pc, #288]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003162:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	4945      	ldr	r1, [pc, #276]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800317a:	d106      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b40      	ldr	r3, [pc, #256]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a3f      	ldr	r2, [pc, #252]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
 8003188:	e011      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003192:	d10c      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f872 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d028      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ba:	4b31      	ldr	r3, [pc, #196]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	492d      	ldr	r1, [pc, #180]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031da:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a28      	ldr	r2, [pc, #160]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031e4:	60d3      	str	r3, [r2, #12]
 80031e6:	e011      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f843 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01c      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003226:	4916      	ldr	r1, [pc, #88]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003236:	d10c      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f820 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800325e:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326c:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003274:	7cbb      	ldrb	r3, [r7, #18]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000

08003284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003292:	4b74      	ldr	r3, [pc, #464]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800329e:	4b71      	ldr	r3, [pc, #452]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
       ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
       ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d047      	beq.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e044      	b.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d018      	beq.n	800330a <RCCEx_PLLSAI1_Config+0x86>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d825      	bhi.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0x62>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d009      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x74>
 80032e4:	e020      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e01a      	b.n	800332e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e013      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b56      	ldr	r3, [pc, #344]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003316:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003326:	e006      	b.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e004      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003336:	bf00      	nop
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	430b      	orrs	r3, r1
 8003354:	4943      	ldr	r1, [pc, #268]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d17c      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003360:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800336a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fe f9c8 	bl	8001700 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fe f9c4 	bl	8001700 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
        break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003388:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ef      	bne.n	8003374 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d15f      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d110      	bne.n	80033c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033a0:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80033a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	0211      	lsls	r1, r2, #8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	06d2      	lsls	r2, r2, #27
 80033b8:	430a      	orrs	r2, r1
 80033ba:	492a      	ldr	r1, [pc, #168]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	610b      	str	r3, [r1, #16]
 80033c0:	e027      	b.n	8003412 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d112      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c8:	4b26      	ldr	r3, [pc, #152]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6912      	ldr	r2, [r2, #16]
 80033de:	0852      	lsrs	r2, r2, #1
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0552      	lsls	r2, r2, #21
 80033e4:	430a      	orrs	r2, r1
 80033e6:	491f      	ldr	r1, [pc, #124]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	610b      	str	r3, [r1, #16]
 80033ec:	e011      	b.n	8003412 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6892      	ldr	r2, [r2, #8]
 80033fe:	0211      	lsls	r1, r2, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6952      	ldr	r2, [r2, #20]
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0652      	lsls	r2, r2, #25
 800340a:	430a      	orrs	r2, r1
 800340c:	4915      	ldr	r1, [pc, #84]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003412:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a13      	ldr	r2, [pc, #76]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800341c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fe f96f 	bl	8001700 <HAL_GetTick>
 8003422:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003424:	e009      	b.n	800343a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003426:	f7fe f96b 	bl	8001700 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d902      	bls.n	800343a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	73fb      	strb	r3, [r7, #15]
          break;
 8003438:	e005      	b.n	8003446 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ef      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4903      	ldr	r1, [pc, #12]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003456:	4313      	orrs	r3, r2
 8003458:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e049      	b.n	800350e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd ff78 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 fab2 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d001      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e03b      	b.n	80035a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x4e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355a:	d004      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x4e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d115      	bne.n	8003592 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <HAL_TIM_Base_Start_IT+0xa4>)
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d015      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x8c>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357e:	d011      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	e008      	b.n	80035a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e000      	b.n	80035a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40014000 	.word	0x40014000
 80035bc:	00010007 	.word	0x00010007

080035c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <HAL_TIM_Base_Stop_IT+0x48>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a1a      	ldr	r2, [r3, #32]
 80035ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_Base_Stop_IT+0x48>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01b      	beq.n	8003682 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0202 	mvn.w	r2, #2
 8003652:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9b2 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 800366e:	e005      	b.n	800367c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f9a4 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9b5 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01b      	beq.n	80036ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0204 	mvn.w	r2, #4
 800369e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f98c 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 80036ba:	e005      	b.n	80036c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f97e 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f98f 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01b      	beq.n	800371a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f06f 0208 	mvn.w	r2, #8
 80036ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f966 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 8003706:	e005      	b.n	8003714 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f958 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f969 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01b      	beq.n	8003766 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0210 	mvn.w	r2, #16
 8003736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2208      	movs	r2, #8
 800373c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f940 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 8003752:	e005      	b.n	8003760 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f932 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f943 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0201 	mvn.w	r2, #1
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fd fc88 	bl	800109a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 faa6 	bl	8003d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa9e 	bl	8003d18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8fd 	bl	80039fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0220 	mvn.w	r2, #32
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa66 	bl	8003cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x1c>
 8003844:	2302      	movs	r3, #2
 8003846:	e0b6      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x18a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003884:	d03e      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0xd8>
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800388a:	f200 8087 	bhi.w	800399c <HAL_TIM_ConfigClockSource+0x170>
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003892:	f000 8086 	beq.w	80039a2 <HAL_TIM_ConfigClockSource+0x176>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389a:	d87f      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 800389c:	2b70      	cmp	r3, #112	@ 0x70
 800389e:	d01a      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0xaa>
 80038a0:	2b70      	cmp	r3, #112	@ 0x70
 80038a2:	d87b      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 80038a4:	2b60      	cmp	r3, #96	@ 0x60
 80038a6:	d050      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x11e>
 80038a8:	2b60      	cmp	r3, #96	@ 0x60
 80038aa:	d877      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 80038ac:	2b50      	cmp	r3, #80	@ 0x50
 80038ae:	d03c      	beq.n	800392a <HAL_TIM_ConfigClockSource+0xfe>
 80038b0:	2b50      	cmp	r3, #80	@ 0x50
 80038b2:	d873      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d058      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x13e>
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	d86f      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 80038bc:	2b30      	cmp	r3, #48	@ 0x30
 80038be:	d064      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15e>
 80038c0:	2b30      	cmp	r3, #48	@ 0x30
 80038c2:	d86b      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d060      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15e>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d867      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x170>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d05c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15e>
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d05a      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15e>
 80038d4:	e062      	b.n	800399c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e6:	f000 f97d 	bl	8003be4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	609a      	str	r2, [r3, #8]
      break;
 8003902:	e04f      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003914:	f000 f966 	bl	8003be4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003926:	609a      	str	r2, [r3, #8]
      break;
 8003928:	e03c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	461a      	mov	r2, r3
 8003938:	f000 f8da 	bl	8003af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2150      	movs	r1, #80	@ 0x50
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f933 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8003948:	e02c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003956:	461a      	mov	r2, r3
 8003958:	f000 f8f9 	bl	8003b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2160      	movs	r1, #96	@ 0x60
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f923 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8003968:	e01c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	461a      	mov	r2, r3
 8003978:	f000 f8ba 	bl	8003af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2140      	movs	r1, #64	@ 0x40
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f913 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8003988:	e00c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f000 f90a 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 800399a:	e003      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	e000      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a30      	ldr	r2, [pc, #192]	@ (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0x20>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2e:	d108      	bne.n	8003a42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a27      	ldr	r2, [pc, #156]	@ (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_Base_SetConfig+0x52>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0x52>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a24      	ldr	r2, [pc, #144]	@ (8003ae8 <TIM_Base_SetConfig+0xd8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0x52>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	@ (8003aec <TIM_Base_SetConfig+0xdc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_Base_SetConfig+0xa0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a11      	ldr	r2, [pc, #68]	@ (8003ae8 <TIM_Base_SetConfig+0xd8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0xa0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a10      	ldr	r2, [pc, #64]	@ (8003aec <TIM_Base_SetConfig+0xdc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400

08003af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 030a 	bic.w	r3, r3, #10
 8003b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f023 0210 	bic.w	r2, r3, #16
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	031b      	lsls	r3, r3, #12
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f043 0307 	orr.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e04f      	b.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a14      	ldr	r2, [pc, #80]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a10      	ldr	r2, [pc, #64]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10c      	bne.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40014000 	.word	0x40014000

08003cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e040      	b.n	8003dc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fba4 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fe4c 	bl	8004a10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fc1d 	bl	80045b8 <UART_SetConfig>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e01b      	b.n	8003dc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fecb 	bl	8004b54 <UART_CheckIdleState>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	@ 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d137      	bne.n	8003e50 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Receive_IT+0x24>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e030      	b.n	8003e52 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <HAL_UART_Receive_IT+0x94>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01f      	beq.n	8003e40 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d018      	beq.n	8003e40 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69f9      	ldr	r1, [r7, #28]
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 ff9a 	bl	8004d80 <UART_Start_Receive_IT>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	@ 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40008000 	.word	0x40008000

08003e60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d165      	bne.n	8003f42 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_UART_Transmit_DMA+0x22>
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e05e      	b.n	8003f44 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2221      	movs	r2, #33	@ 0x21
 8003ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d027      	beq.n	8003f02 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb6:	4a25      	ldr	r2, [pc, #148]	@ (8003f4c <HAL_UART_Transmit_DMA+0xec>)
 8003eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	4a24      	ldr	r2, [pc, #144]	@ (8003f50 <HAL_UART_Transmit_DMA+0xf0>)
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a23      	ldr	r2, [pc, #140]	@ (8003f54 <HAL_UART_Transmit_DMA+0xf4>)
 8003ec8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	2200      	movs	r2, #0
 8003ed0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eda:	4619      	mov	r1, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3328      	adds	r3, #40	@ 0x28
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	f7fd fde1 	bl	8001aac <HAL_DMA_Start_IT>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e020      	b.n	8003f44 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2240      	movs	r2, #64	@ 0x40
 8003f08:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3728      	adds	r7, #40	@ 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	08005021 	.word	0x08005021
 8003f50:	080050bb 	.word	0x080050bb
 8003f54:	080050d7 	.word	0x080050d7

08003f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f86:	4013      	ands	r3, r2
 8003f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00f      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 82ca 	beq.w	800454a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
      }
      return;
 8003fbe:	e2c4      	b.n	800454a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8117 	beq.w	80041f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003fda:	4b85      	ldr	r3, [pc, #532]	@ (80041f0 <HAL_UART_IRQHandler+0x298>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 810a 	beq.w	80041f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_UART_IRQHandler+0xbc>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800400a:	f043 0201 	orr.w	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d011      	beq.n	8004044 <HAL_UART_IRQHandler+0xec>
 8004020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2202      	movs	r2, #2
 8004032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <HAL_UART_IRQHandler+0x11c>
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2204      	movs	r2, #4
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004090:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2208      	movs	r2, #8
 800409e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a6:	f043 0208 	orr.w	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_UART_IRQHandler+0x18a>
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8230 	beq.w	800454e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b40      	cmp	r3, #64	@ 0x40
 800412c:	d005      	beq.n	800413a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800412e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004132:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004136:	2b00      	cmp	r3, #0
 8004138:	d04f      	beq.n	80041da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 ff0c 	bl	8004f58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d141      	bne.n	80041d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3308      	adds	r3, #8
 8004154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3308      	adds	r3, #8
 8004176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800417a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800417e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1d9      	bne.n	800414e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d013      	beq.n	80041ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a6:	4a13      	ldr	r2, [pc, #76]	@ (80041f4 <HAL_UART_IRQHandler+0x29c>)
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fd1a 	bl	8001be8 <HAL_DMA_Abort_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d017      	beq.n	80041ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041c4:	4610      	mov	r0, r2
 80041c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	e00f      	b.n	80041ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9de 	bl	800458c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	e00b      	b.n	80041ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f9da 	bl	800458c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	e007      	b.n	80041ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f9d6 	bl	800458c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041e8:	e1b1      	b.n	800454e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ea:	bf00      	nop
    return;
 80041ec:	e1af      	b.n	800454e <HAL_UART_IRQHandler+0x5f6>
 80041ee:	bf00      	nop
 80041f0:	04000120 	.word	0x04000120
 80041f4:	08005155 	.word	0x08005155

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 816a 	bne.w	80044d6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8163 	beq.w	80044d6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 815c 	beq.w	80044d6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	f040 80d4 	bne.w	80043de <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004242:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80ad 	beq.w	80043a6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004256:	429a      	cmp	r2, r3
 8004258:	f080 80a5 	bcs.w	80043a6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004262:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 8086 	bne.w	8004384 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800428c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1da      	bne.n	8004278 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e1      	bne.n	80042c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800430e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004324:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004328:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e3      	bne.n	80042fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004354:	f023 0310 	bic.w	r3, r3, #16
 8004358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004366:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004368:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800436c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e4      	bne.n	8004344 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fbf4 	bl	8001b6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004396:	b29b      	uxth	r3, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	b29b      	uxth	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8fe 	bl	80045a0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043a4:	e0d5      	b.n	8004552 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f040 80ce 	bne.w	8004552 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	f040 80c5 	bne.w	8004552 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8e2 	bl	80045a0 <HAL_UARTEx_RxEventCallback>
      return;
 80043dc:	e0b9      	b.n	8004552 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80ab 	beq.w	8004556 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a6 	beq.w	8004556 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800442c:	647b      	str	r3, [r7, #68]	@ 0x44
 800442e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800443a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e4      	bne.n	800440a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	623b      	str	r3, [r7, #32]
   return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004464:	633a      	str	r2, [r7, #48]	@ 0x30
 8004466:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800446a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	60fb      	str	r3, [r7, #12]
   return(result);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0310 	bic.w	r3, r3, #16
 80044a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	617b      	str	r3, [r7, #20]
   return(result);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e4      	bne.n	800448c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f866 	bl	80045a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044d4:	e03f      	b.n	8004556 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <HAL_UART_IRQHandler+0x5a8>
 80044e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80044f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f001 f827 	bl	800554c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044fe:	e02d      	b.n	800455c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01c      	beq.n	800455a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
    }
    return;
 8004528:	e017      	b.n	800455a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <HAL_UART_IRQHandler+0x604>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800453a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fe1c 	bl	8005180 <UART_EndTransmit_IT>
    return;
 8004548:	e008      	b.n	800455c <HAL_UART_IRQHandler+0x604>
      return;
 800454a:	bf00      	nop
 800454c:	e006      	b.n	800455c <HAL_UART_IRQHandler+0x604>
    return;
 800454e:	bf00      	nop
 8004550:	e004      	b.n	800455c <HAL_UART_IRQHandler+0x604>
      return;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_UART_IRQHandler+0x604>
      return;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_UART_IRQHandler+0x604>
    return;
 800455a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800455c:	37e8      	adds	r7, #232	@ 0xe8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045bc:	b08a      	sub	sp, #40	@ 0x28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4313      	orrs	r3, r2
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4bb4      	ldr	r3, [pc, #720]	@ (80048b8 <UART_SetConfig+0x300>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4aa9      	ldr	r2, [pc, #676]	@ (80048bc <UART_SetConfig+0x304>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004620:	4313      	orrs	r3, r2
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4aa0      	ldr	r2, [pc, #640]	@ (80048c0 <UART_SetConfig+0x308>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d126      	bne.n	8004690 <UART_SetConfig+0xd8>
 8004642:	4ba0      	ldr	r3, [pc, #640]	@ (80048c4 <UART_SetConfig+0x30c>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b03      	cmp	r3, #3
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0xd0>
 8004650:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <UART_SetConfig+0xa0>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e080      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e07c      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e078      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e074      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468e:	e070      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a8c      	ldr	r2, [pc, #560]	@ (80048c8 <UART_SetConfig+0x310>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d138      	bne.n	800470c <UART_SetConfig+0x154>
 800469a:	4b8a      	ldr	r3, [pc, #552]	@ (80048c4 <UART_SetConfig+0x30c>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d82d      	bhi.n	8004704 <UART_SetConfig+0x14c>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <UART_SetConfig+0xf8>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	08004705 	.word	0x08004705
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004705 	.word	0x08004705
 80046dc:	08004705 	.word	0x08004705
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e042      	b.n	8004772 <UART_SetConfig+0x1ba>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e03e      	b.n	8004772 <UART_SetConfig+0x1ba>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e03a      	b.n	8004772 <UART_SetConfig+0x1ba>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e036      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470a:	e032      	b.n	8004772 <UART_SetConfig+0x1ba>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a6a      	ldr	r2, [pc, #424]	@ (80048bc <UART_SetConfig+0x304>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d12a      	bne.n	800476c <UART_SetConfig+0x1b4>
 8004716:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <UART_SetConfig+0x30c>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004724:	d01a      	beq.n	800475c <UART_SetConfig+0x1a4>
 8004726:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800472a:	d81b      	bhi.n	8004764 <UART_SetConfig+0x1ac>
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004730:	d00c      	beq.n	800474c <UART_SetConfig+0x194>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004736:	d815      	bhi.n	8004764 <UART_SetConfig+0x1ac>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <UART_SetConfig+0x18c>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004740:	d008      	beq.n	8004754 <UART_SetConfig+0x19c>
 8004742:	e00f      	b.n	8004764 <UART_SetConfig+0x1ac>
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e012      	b.n	8004772 <UART_SetConfig+0x1ba>
 800474c:	2302      	movs	r3, #2
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e00e      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004754:	2304      	movs	r3, #4
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e00a      	b.n	8004772 <UART_SetConfig+0x1ba>
 800475c:	2308      	movs	r3, #8
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004762:	e006      	b.n	8004772 <UART_SetConfig+0x1ba>
 8004764:	2310      	movs	r3, #16
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e002      	b.n	8004772 <UART_SetConfig+0x1ba>
 800476c:	2310      	movs	r3, #16
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a51      	ldr	r2, [pc, #324]	@ (80048bc <UART_SetConfig+0x304>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d17a      	bne.n	8004872 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800477c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004780:	2b08      	cmp	r3, #8
 8004782:	d824      	bhi.n	80047ce <UART_SetConfig+0x216>
 8004784:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <UART_SetConfig+0x1d4>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047bf 	.word	0x080047bf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047cf 	.word	0x080047cf
 80047a8:	080047cf 	.word	0x080047cf
 80047ac:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe fae6 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80047b4:	61f8      	str	r0, [r7, #28]
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <UART_SetConfig+0x314>)
 80047ba:	61fb      	str	r3, [r7, #28]
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe fa47 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80047c2:	61f8      	str	r0, [r7, #28]
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	61fb      	str	r3, [r7, #28]
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8107 	beq.w	80049f0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d305      	bcc.n	80047fe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d903      	bls.n	8004806 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004804:	e0f4      	b.n	80049f0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2200      	movs	r2, #0
 800480a:	461c      	mov	r4, r3
 800480c:	4615      	mov	r5, r2
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	022b      	lsls	r3, r5, #8
 8004818:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800481c:	0222      	lsls	r2, r4, #8
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	6849      	ldr	r1, [r1, #4]
 8004822:	0849      	lsrs	r1, r1, #1
 8004824:	2000      	movs	r0, #0
 8004826:	4688      	mov	r8, r1
 8004828:	4681      	mov	r9, r0
 800482a:	eb12 0a08 	adds.w	sl, r2, r8
 800482e:	eb43 0b09 	adc.w	fp, r3, r9
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004840:	4650      	mov	r0, sl
 8004842:	4659      	mov	r1, fp
 8004844:	f7fb fcd4 	bl	80001f0 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4613      	mov	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d308      	bcc.n	800486a <UART_SetConfig+0x2b2>
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485e:	d204      	bcs.n	800486a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	e0c2      	b.n	80049f0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004870:	e0be      	b.n	80049f0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487a:	d16a      	bne.n	8004952 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800487c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004880:	2b08      	cmp	r3, #8
 8004882:	d834      	bhi.n	80048ee <UART_SetConfig+0x336>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0x2d4>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048d1 	.word	0x080048d1
 8004894:	080048d9 	.word	0x080048d9
 8004898:	080048ef 	.word	0x080048ef
 800489c:	080048df 	.word	0x080048df
 80048a0:	080048ef 	.word	0x080048ef
 80048a4:	080048ef 	.word	0x080048ef
 80048a8:	080048ef 	.word	0x080048ef
 80048ac:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe fa66 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80048b4:	61f8      	str	r0, [r7, #28]
        break;
 80048b6:	e020      	b.n	80048fa <UART_SetConfig+0x342>
 80048b8:	efff69f3 	.word	0xefff69f3
 80048bc:	40008000 	.word	0x40008000
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40004400 	.word	0x40004400
 80048cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7fe fa6c 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e010      	b.n	80048fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b4c      	ldr	r3, [pc, #304]	@ (8004a0c <UART_SetConfig+0x454>)
 80048da:	61fb      	str	r3, [r7, #28]
        break;
 80048dc:	e00d      	b.n	80048fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe f9b7 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80048e2:	61f8      	str	r0, [r7, #28]
        break;
 80048e4:	e009      	b.n	80048fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e005      	b.n	80048fa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d077      	beq.n	80049f0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005a      	lsls	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d916      	bls.n	800494a <UART_SetConfig+0x392>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004922:	d212      	bcs.n	800494a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f023 030f 	bic.w	r3, r3, #15
 800492c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	b29a      	uxth	r2, r3
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	4313      	orrs	r3, r2
 800493e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	8afa      	ldrh	r2, [r7, #22]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	e052      	b.n	80049f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004950:	e04e      	b.n	80049f0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004952:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004956:	2b08      	cmp	r3, #8
 8004958:	d827      	bhi.n	80049aa <UART_SetConfig+0x3f2>
 800495a:	a201      	add	r2, pc, #4	@ (adr r2, 8004960 <UART_SetConfig+0x3a8>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004985 	.word	0x08004985
 8004964:	0800498d 	.word	0x0800498d
 8004968:	08004995 	.word	0x08004995
 800496c:	080049ab 	.word	0x080049ab
 8004970:	0800499b 	.word	0x0800499b
 8004974:	080049ab 	.word	0x080049ab
 8004978:	080049ab 	.word	0x080049ab
 800497c:	080049ab 	.word	0x080049ab
 8004980:	080049a3 	.word	0x080049a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fe f9fc 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004988:	61f8      	str	r0, [r7, #28]
        break;
 800498a:	e014      	b.n	80049b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800498c:	f7fe fa0e 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e010      	b.n	80049b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004994:	4b1d      	ldr	r3, [pc, #116]	@ (8004a0c <UART_SetConfig+0x454>)
 8004996:	61fb      	str	r3, [r7, #28]
        break;
 8004998:	e00d      	b.n	80049b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499a:	f7fe f959 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800499e:	61f8      	str	r0, [r7, #28]
        break;
 80049a0:	e009      	b.n	80049b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
        break;
 80049a8:	e005      	b.n	80049b6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049b4:	bf00      	nop
    }

    if (pclk != 0U)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d019      	beq.n	80049f0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	085a      	lsrs	r2, r3, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	441a      	add	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	d909      	bls.n	80049ea <UART_SetConfig+0x432>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049dc:	d205      	bcs.n	80049ea <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e002      	b.n	80049f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3728      	adds	r7, #40	@ 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	00f42400 	.word	0x00f42400

08004a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01a      	beq.n	8004b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0e:	d10a      	bne.n	8004b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b098      	sub	sp, #96	@ 0x60
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b64:	f7fc fdcc 	bl	8001700 <HAL_GetTick>
 8004b68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d12e      	bne.n	8004bd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b80:	2200      	movs	r2, #0
 8004b82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f88c 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e062      	b.n	8004c9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d149      	bne.n	8004c78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bec:	2200      	movs	r2, #0
 8004bee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f856 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03c      	beq.n	8004c78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e6      	bne.n	8004bfe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e011      	b.n	8004c9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3758      	adds	r7, #88	@ 0x58
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	e04f      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d04b      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fc fd1f 	bl	8001700 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e04e      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d037      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b80      	cmp	r3, #128	@ 0x80
 8004cea:	d034      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b40      	cmp	r3, #64	@ 0x40
 8004cf0:	d031      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d110      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2208      	movs	r2, #8
 8004d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f925 	bl	8004f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2208      	movs	r2, #8
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e029      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d30:	d111      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f90b 	bl	8004f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e00f      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d0a0      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b097      	sub	sp, #92	@ 0x5c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d10e      	bne.n	8004dd2 <UART_Start_Receive_IT+0x52>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <UART_Start_Receive_IT+0x48>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dc6:	e02d      	b.n	8004e24 <UART_Start_Receive_IT+0xa4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	22ff      	movs	r2, #255	@ 0xff
 8004dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dd0:	e028      	b.n	8004e24 <UART_Start_Receive_IT+0xa4>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <UART_Start_Receive_IT+0x76>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <UART_Start_Receive_IT+0x6c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	@ 0xff
 8004de6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dea:	e01b      	b.n	8004e24 <UART_Start_Receive_IT+0xa4>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	227f      	movs	r2, #127	@ 0x7f
 8004df0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004df4:	e016      	b.n	8004e24 <UART_Start_Receive_IT+0xa4>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dfe:	d10d      	bne.n	8004e1c <UART_Start_Receive_IT+0x9c>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <UART_Start_Receive_IT+0x92>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	227f      	movs	r2, #127	@ 0x7f
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e10:	e008      	b.n	8004e24 <UART_Start_Receive_IT+0xa4>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	223f      	movs	r2, #63	@ 0x3f
 8004e16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e1a:	e003      	b.n	8004e24 <UART_Start_Receive_IT+0xa4>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2222      	movs	r2, #34	@ 0x22
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e54:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e70:	d107      	bne.n	8004e82 <UART_Start_Receive_IT+0x102>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a21      	ldr	r2, [pc, #132]	@ (8004f04 <UART_Start_Receive_IT+0x184>)
 8004e7e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e80:	e002      	b.n	8004e88 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <UART_Start_Receive_IT+0x188>)
 8004e86:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d019      	beq.n	8004ec4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e6      	bne.n	8004e90 <UART_Start_Receive_IT+0x110>
 8004ec2:	e018      	b.n	8004ef6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f043 0320 	orr.w	r3, r3, #32
 8004ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ee2:	623b      	str	r3, [r7, #32]
 8004ee4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	69f9      	ldr	r1, [r7, #28]
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	375c      	adds	r7, #92	@ 0x5c
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	08005391 	.word	0x08005391
 8004f08:	080051d5 	.word	0x080051d5

08004f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b089      	sub	sp, #36	@ 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e6      	bne.n	8004f14 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004f4c:	bf00      	nop
 8004f4e:	3724      	adds	r7, #36	@ 0x24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b095      	sub	sp, #84	@ 0x54
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e6      	bne.n	8004f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d118      	bne.n	8005000 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0310 	bic.w	r3, r3, #16
 8004fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005014:	bf00      	nop
 8005016:	3754      	adds	r7, #84	@ 0x54
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b090      	sub	sp, #64	@ 0x40
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d137      	bne.n	80050ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800503c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800503e:	2200      	movs	r2, #0
 8005040:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800505c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3308      	adds	r3, #8
 8005062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005064:	633a      	str	r2, [r7, #48]	@ 0x30
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	60fb      	str	r3, [r7, #12]
   return(result);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
 800508e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	69b9      	ldr	r1, [r7, #24]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	617b      	str	r3, [r7, #20]
   return(result);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e6      	bne.n	8005078 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050aa:	e002      	b.n	80050b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80050ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80050ae:	f7ff fa59 	bl	8004564 <HAL_UART_TxCpltCallback>
}
 80050b2:	bf00      	nop
 80050b4:	3740      	adds	r7, #64	@ 0x40
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fa55 	bl	8004578 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b086      	sub	sp, #24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fc:	2b80      	cmp	r3, #128	@ 0x80
 80050fe:	d109      	bne.n	8005114 <UART_DMAError+0x3e>
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b21      	cmp	r3, #33	@ 0x21
 8005104:	d106      	bne.n	8005114 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f7ff fefc 	bl	8004f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511e:	2b40      	cmp	r3, #64	@ 0x40
 8005120:	d109      	bne.n	8005136 <UART_DMAError+0x60>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b22      	cmp	r3, #34	@ 0x22
 8005126:	d106      	bne.n	8005136 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005130:	6978      	ldr	r0, [r7, #20]
 8005132:	f7ff ff11 	bl	8004f58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513c:	f043 0210 	orr.w	r2, r3, #16
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff fa20 	bl	800458c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514c:	bf00      	nop
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff fa0a 	bl	800458c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	60bb      	str	r3, [r7, #8]
   return(result);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	613b      	str	r3, [r7, #16]
   return(result);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e6      	bne.n	8005188 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff f9cc 	bl	8004564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051cc:	bf00      	nop
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b09c      	sub	sp, #112	@ 0x70
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ec:	2b22      	cmp	r3, #34	@ 0x22
 80051ee:	f040 80be 	bne.w	800536e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80051f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005200:	b2d9      	uxtb	r1, r3
 8005202:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005206:	b2da      	uxtb	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	400a      	ands	r2, r1
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	f040 80a3 	bne.w	8005382 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800524a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800524c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800525a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800525c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005260:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800527e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	667b      	str	r3, [r7, #100]	@ 0x64
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800528e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005290:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800529c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e5      	bne.n	800526e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a34      	ldr	r2, [pc, #208]	@ (800538c <UART_RxISR_8BIT+0x1b8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01f      	beq.n	8005300 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d018      	beq.n	8005300 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	623b      	str	r3, [r7, #32]
   return(result);
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e6      	bne.n	80052ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005304:	2b01      	cmp	r3, #1
 8005306:	d12e      	bne.n	8005366 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60fb      	str	r3, [r7, #12]
   return(result);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	69b9      	ldr	r1, [r7, #24]
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	617b      	str	r3, [r7, #20]
   return(result);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b10      	cmp	r3, #16
 800534c:	d103      	bne.n	8005356 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2210      	movs	r2, #16
 8005354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff f91e 	bl	80045a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005364:	e00d      	b.n	8005382 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fb fea2 	bl	80010b0 <HAL_UART_RxCpltCallback>
}
 800536c:	e009      	b.n	8005382 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	8b1b      	ldrh	r3, [r3, #24]
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	b292      	uxth	r2, r2
 8005380:	831a      	strh	r2, [r3, #24]
}
 8005382:	bf00      	nop
 8005384:	3770      	adds	r7, #112	@ 0x70
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40008000 	.word	0x40008000

08005390 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b09c      	sub	sp, #112	@ 0x70
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800539e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053a8:	2b22      	cmp	r3, #34	@ 0x22
 80053aa:	f040 80be 	bne.w	800552a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80053be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80053c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053c6:	4013      	ands	r3, r2
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d2:	1c9a      	adds	r2, r3, #2
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f040 80a3 	bne.w	800553e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540c:	667b      	str	r3, [r7, #100]	@ 0x64
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005416:	657b      	str	r3, [r7, #84]	@ 0x54
 8005418:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800541c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	663b      	str	r3, [r7, #96]	@ 0x60
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800544a:	643a      	str	r2, [r7, #64]	@ 0x40
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a34      	ldr	r2, [pc, #208]	@ (8005548 <UART_RxISR_16BIT+0x1b8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d01f      	beq.n	80054bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	61fb      	str	r3, [r7, #28]
   return(result);
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800549e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e6      	bne.n	800548a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d12e      	bne.n	8005522 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 0310 	bic.w	r3, r3, #16
 80054de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6979      	ldr	r1, [r7, #20]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b10      	cmp	r3, #16
 8005508:	d103      	bne.n	8005512 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2210      	movs	r2, #16
 8005510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff f840 	bl	80045a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005520:	e00d      	b.n	800553e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fb fdc4 	bl	80010b0 <HAL_UART_RxCpltCallback>
}
 8005528:	e009      	b.n	800553e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	8b1b      	ldrh	r3, [r3, #24]
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0208 	orr.w	r2, r2, #8
 800553a:	b292      	uxth	r2, r2
 800553c:	831a      	strh	r2, [r3, #24]
}
 800553e:	bf00      	nop
 8005540:	3770      	adds	r7, #112	@ 0x70
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40008000 	.word	0x40008000

0800554c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <strncpy>:
 8005570:	b510      	push	{r4, lr}
 8005572:	3901      	subs	r1, #1
 8005574:	4603      	mov	r3, r0
 8005576:	b132      	cbz	r2, 8005586 <strncpy+0x16>
 8005578:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800557c:	f803 4b01 	strb.w	r4, [r3], #1
 8005580:	3a01      	subs	r2, #1
 8005582:	2c00      	cmp	r4, #0
 8005584:	d1f7      	bne.n	8005576 <strncpy+0x6>
 8005586:	441a      	add	r2, r3
 8005588:	2100      	movs	r1, #0
 800558a:	4293      	cmp	r3, r2
 800558c:	d100      	bne.n	8005590 <strncpy+0x20>
 800558e:	bd10      	pop	{r4, pc}
 8005590:	f803 1b01 	strb.w	r1, [r3], #1
 8005594:	e7f9      	b.n	800558a <strncpy+0x1a>
	...

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4d0d      	ldr	r5, [pc, #52]	@ (80055d0 <__libc_init_array+0x38>)
 800559c:	4c0d      	ldr	r4, [pc, #52]	@ (80055d4 <__libc_init_array+0x3c>)
 800559e:	1b64      	subs	r4, r4, r5
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	2600      	movs	r6, #0
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	4d0b      	ldr	r5, [pc, #44]	@ (80055d8 <__libc_init_array+0x40>)
 80055aa:	4c0c      	ldr	r4, [pc, #48]	@ (80055dc <__libc_init_array+0x44>)
 80055ac:	f000 f826 	bl	80055fc <_init>
 80055b0:	1b64      	subs	r4, r4, r5
 80055b2:	10a4      	asrs	r4, r4, #2
 80055b4:	2600      	movs	r6, #0
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	080057ec 	.word	0x080057ec
 80055d4:	080057ec 	.word	0x080057ec
 80055d8:	080057ec 	.word	0x080057ec
 80055dc:	080057f0 	.word	0x080057f0

080055e0 <memcpy>:
 80055e0:	440a      	add	r2, r1
 80055e2:	4291      	cmp	r1, r2
 80055e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055e8:	d100      	bne.n	80055ec <memcpy+0xc>
 80055ea:	4770      	bx	lr
 80055ec:	b510      	push	{r4, lr}
 80055ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f6:	4291      	cmp	r1, r2
 80055f8:	d1f9      	bne.n	80055ee <memcpy+0xe>
 80055fa:	bd10      	pop	{r4, pc}

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
